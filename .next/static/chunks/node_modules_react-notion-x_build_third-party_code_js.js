/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_react-notion-x_build_third-party_code_js"],{

/***/ "./node_modules/prismjs/components/prism-clike.min.js":
/*!************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-clike.min.js ***!
  \************************************************************/
/***/ (function() {

eval("Prism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,boolean:/\\b(?:false|true)\\b/,function:/\\b\\w+(?=\\()/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,punctuation:/[{}[\\];(),.:]/};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNsaWtlLm1pbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUIsVUFBVSxrRUFBa0UsRUFBRSxtREFBbUQsVUFBVSxtRUFBbUUsZUFBZSx5SEFBeUgscUJBQXFCLHFUQUFxVCxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY2xpa2UubWluLmpzP2VhOGEiXSwic291cmNlc0NvbnRlbnQiOlsiUHJpc20ubGFuZ3VhZ2VzLmNsaWtlPXtjb21tZW50Olt7cGF0dGVybjovKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMH0se3BhdHRlcm46LyhefFteXFxcXDpdKVxcL1xcLy4qLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMH1dLHN0cmluZzp7cGF0dGVybjovKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLGdyZWVkeTohMH0sXCJjbGFzcy1uYW1lXCI6e3BhdHRlcm46LyhcXGIoPzpjbGFzc3xleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxpbnRlcmZhY2V8bmV3fHRyYWl0KVxccyt8XFxiY2F0Y2hcXHMrXFwoKVtcXHcuXFxcXF0rL2ksbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9bLlxcXFxdL319LGtleXdvcmQ6L1xcYig/OmJyZWFrfGNhdGNofGNvbnRpbnVlfGRvfGVsc2V8ZmluYWxseXxmb3J8ZnVuY3Rpb258aWZ8aW58aW5zdGFuY2VvZnxuZXd8bnVsbHxyZXR1cm58dGhyb3d8dHJ5fHdoaWxlKVxcYi8sYm9vbGVhbjovXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLGZ1bmN0aW9uOi9cXGJcXHcrKD89XFwoKS8sbnVtYmVyOi9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksb3BlcmF0b3I6L1s8Pl09P3xbIT1dPT89P3wtLT98XFwrXFwrP3wmJj98XFx8XFx8P3xbPyovfl4lXS8scHVuY3R1YXRpb246L1t7fVtcXF07KCksLjpdL307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-clike.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-css-extras.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-css-extras.min.js ***!
  \*****************************************************************/
/***/ (function() {

eval("!function(e){var a,n=/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;e.languages.css.selector={pattern:e.languages.css.selector.pattern,lookbehind:!0,inside:a={\"pseudo-element\":/:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\"pseudo-class\":/:[-\\w]+/,class:/\\.[-\\w]+/,id:/#[-\\w]+/,attribute:{pattern:RegExp(\"\\\\[(?:[^[\\\\]\\\"']|\"+n.source+\")*\\\\]\"),greedy:!0,inside:{punctuation:/^\\[|\\]$/,\"case-sensitivity\":{pattern:/(\\s)[si]$/i,lookbehind:!0,alias:\"keyword\"},namespace:{pattern:/^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,lookbehind:!0,inside:{punctuation:/\\|$/}},\"attr-name\":{pattern:/^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,lookbehind:!0},\"attr-value\":[n,{pattern:/(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,lookbehind:!0}],operator:/[|~*^$]?=/}},\"n-th\":[{pattern:/(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,lookbehind:!0,inside:{number:/[\\dn]+/,operator:/[+-]/}},{pattern:/(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,lookbehind:!0}],combinator:/>|\\+|~|\\|\\|/,punctuation:/[(),]/}},e.languages.css.atrule.inside[\"selector-function-argument\"].inside=a,e.languages.insertBefore(\"css\",\"property\",{variable:{pattern:/(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,lookbehind:!0}});var r={pattern:/(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,lookbehind:!0},i={pattern:/(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,lookbehind:!0};e.languages.insertBefore(\"css\",\"function\",{operator:{pattern:/(\\s)[+\\-*\\/](?=\\s)/,lookbehind:!0},hexcode:{pattern:/\\B#[\\da-f]{3,8}\\b/i,alias:\"color\"},color:[{pattern:/(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,lookbehind:!0},{pattern:/\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,inside:{unit:r,number:i,function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}],entity:/\\\\[\\da-f]{1,8}/i,unit:r,number:i})}(Prism);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNzcy1leHRyYXMubWluLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsd0RBQXdELDBCQUEwQixpRUFBaUUsa0pBQWtKLHVFQUF1RSwwQ0FBMEMsbURBQW1ELFlBQVksMEVBQTBFLG1CQUFtQixjQUFjLDBEQUEwRCxrQkFBa0Isa0VBQWtFLHdCQUF3QixVQUFVLGdGQUFnRixpQ0FBaUMsRUFBRSxzREFBc0QsZ0RBQWdELGlIQUFpSCxVQUFVLHFHQUFxRyxFQUFFLE9BQU8scURBQXFELElBQUksOERBQThELDJDQUEyQyxVQUFVLDJDQUEyQyxVQUFVLG9CQUFvQixJQUFJLG1CQUFtQixTQUFTLDA3Q0FBMDdDLEVBQUUsOEJBQThCLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxnQ0FBZ0MsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLDBDQUEwQyw2REFBNkQsb0JBQW9CLElBQUksbUJBQW1CLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jc3MtZXh0cmFzLm1pbi5qcz9hZmM0Il0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlKXt2YXIgYSxuPS8oXCJ8JykoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLztlLmxhbmd1YWdlcy5jc3Muc2VsZWN0b3I9e3BhdHRlcm46ZS5sYW5ndWFnZXMuY3NzLnNlbGVjdG9yLnBhdHRlcm4sbG9va2JlaGluZDohMCxpbnNpZGU6YT17XCJwc2V1ZG8tZWxlbWVudFwiOi86KD86YWZ0ZXJ8YmVmb3JlfGZpcnN0LWxldHRlcnxmaXJzdC1saW5lfHNlbGVjdGlvbil8OjpbLVxcd10rLyxcInBzZXVkby1jbGFzc1wiOi86Wy1cXHddKy8sY2xhc3M6L1xcLlstXFx3XSsvLGlkOi8jWy1cXHddKy8sYXR0cmlidXRlOntwYXR0ZXJuOlJlZ0V4cChcIlxcXFxbKD86W15bXFxcXF1cXFwiJ118XCIrbi5zb3VyY2UrXCIpKlxcXFxdXCIpLGdyZWVkeTohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9eXFxbfFxcXSQvLFwiY2FzZS1zZW5zaXRpdml0eVwiOntwYXR0ZXJuOi8oXFxzKVtzaV0kL2ksbG9va2JlaGluZDohMCxhbGlhczpcImtleXdvcmRcIn0sbmFtZXNwYWNlOntwYXR0ZXJuOi9eKFxccyopKD86KD8hXFxzKVstKlxcd1xceEEwLVxcdUZGRkZdKSpcXHwoPyE9KS8sbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9cXHwkL319LFwiYXR0ci1uYW1lXCI6e3BhdHRlcm46L14oXFxzKikoPzooPyFcXHMpWy1cXHdcXHhBMC1cXHVGRkZGXSkrLyxsb29rYmVoaW5kOiEwfSxcImF0dHItdmFsdWVcIjpbbix7cGF0dGVybjovKD1cXHMqKSg/Oig/IVxccylbLVxcd1xceEEwLVxcdUZGRkZdKSsoPz1cXHMqJCkvLGxvb2tiZWhpbmQ6ITB9XSxvcGVyYXRvcjovW3x+Kl4kXT89L319LFwibi10aFwiOlt7cGF0dGVybjovKFxcKFxccyopWystXT9cXGQqW1xcZG5dKD86XFxzKlsrLV1cXHMqXFxkKyk/KD89XFxzKlxcKSkvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntudW1iZXI6L1tcXGRuXSsvLG9wZXJhdG9yOi9bKy1dL319LHtwYXR0ZXJuOi8oXFwoXFxzKikoPzpldmVufG9kZCkoPz1cXHMqXFwpKS9pLGxvb2tiZWhpbmQ6ITB9XSxjb21iaW5hdG9yOi8+fFxcK3x+fFxcfFxcfC8scHVuY3R1YXRpb246L1soKSxdL319LGUubGFuZ3VhZ2VzLmNzcy5hdHJ1bGUuaW5zaWRlW1wic2VsZWN0b3ItZnVuY3Rpb24tYXJndW1lbnRcIl0uaW5zaWRlPWEsZS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiY3NzXCIsXCJwcm9wZXJ0eVwiLHt2YXJpYWJsZTp7cGF0dGVybjovKF58W14tXFx3XFx4QTAtXFx1RkZGRl0pLS0oPyFcXHMpWy1fYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWy1cXHdcXHhBMC1cXHVGRkZGXSkqL2ksbG9va2JlaGluZDohMH19KTt2YXIgcj17cGF0dGVybjovKFxcYlxcZCspKD86JXxbYS16XSsoPyFbXFx3LV0pKS8sbG9va2JlaGluZDohMH0saT17cGF0dGVybjovKF58W15cXHcuLV0pLT8oPzpcXGQrKD86XFwuXFxkKyk/fFxcLlxcZCspLyxsb29rYmVoaW5kOiEwfTtlLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJjc3NcIixcImZ1bmN0aW9uXCIse29wZXJhdG9yOntwYXR0ZXJuOi8oXFxzKVsrXFwtKlxcL10oPz1cXHMpLyxsb29rYmVoaW5kOiEwfSxoZXhjb2RlOntwYXR0ZXJuOi9cXEIjW1xcZGEtZl17Myw4fVxcYi9pLGFsaWFzOlwiY29sb3JcIn0sY29sb3I6W3twYXR0ZXJuOi8oXnxbXlxcdy1dKSg/OkFsaWNlQmx1ZXxBbnRpcXVlV2hpdGV8QXF1YXxBcXVhbWFyaW5lfEF6dXJlfEJlaWdlfEJpc3F1ZXxCbGFja3xCbGFuY2hlZEFsbW9uZHxCbHVlfEJsdWVWaW9sZXR8QnJvd258QnVybHlXb29kfENhZGV0Qmx1ZXxDaGFydHJldXNlfENob2NvbGF0ZXxDb3JhbHxDb3JuZmxvd2VyQmx1ZXxDb3Juc2lsa3xDcmltc29ufEN5YW58RGFya0JsdWV8RGFya0N5YW58RGFya0dvbGRlblJvZHxEYXJrR3JbYWVdeXxEYXJrR3JlZW58RGFya0toYWtpfERhcmtNYWdlbnRhfERhcmtPbGl2ZUdyZWVufERhcmtPcmFuZ2V8RGFya09yY2hpZHxEYXJrUmVkfERhcmtTYWxtb258RGFya1NlYUdyZWVufERhcmtTbGF0ZUJsdWV8RGFya1NsYXRlR3JbYWVdeXxEYXJrVHVycXVvaXNlfERhcmtWaW9sZXR8RGVlcFBpbmt8RGVlcFNreUJsdWV8RGltR3JbYWVdeXxEb2RnZXJCbHVlfEZpcmVCcmlja3xGbG9yYWxXaGl0ZXxGb3Jlc3RHcmVlbnxGdWNoc2lhfEdhaW5zYm9yb3xHaG9zdFdoaXRlfEdvbGR8R29sZGVuUm9kfEdyW2FlXXl8R3JlZW58R3JlZW5ZZWxsb3d8SG9uZXlEZXd8SG90UGlua3xJbmRpYW5SZWR8SW5kaWdvfEl2b3J5fEtoYWtpfExhdmVuZGVyfExhdmVuZGVyQmx1c2h8TGF3bkdyZWVufExlbW9uQ2hpZmZvbnxMaWdodEJsdWV8TGlnaHRDb3JhbHxMaWdodEN5YW58TGlnaHRHb2xkZW5Sb2RZZWxsb3d8TGlnaHRHclthZV15fExpZ2h0R3JlZW58TGlnaHRQaW5rfExpZ2h0U2FsbW9ufExpZ2h0U2VhR3JlZW58TGlnaHRTa3lCbHVlfExpZ2h0U2xhdGVHclthZV15fExpZ2h0U3RlZWxCbHVlfExpZ2h0WWVsbG93fExpbWV8TGltZUdyZWVufExpbmVufE1hZ2VudGF8TWFyb29ufE1lZGl1bUFxdWFNYXJpbmV8TWVkaXVtQmx1ZXxNZWRpdW1PcmNoaWR8TWVkaXVtUHVycGxlfE1lZGl1bVNlYUdyZWVufE1lZGl1bVNsYXRlQmx1ZXxNZWRpdW1TcHJpbmdHcmVlbnxNZWRpdW1UdXJxdW9pc2V8TWVkaXVtVmlvbGV0UmVkfE1pZG5pZ2h0Qmx1ZXxNaW50Q3JlYW18TWlzdHlSb3NlfE1vY2Nhc2lufE5hdmFqb1doaXRlfE5hdnl8T2xkTGFjZXxPbGl2ZXxPbGl2ZURyYWJ8T3JhbmdlfE9yYW5nZVJlZHxPcmNoaWR8UGFsZUdvbGRlblJvZHxQYWxlR3JlZW58UGFsZVR1cnF1b2lzZXxQYWxlVmlvbGV0UmVkfFBhcGF5YVdoaXB8UGVhY2hQdWZmfFBlcnV8UGlua3xQbHVtfFBvd2RlckJsdWV8UHVycGxlfFJlZHxSb3N5QnJvd258Um95YWxCbHVlfFNhZGRsZUJyb3dufFNhbG1vbnxTYW5keUJyb3dufFNlYUdyZWVufFNlYVNoZWxsfFNpZW5uYXxTaWx2ZXJ8U2t5Qmx1ZXxTbGF0ZUJsdWV8U2xhdGVHclthZV15fFNub3d8U3ByaW5nR3JlZW58U3RlZWxCbHVlfFRhbnxUZWFsfFRoaXN0bGV8VG9tYXRvfFRyYW5zcGFyZW50fFR1cnF1b2lzZXxWaW9sZXR8V2hlYXR8V2hpdGV8V2hpdGVTbW9rZXxZZWxsb3d8WWVsbG93R3JlZW4pKD8hW1xcdy1dKS9pLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi9cXGIoPzpoc2x8cmdiKVxcKFxccypcXGR7MSwzfVxccyosXFxzKlxcZHsxLDN9JT9cXHMqLFxccypcXGR7MSwzfSU/XFxzKlxcKVxcQnxcXGIoPzpoc2x8cmdiKWFcXChcXHMqXFxkezEsM31cXHMqLFxccypcXGR7MSwzfSU/XFxzKixcXHMqXFxkezEsM30lP1xccyosXFxzKig/OjB8MD9cXC5cXGQrfDEpXFxzKlxcKVxcQi9pLGluc2lkZTp7dW5pdDpyLG51bWJlcjppLGZ1bmN0aW9uOi9bXFx3LV0rKD89XFwoKS8scHVuY3R1YXRpb246L1soKSxdL319XSxlbnRpdHk6L1xcXFxbXFxkYS1mXXsxLDh9L2ksdW5pdDpyLG51bWJlcjppfSl9KFByaXNtKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-css-extras.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-css.min.js":
/*!**********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-css.min.js ***!
  \**********************************************************/
/***/ (function() {

eval("!function(s){var e=/(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;s.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,inside:{rule:/^@[\\w-]+/,\"selector-function-argument\":{pattern:/(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,lookbehind:!0,alias:\"selector\"},keyword:{pattern:/(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,lookbehind:!0}}},url:{pattern:RegExp(\"\\\\burl\\\\((?:\"+e.source+\"|(?:[^\\\\\\\\\\r\\n()\\\"']|\\\\\\\\[^])*)\\\\)\",\"i\"),greedy:!0,inside:{function:/^url/i,punctuation:/^\\(|\\)$/,string:{pattern:RegExp(\"^\"+e.source+\"$\"),alias:\"url\"}}},selector:{pattern:RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\"+e.source+\")*(?=\\\\s*\\\\{)\"),lookbehind:!0},string:{pattern:e,greedy:!0},property:{pattern:/(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,lookbehind:!0},important:/!important\\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,lookbehind:!0},punctuation:/[(){};:,]/},s.languages.css.atrule.inside.rest=s.languages.css;var t=s.languages.markup;t&&(t.tag.addInlined(\"style\",\"css\"),t.tag.addAttribute(\"style\",\"css\"))}(Prism);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNzcy5taW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxvRkFBb0YsaUJBQWlCLG1DQUFtQyxzQkFBc0IsY0FBYyxRQUFRLFNBQVMsWUFBWSw4Q0FBOEMsbUlBQW1JLFVBQVUsaUVBQWlFLE1BQU0sbUdBQW1HLCtDQUErQywrQ0FBK0MsV0FBVyxzQkFBc0IsU0FBUyxZQUFZLG9CQUFvQiwyQkFBMkIsa0JBQWtCLFNBQVMsb0JBQW9CLFdBQVcsMEdBQTBHLHFDQUFxQyx3REFBd0Qsb0JBQW9CLEtBQUssb0RBQW9ELHlCQUF5Qix1RUFBdUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jc3MubWluLmpzPzdkNDYiXSwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKHMpe3ZhciBlPS8oPzpcIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCJ8Jyg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteJ1xcXFxcXHJcXG5dKSonKS87cy5sYW5ndWFnZXMuY3NzPXtjb21tZW50Oi9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxhdHJ1bGU6e3BhdHRlcm46L0BbXFx3LV0oPzpbXjt7XFxzXXxcXHMrKD8hW1xcc3tdKSkqKD86O3woPz1cXHMqXFx7KSkvLGluc2lkZTp7cnVsZTovXkBbXFx3LV0rLyxcInNlbGVjdG9yLWZ1bmN0aW9uLWFyZ3VtZW50XCI6e3BhdHRlcm46LyhcXGJzZWxlY3RvclxccypcXChcXHMqKD8hW1xccyldKSkoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKSkrKD89XFxzKlxcKSkvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJzZWxlY3RvclwifSxrZXl3b3JkOntwYXR0ZXJuOi8oXnxbXlxcdy1dKSg/OmFuZHxub3R8b25seXxvcikoPyFbXFx3LV0pLyxsb29rYmVoaW5kOiEwfX19LHVybDp7cGF0dGVybjpSZWdFeHAoXCJcXFxcYnVybFxcXFwoKD86XCIrZS5zb3VyY2UrXCJ8KD86W15cXFxcXFxcXFxcclxcbigpXFxcIiddfFxcXFxcXFxcW15dKSopXFxcXClcIixcImlcIiksZ3JlZWR5OiEwLGluc2lkZTp7ZnVuY3Rpb246L151cmwvaSxwdW5jdHVhdGlvbjovXlxcKHxcXCkkLyxzdHJpbmc6e3BhdHRlcm46UmVnRXhwKFwiXlwiK2Uuc291cmNlK1wiJFwiKSxhbGlhczpcInVybFwifX19LHNlbGVjdG9yOntwYXR0ZXJuOlJlZ0V4cChcIihefFt7fVxcXFxzXSlbXnt9XFxcXHNdKD86W157fTtcXFwiJ1xcXFxzXXxcXFxccysoPyFbXFxcXHN7XSl8XCIrZS5zb3VyY2UrXCIpKig/PVxcXFxzKlxcXFx7KVwiKSxsb29rYmVoaW5kOiEwfSxzdHJpbmc6e3BhdHRlcm46ZSxncmVlZHk6ITB9LHByb3BlcnR5OntwYXR0ZXJuOi8oXnxbXi1cXHdcXHhBMC1cXHVGRkZGXSkoPyFcXHMpWy1fYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWy1cXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKjopL2ksbG9va2JlaGluZDohMH0saW1wb3J0YW50Oi8haW1wb3J0YW50XFxiL2ksZnVuY3Rpb246e3BhdHRlcm46LyhefFteLWEtejAtOV0pWy1hLXowLTldKyg/PVxcKCkvaSxsb29rYmVoaW5kOiEwfSxwdW5jdHVhdGlvbjovWygpe307OixdL30scy5sYW5ndWFnZXMuY3NzLmF0cnVsZS5pbnNpZGUucmVzdD1zLmxhbmd1YWdlcy5jc3M7dmFyIHQ9cy5sYW5ndWFnZXMubWFya3VwO3QmJih0LnRhZy5hZGRJbmxpbmVkKFwic3R5bGVcIixcImNzc1wiKSx0LnRhZy5hZGRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwiY3NzXCIpKX0oUHJpc20pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-css.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-javascript.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-javascript.min.js ***!
  \*****************************************************************/
/***/ (function() {

eval("Prism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\\})\\s*)catch\\b/,lookbehind:!0},{pattern:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,lookbehind:!0}],function:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,number:{pattern:RegExp(\"(^|[^\\\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\\\dA-Fa-f]+(?:_[\\\\dA-Fa-f]+)*n?|\\\\d+(?:_\\\\d+)*n|(?:\\\\d+(?:_\\\\d+)*(?:\\\\.(?:\\\\d+(?:_\\\\d+)*)?)?|\\\\.\\\\d+(?:_\\\\d+)*)(?:[Ee][+-]?\\\\d+(?:_\\\\d+)*)?)(?![\\\\w$])\"),lookbehind:!0},operator:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,lookbehind:!0,greedy:!0,inside:{\"regex-source\":{pattern:/^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,lookbehind:!0,alias:\"language-regex\",inside:Prism.languages.regex},\"regex-delimiter\":/^\\/|\\/$/,\"regex-flags\":/^[a-z]+$/}},\"function-variable\":{pattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,alias:\"function\"},parameter:[{pattern:/(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:\"comment\"},\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,greedy:!0,inside:{\"template-punctuation\":{pattern:/^`|`$/,alias:\"string\"},interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^\\$\\{|\\}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}},\"string-property\":{pattern:/((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,lookbehind:!0,greedy:!0,alias:\"property\"}}),Prism.languages.insertBefore(\"javascript\",\"operator\",{\"literal-property\":{pattern:/((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,lookbehind:!0,alias:\"property\"}}),Prism.languages.markup&&(Prism.languages.markup.tag.addInlined(\"script\",\"javascript\"),Prism.languages.markup.tag.addAttribute(\"on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)\",\"javascript\")),Prism.languages.js=Prism.languages.javascript;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWphdmFzY3JpcHQubWluLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRCxtREFBbUQsZ0lBQWdJLFlBQVksaUJBQWlCLDRCQUE0QixFQUFFLGlEQUFpRCwrSkFBK0oseVJBQXlSLHVIQUF1SCwwUUFBMFEsZ0ZBQWdGLEVBQUUsb0JBQW9CLGtMQUFrTCxPQUFPLDRIQUE0SCxJQUFJLGtEQUFrRCxFQUFFLDZDQUE2QyxnQkFBZ0Isc0dBQXNHLHVEQUF1RCxzQkFBc0IseU5BQXlOLGFBQWEsOExBQThMLEVBQUUsNklBQTZJLEVBQUUsMEhBQTBILEVBQUUsbWZBQW1mLG1EQUFtRCx1Q0FBdUMsc0RBQXNELFVBQVUsMENBQTBDLG9CQUFvQiwwQkFBMEIsT0FBTyxJQUFJLE9BQU8sSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLFFBQVEsOEJBQThCLHdCQUF3QiwrQkFBK0IsZ0JBQWdCLDJCQUEyQixFQUFFLE9BQU8sT0FBTyxJQUFJLE9BQU8sSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLHdCQUF3Qiw2QkFBNkIsY0FBYyxHQUFHLHVCQUF1QixrQ0FBa0MsbUJBQW1CLG9CQUFvQixrQkFBa0IsNEdBQTRHLHdEQUF3RCxvQkFBb0Isa0JBQWtCLDBHQUEwRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWphdmFzY3JpcHQubWluLmpzP2RmZWIiXSwic291cmNlc0NvbnRlbnQiOlsiUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse1wiY2xhc3MtbmFtZVwiOltQcmlzbS5sYW5ndWFnZXMuY2xpa2VbXCJjbGFzcy1uYW1lXCJdLHtwYXR0ZXJuOi8oXnxbXiRcXHdcXHhBMC1cXHVGRkZGXSkoPyFcXHMpW18kQS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFwuKD86Y29uc3RydWN0b3J8cHJvdG90eXBlKSkvLGxvb2tiZWhpbmQ6ITB9XSxrZXl3b3JkOlt7cGF0dGVybjovKCg/Ol58XFx9KVxccyopY2F0Y2hcXGIvLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXi5dfFxcLlxcLlxcLlxccyopXFxiKD86YXN8YXNzZXJ0KD89XFxzKlxceyl8YXN5bmMoPz1cXHMqKD86ZnVuY3Rpb25cXGJ8XFwofFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGF3YWl0fGJyZWFrfGNhc2V8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHkoPz1cXHMqKD86XFx7fCQpKXxmb3J8ZnJvbSg/PVxccyooPzpbJ1wiXXwkKSl8ZnVuY3Rpb258KD86Z2V0fHNldCkoPz1cXHMqKD86WyNcXFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiLyxsb29rYmVoaW5kOiEwfV0sZnVuY3Rpb246LyM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccyooPzpcXC5cXHMqKD86YXBwbHl8YmluZHxjYWxsKVxccyopP1xcKCkvLG51bWJlcjp7cGF0dGVybjpSZWdFeHAoXCIoXnxbXlxcXFx3JF0pKD86TmFOfEluZmluaXR5fDBbYkJdWzAxXSsoPzpfWzAxXSspKm4/fDBbb09dWzAtN10rKD86X1swLTddKykqbj98MFt4WF1bXFxcXGRBLUZhLWZdKyg/Ol9bXFxcXGRBLUZhLWZdKykqbj98XFxcXGQrKD86X1xcXFxkKykqbnwoPzpcXFxcZCsoPzpfXFxcXGQrKSooPzpcXFxcLig/OlxcXFxkKyg/Ol9cXFxcZCspKik/KT98XFxcXC5cXFxcZCsoPzpfXFxcXGQrKSopKD86W0VlXVsrLV0/XFxcXGQrKD86X1xcXFxkKykqKT8pKD8hW1xcXFx3JF0pXCIpLGxvb2tiZWhpbmQ6ITB9LG9wZXJhdG9yOi8tLXxcXCtcXCt8XFwqXFwqPT98PT58JiY9P3xcXHxcXHw9P3xbIT1dPT18PDw9P3w+Pj4/PT98Wy0rKi8lJnxeIT08Pl09P3xcXC57M318XFw/XFw/PT98XFw/XFwuP3xbfjpdL30pLFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0W1wiY2xhc3MtbmFtZVwiXVswXS5wYXR0ZXJuPS8oXFxiKD86Y2xhc3N8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ldylcXHMrKVtcXHcuXFxcXF0rLyxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwia2V5d29yZFwiLHtyZWdleDp7cGF0dGVybjovKCg/Ol58W14kXFx3XFx4QTAtXFx1RkZGRi5cIidcXF0pXFxzXXxcXGIoPzpyZXR1cm58eWllbGQpKVxccyopXFwvKD86XFxbKD86W15cXF1cXFxcXFxyXFxuXXxcXFxcLikqXFxdfFxcXFwufFteL1xcXFxcXFtcXHJcXG5dKStcXC9bZGdpbXl1c117MCw3fSg/PSg/Olxcc3xcXC9cXCooPzpbXipdfFxcKig/IVxcLykpKlxcKlxcLykqKD86JHxbXFxyXFxuLC47On0pXFxdXXxcXC9cXC8pKS8sbG9va2JlaGluZDohMCxncmVlZHk6ITAsaW5zaWRlOntcInJlZ2V4LXNvdXJjZVwiOntwYXR0ZXJuOi9eKFxcLylbXFxzXFxTXSsoPz1cXC9bYS16XSokKS8sbG9va2JlaGluZDohMCxhbGlhczpcImxhbmd1YWdlLXJlZ2V4XCIsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5yZWdleH0sXCJyZWdleC1kZWxpbWl0ZXJcIjovXlxcL3xcXC8kLyxcInJlZ2V4LWZsYWdzXCI6L15bYS16XSskL319LFwiZnVuY3Rpb24tdmFyaWFibGVcIjp7cGF0dGVybjovIz8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKls9Ol1cXHMqKD86YXN5bmNcXHMqKT8oPzpcXGJmdW5jdGlvblxcYnwoPzpcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKXwoPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKVxccyo9PikpLyxhbGlhczpcImZ1bmN0aW9uXCJ9LHBhcmFtZXRlcjpbe3BhdHRlcm46LyhmdW5jdGlvbig/OlxccysoPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKT9cXHMqXFwoXFxzKikoPyFcXHMpKD86W14oKVxcc118XFxzKyg/IVtcXHMpXSl8XFwoW14oKV0qXFwpKSsoPz1cXHMqXFwpKS8sbG9va2JlaGluZDohMCxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi8oXnxbXiRcXHdcXHhBMC1cXHVGRkZGXSkoPyFcXHMpW18kYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKj0+KS9pLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovKFxcKFxccyopKD8hXFxzKSg/OlteKClcXHNdfFxccysoPyFbXFxzKV0pfFxcKFteKCldKlxcKSkrKD89XFxzKlxcKVxccyo9PikvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovKCg/OlxcYnxcXHN8XikoPyEoPzphc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZCkoPyFbJFxcd1xceEEwLVxcdUZGRkZdKSkoPzooPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqXFxzKilcXChcXHMqfFxcXVxccypcXChcXHMqKSg/IVxccykoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXChbXigpXSpcXCkpKyg/PVxccypcXClcXHMqXFx7KS8sbG9va2JlaGluZDohMCxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHR9XSxjb25zdGFudDovXFxiW0EtWl0oPzpbQS1aX118XFxkeD8pKlxcYi99KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwic3RyaW5nXCIse2hhc2hiYW5nOntwYXR0ZXJuOi9eIyEuKi8sZ3JlZWR5OiEwLGFsaWFzOlwiY29tbWVudFwifSxcInRlbXBsYXRlLXN0cmluZ1wiOntwYXR0ZXJuOi9gKD86XFxcXFtcXHNcXFNdfFxcJFxceyg/Oltee31dfFxceyg/Oltee31dfFxce1tefV0qXFx9KSpcXH0pK1xcfXwoPyFcXCRcXHspW15cXFxcYF0pKmAvLGdyZWVkeTohMCxpbnNpZGU6e1widGVtcGxhdGUtcHVuY3R1YXRpb25cIjp7cGF0dGVybjovXmB8YCQvLGFsaWFzOlwic3RyaW5nXCJ9LGludGVycG9sYXRpb246e3BhdHRlcm46LygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVxcJFxceyg/Oltee31dfFxceyg/Oltee31dfFxce1tefV0qXFx9KSpcXH0pK1xcfS8sbG9va2JlaGluZDohMCxpbnNpZGU6e1wiaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvblwiOntwYXR0ZXJuOi9eXFwkXFx7fFxcfSQvLGFsaWFzOlwicHVuY3R1YXRpb25cIn0scmVzdDpQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdH19LHN0cmluZzovW1xcc1xcU10rL319LFwic3RyaW5nLXByb3BlcnR5XCI6e3BhdHRlcm46LygoPzpefFsse10pWyBcXHRdKikoW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwyKVteXFxcXFxcclxcbl0pKlxcMig/PVxccyo6KS9tLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwLGFsaWFzOlwicHJvcGVydHlcIn19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwib3BlcmF0b3JcIix7XCJsaXRlcmFsLXByb3BlcnR5XCI6e3BhdHRlcm46LygoPzpefFsse10pWyBcXHRdKikoPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKjopL20sbG9va2JlaGluZDohMCxhbGlhczpcInByb3BlcnR5XCJ9fSksUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCYmKFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmFkZElubGluZWQoXCJzY3JpcHRcIixcImphdmFzY3JpcHRcIiksUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuYWRkQXR0cmlidXRlKFwib24oPzphYm9ydHxibHVyfGNoYW5nZXxjbGlja3xjb21wb3NpdGlvbig/OmVuZHxzdGFydHx1cGRhdGUpfGRibGNsaWNrfGVycm9yfGZvY3VzKD86aW58b3V0KT98a2V5KD86ZG93bnx1cCl8bG9hZHxtb3VzZSg/OmRvd258ZW50ZXJ8bGVhdmV8bW92ZXxvdXR8b3Zlcnx1cCl8cmVzZXR8cmVzaXplfHNjcm9sbHxzZWxlY3R8c2xvdGNoYW5nZXxzdWJtaXR8dW5sb2FkfHdoZWVsKVwiLFwiamF2YXNjcmlwdFwiKSksUHJpc20ubGFuZ3VhZ2VzLmpzPVByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-javascript.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-js-extras.min.js":
/*!****************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-js-extras.min.js ***!
  \****************************************************************/
/***/ (function() {

eval("!function(a){function e(a,e){return RegExp(a.replace(/<ID>/g,function(){return\"(?!\\\\s)[_$a-zA-Z\\\\xA0-\\\\uFFFF](?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF])*\"}),e)}a.languages.insertBefore(\"javascript\",\"function-variable\",{\"method-variable\":{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript[\"function-variable\"].pattern.source),lookbehind:!0,alias:[\"function-variable\",\"method\",\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"function\",{method:{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript.function.source),lookbehind:!0,alias:[\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"constant\",{\"known-class-name\":[{pattern:/\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,alias:\"class-name\"},{pattern:/\\b(?:[A-Z]\\w*)Error\\b/,alias:\"class-name\"}]}),a.languages.insertBefore(\"javascript\",\"keyword\",{imports:{pattern:e(\"(\\\\bimport\\\\b\\\\s*)(?:<ID>(?:\\\\s*,\\\\s*(?:\\\\*\\\\s*as\\\\s+<ID>|\\\\{[^{}]*\\\\}))?|\\\\*\\\\s*as\\\\s+<ID>|\\\\{[^{}]*\\\\})(?=\\\\s*\\\\bfrom\\\\b)\"),lookbehind:!0,inside:a.languages.javascript},exports:{pattern:e(\"(\\\\bexport\\\\b\\\\s*)(?:\\\\*(?:\\\\s*as\\\\s+<ID>)?(?=\\\\s*\\\\bfrom\\\\b)|\\\\{[^{}]*\\\\})\"),lookbehind:!0,inside:a.languages.javascript}}),a.languages.javascript.keyword.unshift({pattern:/\\b(?:as|default|export|from|import)\\b/,alias:\"module\"},{pattern:/\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,alias:\"control-flow\"},{pattern:/\\bnull\\b/,alias:[\"null\",\"nil\"]},{pattern:/\\bundefined\\b/,alias:\"nil\"}),a.languages.insertBefore(\"javascript\",\"operator\",{spread:{pattern:/\\.{3}/,alias:\"operator\"},arrow:{pattern:/=>/,alias:\"operator\"}}),a.languages.insertBefore(\"javascript\",\"punctuation\",{\"property-access\":{pattern:e(\"(\\\\.\\\\s*)#?<ID>\"),lookbehind:!0},\"maybe-class-name\":{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,lookbehind:!0},dom:{pattern:/\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,alias:\"variable\"},console:{pattern:/\\bconsole(?=\\s*\\.)/,alias:\"class-name\"}});for(var t=[\"function\",\"function-variable\",\"method\",\"method-variable\",\"property-access\"],r=0;r<t.length;r++){var n=t[r],s=a.languages.javascript[n];\"RegExp\"===a.util.type(s)&&(s=a.languages.javascript[n]={pattern:s});var o=s.inside||{};(s.inside=o)[\"maybe-class-name\"]=/^[A-Z][\\s\\S]*/}}(Prism);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzLWV4dHJhcy5taW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxnQkFBZ0IsMkNBQTJDLHNFQUFzRSxLQUFLLDJEQUEyRCxtQkFBbUIsd0tBQXdLLG9EQUFvRCxRQUFRLHVIQUF1SCxvREFBb0QscUJBQXFCLG9RQUFvUSxFQUFFLG1EQUFtRCxFQUFFLG1EQUFtRCxTQUFTLHdFQUF3RSxJQUFJLEtBQUsseUJBQXlCLElBQUksS0FBSyxrRUFBa0UsVUFBVSw0RUFBNEUsSUFBSSxLQUFLLGlEQUFpRCwwQ0FBMEMsK0RBQStELEVBQUUsNkhBQTZILEVBQUUsd0NBQXdDLEVBQUUsb0NBQW9DLG9EQUFvRCxRQUFRLFlBQVksRUFBRSxtQkFBbUIsUUFBUSwrQkFBK0IsdURBQXVELG1CQUFtQiwyQ0FBMkMscUJBQXFCLG9FQUFvRSxNQUFNLDJHQUEyRyxVQUFVLGlEQUFpRCxFQUFFLDRGQUE0RixXQUFXLEtBQUssdUNBQXVDLHlEQUF5RCxVQUFVLEVBQUUsbUJBQW1CLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzLWV4dHJhcy5taW4uanM/ZWIzYSJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oYSl7ZnVuY3Rpb24gZShhLGUpe3JldHVybiBSZWdFeHAoYS5yZXBsYWNlKC88SUQ+L2csZnVuY3Rpb24oKXtyZXR1cm5cIig/IVxcXFxzKVtfJGEtekEtWlxcXFx4QTAtXFxcXHVGRkZGXSg/Oig/IVxcXFxzKVskXFxcXHdcXFxceEEwLVxcXFx1RkZGRl0pKlwifSksZSl9YS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwiZnVuY3Rpb24tdmFyaWFibGVcIix7XCJtZXRob2QtdmFyaWFibGVcIjp7cGF0dGVybjpSZWdFeHAoXCIoXFxcXC5cXFxccyopXCIrYS5sYW5ndWFnZXMuamF2YXNjcmlwdFtcImZ1bmN0aW9uLXZhcmlhYmxlXCJdLnBhdHRlcm4uc291cmNlKSxsb29rYmVoaW5kOiEwLGFsaWFzOltcImZ1bmN0aW9uLXZhcmlhYmxlXCIsXCJtZXRob2RcIixcImZ1bmN0aW9uXCIsXCJwcm9wZXJ0eS1hY2Nlc3NcIl19fSksYS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwiZnVuY3Rpb25cIix7bWV0aG9kOntwYXR0ZXJuOlJlZ0V4cChcIihcXFxcLlxcXFxzKilcIithLmxhbmd1YWdlcy5qYXZhc2NyaXB0LmZ1bmN0aW9uLnNvdXJjZSksbG9va2JlaGluZDohMCxhbGlhczpbXCJmdW5jdGlvblwiLFwicHJvcGVydHktYWNjZXNzXCJdfX0pLGEubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImphdmFzY3JpcHRcIixcImNvbnN0YW50XCIse1wia25vd24tY2xhc3MtbmFtZVwiOlt7cGF0dGVybjovXFxiKD86KD86RmxvYXQoPzozMnw2NCl8KD86SW50fFVpbnQpKD86OHwxNnwzMil8VWludDhDbGFtcGVkKT9BcnJheXxBcnJheUJ1ZmZlcnxCaWdJbnR8Qm9vbGVhbnxEYXRhVmlld3xEYXRlfEVycm9yfEZ1bmN0aW9ufEludGx8SlNPTnwoPzpXZWFrKT8oPzpNYXB8U2V0KXxNYXRofE51bWJlcnxPYmplY3R8UHJvbWlzZXxQcm94eXxSZWZsZWN0fFJlZ0V4cHxTdHJpbmd8U3ltYm9sfFdlYkFzc2VtYmx5KVxcYi8sYWxpYXM6XCJjbGFzcy1uYW1lXCJ9LHtwYXR0ZXJuOi9cXGIoPzpbQS1aXVxcdyopRXJyb3JcXGIvLGFsaWFzOlwiY2xhc3MtbmFtZVwifV19KSxhLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqYXZhc2NyaXB0XCIsXCJrZXl3b3JkXCIse2ltcG9ydHM6e3BhdHRlcm46ZShcIihcXFxcYmltcG9ydFxcXFxiXFxcXHMqKSg/OjxJRD4oPzpcXFxccyosXFxcXHMqKD86XFxcXCpcXFxccyphc1xcXFxzKzxJRD58XFxcXHtbXnt9XSpcXFxcfSkpP3xcXFxcKlxcXFxzKmFzXFxcXHMrPElEPnxcXFxce1tee31dKlxcXFx9KSg/PVxcXFxzKlxcXFxiZnJvbVxcXFxiKVwiKSxsb29rYmVoaW5kOiEwLGluc2lkZTphLmxhbmd1YWdlcy5qYXZhc2NyaXB0fSxleHBvcnRzOntwYXR0ZXJuOmUoXCIoXFxcXGJleHBvcnRcXFxcYlxcXFxzKikoPzpcXFxcKig/OlxcXFxzKmFzXFxcXHMrPElEPik/KD89XFxcXHMqXFxcXGJmcm9tXFxcXGIpfFxcXFx7W157fV0qXFxcXH0pXCIpLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOmEubGFuZ3VhZ2VzLmphdmFzY3JpcHR9fSksYS5sYW5ndWFnZXMuamF2YXNjcmlwdC5rZXl3b3JkLnVuc2hpZnQoe3BhdHRlcm46L1xcYig/OmFzfGRlZmF1bHR8ZXhwb3J0fGZyb218aW1wb3J0KVxcYi8sYWxpYXM6XCJtb2R1bGVcIn0se3BhdHRlcm46L1xcYig/OmF3YWl0fGJyZWFrfGNhdGNofGNvbnRpbnVlfGRvfGVsc2V8ZmluYWxseXxmb3J8aWZ8cmV0dXJufHN3aXRjaHx0aHJvd3x0cnl8d2hpbGV8eWllbGQpXFxiLyxhbGlhczpcImNvbnRyb2wtZmxvd1wifSx7cGF0dGVybjovXFxibnVsbFxcYi8sYWxpYXM6W1wibnVsbFwiLFwibmlsXCJdfSx7cGF0dGVybjovXFxidW5kZWZpbmVkXFxiLyxhbGlhczpcIm5pbFwifSksYS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwib3BlcmF0b3JcIix7c3ByZWFkOntwYXR0ZXJuOi9cXC57M30vLGFsaWFzOlwib3BlcmF0b3JcIn0sYXJyb3c6e3BhdHRlcm46Lz0+LyxhbGlhczpcIm9wZXJhdG9yXCJ9fSksYS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwicHVuY3R1YXRpb25cIix7XCJwcm9wZXJ0eS1hY2Nlc3NcIjp7cGF0dGVybjplKFwiKFxcXFwuXFxcXHMqKSM/PElEPlwiKSxsb29rYmVoaW5kOiEwfSxcIm1heWJlLWNsYXNzLW5hbWVcIjp7cGF0dGVybjovKF58W14kXFx3XFx4QTAtXFx1RkZGRl0pW0EtWl1bJFxcd1xceEEwLVxcdUZGRkZdKy8sbG9va2JlaGluZDohMH0sZG9tOntwYXR0ZXJuOi9cXGIoPzpkb2N1bWVudHwoPzpsb2NhbHxzZXNzaW9uKVN0b3JhZ2V8bG9jYXRpb258bmF2aWdhdG9yfHBlcmZvcm1hbmNlfHdpbmRvdylcXGIvLGFsaWFzOlwidmFyaWFibGVcIn0sY29uc29sZTp7cGF0dGVybjovXFxiY29uc29sZSg/PVxccypcXC4pLyxhbGlhczpcImNsYXNzLW5hbWVcIn19KTtmb3IodmFyIHQ9W1wiZnVuY3Rpb25cIixcImZ1bmN0aW9uLXZhcmlhYmxlXCIsXCJtZXRob2RcIixcIm1ldGhvZC12YXJpYWJsZVwiLFwicHJvcGVydHktYWNjZXNzXCJdLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXSxzPWEubGFuZ3VhZ2VzLmphdmFzY3JpcHRbbl07XCJSZWdFeHBcIj09PWEudXRpbC50eXBlKHMpJiYocz1hLmxhbmd1YWdlcy5qYXZhc2NyaXB0W25dPXtwYXR0ZXJuOnN9KTt2YXIgbz1zLmluc2lkZXx8e307KHMuaW5zaWRlPW8pW1wibWF5YmUtY2xhc3MtbmFtZVwiXT0vXltBLVpdW1xcc1xcU10qL319KFByaXNtKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-js-extras.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-json.min.js":
/*!***********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-json.min.js ***!
  \***********************************************************/
/***/ (function() {

eval("Prism.languages.json={property:{pattern:/(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,greedy:!0},number:/-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,punctuation:/[{}[\\],]/,operator:/:/,boolean:/\\b(?:false|true)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"}},Prism.languages.webmanifest=Prism.languages.json;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzb24ubWluLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixVQUFVLHlFQUF5RSxTQUFTLHlFQUF5RSxVQUFVLGtEQUFrRCw2REFBNkQsdURBQXVELG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzb24ubWluLmpzPzg0ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiUHJpc20ubGFuZ3VhZ2VzLmpzb249e3Byb3BlcnR5OntwYXR0ZXJuOi8oXnxbXlxcXFxdKVwiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIig/PVxccyo6KS8sbG9va2JlaGluZDohMCxncmVlZHk6ITB9LHN0cmluZzp7cGF0dGVybjovKF58W15cXFxcXSlcIig/OlxcXFwufFteXFxcXFwiXFxyXFxuXSkqXCIoPyFcXHMqOikvLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwfSxjb21tZW50OntwYXR0ZXJuOi9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxncmVlZHk6ITB9LG51bWJlcjovLT9cXGJcXGQrKD86XFwuXFxkKyk/KD86ZVsrLV0/XFxkKyk/XFxiL2kscHVuY3R1YXRpb246L1t7fVtcXF0sXS8sb3BlcmF0b3I6LzovLGJvb2xlYW46L1xcYig/OmZhbHNlfHRydWUpXFxiLyxudWxsOntwYXR0ZXJuOi9cXGJudWxsXFxiLyxhbGlhczpcImtleXdvcmRcIn19LFByaXNtLmxhbmd1YWdlcy53ZWJtYW5pZmVzdD1QcmlzbS5sYW5ndWFnZXMuanNvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-json.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-jsx.min.js":
/*!**********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-jsx.min.js ***!
  \**********************************************************/
/***/ (function() {

eval("!function(o){var t=o.util.clone(o.languages.javascript),e=\"(?:\\\\{<S>*\\\\.{3}(?:[^{}]|<BRACES>)*\\\\})\";function n(t,n){return t=t.replace(/<S>/g,function(){return\"(?:\\\\s|//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))\\\\*/)\"}).replace(/<BRACES>/g,function(){return\"(?:\\\\{(?:\\\\{(?:\\\\{[^{}]*\\\\}|[^{}])*\\\\}|[^{}])*\\\\})\"}).replace(/<SPREAD>/g,function(){return e}),RegExp(t,n)}e=n(e).source,o.languages.jsx=o.languages.extend(\"markup\",t),o.languages.jsx.tag.pattern=n(\"</?(?:[\\\\w.:-]+(?:<S>+(?:[\\\\w.:$-]+(?:=(?:\\\"(?:\\\\\\\\[^]|[^\\\\\\\\\\\"])*\\\"|'(?:\\\\\\\\[^]|[^\\\\\\\\'])*'|[^\\\\s{'\\\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>\"),o.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/,o.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/,o.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,o.languages.jsx.tag.inside.comment=t.comment,o.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:n(\"<SPREAD>\"),inside:o.languages.jsx}},o.languages.jsx.tag),o.languages.insertBefore(\"inside\",\"special-attr\",{script:{pattern:n(\"=<BRACES>\"),alias:\"language-javascript\",inside:{\"script-punctuation\":{pattern:/^=(?=\\{)/,alias:\"punctuation\"},rest:o.languages.jsx}}},o.languages.jsx.tag);var i=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(i).join(\"\"):\"\"},r=function(t){for(var n=[],e=0;e<t.length;e++){var a=t[e],s=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<n.length&&n[n.length-1].tagName===i(a.content[0].content[1])&&n.pop():\"/>\"===a.content[a.content.length-1].content||n.push({tagName:i(a.content[0].content[1]),openedBraces:0}):0<n.length&&\"punctuation\"===a.type&&\"{\"===a.content?n[n.length-1].openedBraces++:0<n.length&&0<n[n.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?n[n.length-1].openedBraces--:s=!0),(s||\"string\"==typeof a)&&0<n.length&&0===n[n.length-1].openedBraces){var g=i(a);e<t.length-1&&(\"string\"==typeof t[e+1]||\"plain-text\"===t[e+1].type)&&(g+=i(t[e+1]),t.splice(e+1,1)),0<e&&(\"string\"==typeof t[e-1]||\"plain-text\"===t[e-1].type)&&(g=i(t[e-1])+g,t.splice(e-1,1),e--),t[e]=new o.Token(\"plain-text\",g,null,g)}a.content&&\"string\"!=typeof a.content&&r(a.content)}};o.hooks.add(\"after-tokenize\",function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||r(t.tokens)})}(Prism);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzeC5taW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxvREFBb0QsUUFBUSxFQUFFLE9BQU8sZUFBZSxHQUFHLGdCQUFnQixxQ0FBcUMsb0RBQW9ELGlDQUFpQyxhQUFhLE1BQU0sTUFBTSxJQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxHQUFHLGlDQUFpQyxTQUFTLGNBQWMsK0xBQStMLDRKQUE0SiwwT0FBME8sUUFBUSw4Q0FBOEMsd0VBQXdFLFFBQVEsMkRBQTJELHNCQUFzQixnQkFBZ0IsdUJBQXVCLHdCQUF3QixzQkFBc0Isa0JBQWtCLGdHQUFnRyxlQUFlLGlCQUFpQixXQUFXLEtBQUssZ0JBQWdCLHFQQUFxUCxrREFBa0Qsd0NBQXdDLCtHQUErRyxzSEFBc0gsV0FBVyw0T0FBNE8sc0RBQXNELHlDQUF5QyxvREFBb0QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzeC5taW4uanM/MjQ2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24obyl7dmFyIHQ9by51dGlsLmNsb25lKG8ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpLGU9XCIoPzpcXFxcezxTPipcXFxcLnszfSg/Oltee31dfDxCUkFDRVM+KSpcXFxcfSlcIjtmdW5jdGlvbiBuKHQsbil7cmV0dXJuIHQ9dC5yZXBsYWNlKC88Uz4vZyxmdW5jdGlvbigpe3JldHVyblwiKD86XFxcXHN8Ly8uKig/IS4pfC9cXFxcKig/OlteKl18XFxcXCooPyEvKSlcXFxcKi8pXCJ9KS5yZXBsYWNlKC88QlJBQ0VTPi9nLGZ1bmN0aW9uKCl7cmV0dXJuXCIoPzpcXFxceyg/OlxcXFx7KD86XFxcXHtbXnt9XSpcXFxcfXxbXnt9XSkqXFxcXH18W157fV0pKlxcXFx9KVwifSkucmVwbGFjZSgvPFNQUkVBRD4vZyxmdW5jdGlvbigpe3JldHVybiBlfSksUmVnRXhwKHQsbil9ZT1uKGUpLnNvdXJjZSxvLmxhbmd1YWdlcy5qc3g9by5sYW5ndWFnZXMuZXh0ZW5kKFwibWFya3VwXCIsdCksby5sYW5ndWFnZXMuanN4LnRhZy5wYXR0ZXJuPW4oXCI8Lz8oPzpbXFxcXHcuOi1dKyg/OjxTPisoPzpbXFxcXHcuOiQtXSsoPzo9KD86XFxcIig/OlxcXFxcXFxcW15dfFteXFxcXFxcXFxcXFwiXSkqXFxcInwnKD86XFxcXFxcXFxbXl18W15cXFxcXFxcXCddKSonfFteXFxcXHN7J1xcXCIvPj1dK3w8QlJBQ0VTPikpP3w8U1BSRUFEPikpKjxTPiovPyk/PlwiKSxvLmxhbmd1YWdlcy5qc3gudGFnLmluc2lkZS50YWcucGF0dGVybj0vXjxcXC8/W15cXHM+XFwvXSovLG8ubGFuZ3VhZ2VzLmpzeC50YWcuaW5zaWRlW1wiYXR0ci12YWx1ZVwiXS5wYXR0ZXJuPS89KD8hXFx7KSg/OlwiKD86XFxcXFtcXHNcXFNdfFteXFxcXFwiXSkqXCJ8Jyg/OlxcXFxbXFxzXFxTXXxbXlxcXFwnXSkqJ3xbXlxccydcIj5dKykvLG8ubGFuZ3VhZ2VzLmpzeC50YWcuaW5zaWRlLnRhZy5pbnNpZGVbXCJjbGFzcy1uYW1lXCJdPS9eW0EtWl1cXHcqKD86XFwuW0EtWl1cXHcqKSokLyxvLmxhbmd1YWdlcy5qc3gudGFnLmluc2lkZS5jb21tZW50PXQuY29tbWVudCxvLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJpbnNpZGVcIixcImF0dHItbmFtZVwiLHtzcHJlYWQ6e3BhdHRlcm46bihcIjxTUFJFQUQ+XCIpLGluc2lkZTpvLmxhbmd1YWdlcy5qc3h9fSxvLmxhbmd1YWdlcy5qc3gudGFnKSxvLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJpbnNpZGVcIixcInNwZWNpYWwtYXR0clwiLHtzY3JpcHQ6e3BhdHRlcm46bihcIj08QlJBQ0VTPlwiKSxhbGlhczpcImxhbmd1YWdlLWphdmFzY3JpcHRcIixpbnNpZGU6e1wic2NyaXB0LXB1bmN0dWF0aW9uXCI6e3BhdHRlcm46L149KD89XFx7KS8sYWxpYXM6XCJwdW5jdHVhdGlvblwifSxyZXN0Om8ubGFuZ3VhZ2VzLmpzeH19fSxvLmxhbmd1YWdlcy5qc3gudGFnKTt2YXIgaT1mdW5jdGlvbih0KXtyZXR1cm4gdD9cInN0cmluZ1wiPT10eXBlb2YgdD90Olwic3RyaW5nXCI9PXR5cGVvZiB0LmNvbnRlbnQ/dC5jb250ZW50OnQuY29udGVudC5tYXAoaSkuam9pbihcIlwiKTpcIlwifSxyPWZ1bmN0aW9uKHQpe2Zvcih2YXIgbj1bXSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBhPXRbZV0scz0hMTtpZihcInN0cmluZ1wiIT10eXBlb2YgYSYmKFwidGFnXCI9PT1hLnR5cGUmJmEuY29udGVudFswXSYmXCJ0YWdcIj09PWEuY29udGVudFswXS50eXBlP1wiPC9cIj09PWEuY29udGVudFswXS5jb250ZW50WzBdLmNvbnRlbnQ/MDxuLmxlbmd0aCYmbltuLmxlbmd0aC0xXS50YWdOYW1lPT09aShhLmNvbnRlbnRbMF0uY29udGVudFsxXSkmJm4ucG9wKCk6XCIvPlwiPT09YS5jb250ZW50W2EuY29udGVudC5sZW5ndGgtMV0uY29udGVudHx8bi5wdXNoKHt0YWdOYW1lOmkoYS5jb250ZW50WzBdLmNvbnRlbnRbMV0pLG9wZW5lZEJyYWNlczowfSk6MDxuLmxlbmd0aCYmXCJwdW5jdHVhdGlvblwiPT09YS50eXBlJiZcIntcIj09PWEuY29udGVudD9uW24ubGVuZ3RoLTFdLm9wZW5lZEJyYWNlcysrOjA8bi5sZW5ndGgmJjA8bltuLmxlbmd0aC0xXS5vcGVuZWRCcmFjZXMmJlwicHVuY3R1YXRpb25cIj09PWEudHlwZSYmXCJ9XCI9PT1hLmNvbnRlbnQ/bltuLmxlbmd0aC0xXS5vcGVuZWRCcmFjZXMtLTpzPSEwKSwoc3x8XCJzdHJpbmdcIj09dHlwZW9mIGEpJiYwPG4ubGVuZ3RoJiYwPT09bltuLmxlbmd0aC0xXS5vcGVuZWRCcmFjZXMpe3ZhciBnPWkoYSk7ZTx0Lmxlbmd0aC0xJiYoXCJzdHJpbmdcIj09dHlwZW9mIHRbZSsxXXx8XCJwbGFpbi10ZXh0XCI9PT10W2UrMV0udHlwZSkmJihnKz1pKHRbZSsxXSksdC5zcGxpY2UoZSsxLDEpKSwwPGUmJihcInN0cmluZ1wiPT10eXBlb2YgdFtlLTFdfHxcInBsYWluLXRleHRcIj09PXRbZS0xXS50eXBlKSYmKGc9aSh0W2UtMV0pK2csdC5zcGxpY2UoZS0xLDEpLGUtLSksdFtlXT1uZXcgby5Ub2tlbihcInBsYWluLXRleHRcIixnLG51bGwsZyl9YS5jb250ZW50JiZcInN0cmluZ1wiIT10eXBlb2YgYS5jb250ZW50JiZyKGEuY29udGVudCl9fTtvLmhvb2tzLmFkZChcImFmdGVyLXRva2VuaXplXCIsZnVuY3Rpb24odCl7XCJqc3hcIiE9PXQubGFuZ3VhZ2UmJlwidHN4XCIhPT10Lmxhbmd1YWdlfHxyKHQudG9rZW5zKX0pfShQcmlzbSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-jsx.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-tsx.min.js":
/*!**********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-tsx.min.js ***!
  \**********************************************************/
/***/ (function() {

eval("!function(e){var a=e.util.clone(e.languages.typescript);e.languages.tsx=e.languages.extend(\"jsx\",a),delete e.languages.tsx.parameter,delete e.languages.tsx[\"literal-property\"];var t=e.languages.tsx.tag;t.pattern=RegExp(\"(^|[^\\\\w$]|(?=</))(?:\"+t.pattern.source+\")\",t.pattern.flags),t.lookbehind=!0}(Prism);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXRzeC5taW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSwyQ0FBMkMsd0hBQXdILDBCQUEwQiwrRkFBK0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS10c3gubWluLmpzPzdmYjAiXSwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGUpe3ZhciBhPWUudXRpbC5jbG9uZShlLmxhbmd1YWdlcy50eXBlc2NyaXB0KTtlLmxhbmd1YWdlcy50c3g9ZS5sYW5ndWFnZXMuZXh0ZW5kKFwianN4XCIsYSksZGVsZXRlIGUubGFuZ3VhZ2VzLnRzeC5wYXJhbWV0ZXIsZGVsZXRlIGUubGFuZ3VhZ2VzLnRzeFtcImxpdGVyYWwtcHJvcGVydHlcIl07dmFyIHQ9ZS5sYW5ndWFnZXMudHN4LnRhZzt0LnBhdHRlcm49UmVnRXhwKFwiKF58W15cXFxcdyRdfCg/PTwvKSkoPzpcIit0LnBhdHRlcm4uc291cmNlK1wiKVwiLHQucGF0dGVybi5mbGFncyksdC5sb29rYmVoaW5kPSEwfShQcmlzbSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-tsx.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/components/prism-typescript.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-typescript.min.js ***!
  \*****************************************************************/
/***/ (function() {

eval("!function(e){e.languages.typescript=e.languages.extend(\"javascript\",{\"class-name\":{pattern:/(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/}),e.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,/\\btype\\b(?=\\s*(?:[\\{*]|$))/),delete e.languages.typescript.parameter,delete e.languages.typescript[\"literal-property\"];var s=e.languages.extend(\"typescript\",{});delete s[\"class-name\"],e.languages.typescript[\"class-name\"].inside=s,e.languages.insertBefore(\"typescript\",\"function\",{decorator:{pattern:/@[$\\w\\xA0-\\uFFFF]+/,inside:{at:{pattern:/^@/,alias:\"operator\"},function:/^[\\s\\S]+/}},\"generic-function\":{pattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,greedy:!0,inside:{function:/^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,generic:{pattern:/<[\\s\\S]+/,alias:\"class-name\",inside:s}}}}),e.languages.ts=e.languages.typescript}(Prism);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXR5cGVzY3JpcHQubWluLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsd0RBQXdELGNBQWMsMk5BQTJOLGlHQUFpRyw0SkFBNEosK0NBQStDLG1HQUFtRyx3Q0FBd0MsRUFBRSx1SEFBdUgsV0FBVyxxQ0FBcUMsSUFBSSw4QkFBOEIsc0JBQXNCLHFCQUFxQixtSUFBbUksOEVBQThFLGtEQUFrRCx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS10eXBlc2NyaXB0Lm1pbi5qcz8wMDVkIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlKXtlLmxhbmd1YWdlcy50eXBlc2NyaXB0PWUubGFuZ3VhZ2VzLmV4dGVuZChcImphdmFzY3JpcHRcIix7XCJjbGFzcy1uYW1lXCI6e3BhdHRlcm46LyhcXGIoPzpjbGFzc3xleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxpbnRlcmZhY2V8bmV3fHR5cGUpXFxzKykoPyFrZXlvZlxcYikoPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD86XFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj4pPy8sbG9va2JlaGluZDohMCxncmVlZHk6ITAsaW5zaWRlOm51bGx9LGJ1aWx0aW46L1xcYig/OkFycmF5fEZ1bmN0aW9ufFByb21pc2V8YW55fGJvb2xlYW58Y29uc29sZXxuZXZlcnxudW1iZXJ8c3RyaW5nfHN5bWJvbHx1bmtub3duKVxcYi99KSxlLmxhbmd1YWdlcy50eXBlc2NyaXB0LmtleXdvcmQucHVzaCgvXFxiKD86YWJzdHJhY3R8ZGVjbGFyZXxpc3xrZXlvZnxyZWFkb25seXxyZXF1aXJlKVxcYi8sL1xcYig/OmFzc2VydHN8aW5mZXJ8aW50ZXJmYWNlfG1vZHVsZXxuYW1lc3BhY2V8dHlwZSlcXGIoPz1cXHMqKD86W3tfJGEtekEtWlxceEEwLVxcdUZGRkZdfCQpKS8sL1xcYnR5cGVcXGIoPz1cXHMqKD86W1xceypdfCQpKS8pLGRlbGV0ZSBlLmxhbmd1YWdlcy50eXBlc2NyaXB0LnBhcmFtZXRlcixkZWxldGUgZS5sYW5ndWFnZXMudHlwZXNjcmlwdFtcImxpdGVyYWwtcHJvcGVydHlcIl07dmFyIHM9ZS5sYW5ndWFnZXMuZXh0ZW5kKFwidHlwZXNjcmlwdFwiLHt9KTtkZWxldGUgc1tcImNsYXNzLW5hbWVcIl0sZS5sYW5ndWFnZXMudHlwZXNjcmlwdFtcImNsYXNzLW5hbWVcIl0uaW5zaWRlPXMsZS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwidHlwZXNjcmlwdFwiLFwiZnVuY3Rpb25cIix7ZGVjb3JhdG9yOntwYXR0ZXJuOi9AWyRcXHdcXHhBMC1cXHVGRkZGXSsvLGluc2lkZTp7YXQ6e3BhdHRlcm46L15ALyxhbGlhczpcIm9wZXJhdG9yXCJ9LGZ1bmN0aW9uOi9eW1xcc1xcU10rL319LFwiZ2VuZXJpYy1mdW5jdGlvblwiOntwYXR0ZXJuOi8jPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSpcXHMqPCg/OltePD5dfDwoPzpbXjw+XXw8W148Pl0qPikqPikqPig/PVxccypcXCgpLyxncmVlZHk6ITAsaW5zaWRlOntmdW5jdGlvbjovXiM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKi8sZ2VuZXJpYzp7cGF0dGVybjovPFtcXHNcXFNdKy8sYWxpYXM6XCJjbGFzcy1uYW1lXCIsaW5zaWRlOnN9fX19KSxlLmxhbmd1YWdlcy50cz1lLmxhbmd1YWdlcy50eXBlc2NyaXB0fShQcmlzbSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prismjs/components/prism-typescript.min.js\n");

/***/ }),

/***/ "./node_modules/prismjs/prism.js":
/*!***************************************!*\
  !*** ./node_modules/prismjs/prism.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif ( true && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof __webpack_require__.g !== 'undefined') {\n\t__webpack_require__.g.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading…';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prismjs/prism.js\n");

/***/ }),

/***/ "./node_modules/react-notion-x/build/third-party/code.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-notion-x/build/third-party/code.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Code\": function() { return /* binding */ Code; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prismjs */ \"./node_modules/prismjs/prism.js\");\n/* harmony import */ var notion_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! notion-utils */ \"./node_modules/notion-utils/build/index.js\");\n/* harmony import */ var react_fast_compare__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-fast-compare */ \"./node_modules/react-fast-compare/index.js\");\n/* harmony import */ var react_lazy_images__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-lazy-images */ \"./node_modules/react-notion-x/node_modules/react-lazy-images/dist/react-lazy-images.es.js\");\n/* harmony import */ var react_image__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-image */ \"./node_modules/react-image/umd/index.js\");\n/* harmony import */ var react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-hotkeys-hook */ \"./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js\");\n/* harmony import */ var prismjs_components_prism_clike_min_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prismjs/components/prism-clike.min.js */ \"./node_modules/prismjs/components/prism-clike.min.js\");\n/* harmony import */ var prismjs_components_prism_javascript_min_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prismjs/components/prism-javascript.min.js */ \"./node_modules/prismjs/components/prism-javascript.min.js\");\n/* harmony import */ var prismjs_components_prism_js_extras_min_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! prismjs/components/prism-js-extras.min.js */ \"./node_modules/prismjs/components/prism-js-extras.min.js\");\n/* harmony import */ var prismjs_components_prism_typescript_min_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! prismjs/components/prism-typescript.min.js */ \"./node_modules/prismjs/components/prism-typescript.min.js\");\n/* harmony import */ var prismjs_components_prism_jsx_min_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! prismjs/components/prism-jsx.min.js */ \"./node_modules/prismjs/components/prism-jsx.min.js\");\n/* harmony import */ var prismjs_components_prism_tsx_min_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! prismjs/components/prism-tsx.min.js */ \"./node_modules/prismjs/components/prism-tsx.min.js\");\n/* harmony import */ var prismjs_components_prism_json_min_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! prismjs/components/prism-json.min.js */ \"./node_modules/prismjs/components/prism-json.min.js\");\n/* harmony import */ var prismjs_components_prism_css_min_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! prismjs/components/prism-css.min.js */ \"./node_modules/prismjs/components/prism-css.min.js\");\n/* harmony import */ var prismjs_components_prism_css_extras_min_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! prismjs/components/prism-css-extras.min.js */ \"./node_modules/prismjs/components/prism-css-extras.min.js\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target, mod));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// ../../node_modules/clipboard-copy/index.js\nvar require_clipboard_copy = __commonJS({\n  \"../../node_modules/clipboard-copy/index.js\"(exports, module) {\n    module.exports = clipboardCopy;\n    function makeError() {\n      return new DOMException(\"The request is not allowed\", \"NotAllowedError\");\n    }\n    function copyClipboardApi(text) {\n      return __async(this, null, function* () {\n        if (!navigator.clipboard) {\n          throw makeError();\n        }\n        return navigator.clipboard.writeText(text);\n      });\n    }\n    function copyExecCommand(text) {\n      return __async(this, null, function* () {\n        const span = document.createElement(\"span\");\n        span.textContent = text;\n        span.style.whiteSpace = \"pre\";\n        span.style.webkitUserSelect = \"auto\";\n        span.style.userSelect = \"all\";\n        document.body.appendChild(span);\n        const selection = window.getSelection();\n        const range = window.document.createRange();\n        selection.removeAllRanges();\n        range.selectNode(span);\n        selection.addRange(range);\n        let success = false;\n        try {\n          success = window.document.execCommand(\"copy\");\n        } finally {\n          selection.removeAllRanges();\n          window.document.body.removeChild(span);\n        }\n        if (!success)\n          throw makeError();\n      });\n    }\n    function clipboardCopy(text) {\n      return __async(this, null, function* () {\n        try {\n          yield copyClipboardApi(text);\n        } catch (err) {\n          try {\n            yield copyExecCommand(text);\n          } catch (err2) {\n            throw err2 || err || makeError();\n          }\n        }\n      });\n    }\n  }\n});\n\n// ../../node_modules/lodash.throttle/index.js\nvar require_lodash = __commonJS({\n  \"../../node_modules/lodash.throttle/index.js\"(exports, module) {\n    var FUNC_ERROR_TEXT = \"Expected a function\";\n    var NAN = 0 / 0;\n    var symbolTag = \"[object Symbol]\";\n    var reTrim = /^\\s+|\\s+$/g;\n    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n    var reIsBinary = /^0b[01]+$/i;\n    var reIsOctal = /^0o[0-7]+$/i;\n    var freeParseInt = parseInt;\n    var freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\n    var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n    var root = freeGlobal || freeSelf || Function(\"return this\")();\n    var objectProto = Object.prototype;\n    var objectToString = objectProto.toString;\n    var nativeMax = Math.max;\n    var nativeMin = Math.min;\n    var now = function() {\n      return root.Date.now();\n    };\n    function debounce(func, wait, options) {\n      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;\n      if (typeof func != \"function\") {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = \"maxWait\" in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = \"trailing\" in options ? !!options.trailing : trailing;\n      }\n      function invokeFunc(time) {\n        var args = lastArgs, thisArg = lastThis;\n        lastArgs = lastThis = void 0;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n      function leadingEdge(time) {\n        lastInvokeTime = time;\n        timerId = setTimeout(timerExpired, wait);\n        return leading ? invokeFunc(time) : result;\n      }\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;\n        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;\n      }\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;\n        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n      }\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n      function trailingEdge(time) {\n        timerId = void 0;\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = void 0;\n        return result;\n      }\n      function cancel() {\n        if (timerId !== void 0) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = void 0;\n      }\n      function flush() {\n        return timerId === void 0 ? result : trailingEdge(now());\n      }\n      function debounced() {\n        var time = now(), isInvoking = shouldInvoke(time);\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n          if (timerId === void 0) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === void 0) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n    function throttle2(func, wait, options) {\n      var leading = true, trailing = true;\n      if (typeof func != \"function\") {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = \"leading\" in options ? !!options.leading : leading;\n        trailing = \"trailing\" in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        \"leading\": leading,\n        \"maxWait\": wait,\n        \"trailing\": trailing\n      });\n    }\n    function isObject(value) {\n      var type = typeof value;\n      return !!value && (type == \"object\" || type == \"function\");\n    }\n    function isObjectLike(value) {\n      return !!value && typeof value == \"object\";\n    }\n    function isSymbol(value) {\n      return typeof value == \"symbol\" || isObjectLike(value) && objectToString.call(value) == symbolTag;\n    }\n    function toNumber(value) {\n      if (typeof value == \"number\") {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == \"function\" ? value.valueOf() : value;\n        value = isObject(other) ? other + \"\" : other;\n      }\n      if (typeof value != \"string\") {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, \"\");\n      var isBinary = reIsBinary.test(value);\n      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n    }\n    module.exports = throttle2;\n  }\n});\n\n// src/third-party/code.tsx\nvar import_clipboard_copy = __toESM(require_clipboard_copy(), 1);\n\n\n\n\n// src/components/text.tsx\n\n\n\n// src/context.tsx\n\n\n// src/next.tsx\n\n\nvar wrapNextImage = (NextImage) => {\n  return react__WEBPACK_IMPORTED_MODULE_0__.memo(function ReactNotionXNextImage(_a) {\n    var _b = _a, {\n      src,\n      alt,\n      width,\n      height,\n      className,\n      style,\n      layout\n    } = _b, rest = __objRest(_b, [\n      \"src\",\n      \"alt\",\n      \"width\",\n      \"height\",\n      \"className\",\n      \"style\",\n      \"layout\"\n    ]);\n    if (!layout) {\n      layout = width && height ? \"intrinsic\" : \"fill\";\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NextImage, __spreadValues({\n      className,\n      src,\n      alt,\n      width: layout === \"intrinsic\" && width,\n      height: layout === \"intrinsic\" && height,\n      objectFit: style == null ? void 0 : style.objectFit,\n      objectPosition: style == null ? void 0 : style.objectPosition,\n      layout\n    }, rest));\n  }, react_fast_compare__WEBPACK_IMPORTED_MODULE_2__);\n};\nvar wrapNextLink = (NextLink) => function ReactNotionXNextLink(_a) {\n  var _b = _a, {\n    href,\n    as,\n    passHref,\n    prefetch,\n    replace,\n    scroll,\n    shallow,\n    locale\n  } = _b, linkProps = __objRest(_b, [\n    \"href\",\n    \"as\",\n    \"passHref\",\n    \"prefetch\",\n    \"replace\",\n    \"scroll\",\n    \"shallow\",\n    \"locale\"\n  ]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NextLink, {\n    href,\n    as,\n    passHref,\n    prefetch,\n    replace,\n    scroll,\n    shallow,\n    locale\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", __spreadValues({}, linkProps)));\n};\n\n// src/components/asset-wrapper.tsx\n\n\n// src/components/asset.tsx\n\n\n\n// src/components/lazy-image.tsx\n\n\n\n\n// src/utils.ts\n\nvar defaultMapImageUrl = (url, block) => {\n  if (!url) {\n    return null;\n  }\n  if (url.startsWith(\"data:\")) {\n    return url;\n  }\n  if (url.startsWith(\"https://images.unsplash.com\")) {\n    return url;\n  }\n  try {\n    const u = new URL(url);\n    if (u.pathname.startsWith(\"/secure.notion-static.com\") && u.hostname.endsWith(\".amazonaws.com\")) {\n      if (u.searchParams.has(\"X-Amz-Credential\") && u.searchParams.has(\"X-Amz-Signature\") && u.searchParams.has(\"X-Amz-Algorithm\")) {\n        return url;\n      }\n    }\n  } catch (e) {\n  }\n  if (url.startsWith(\"/images\")) {\n    url = `https://www.notion.so${url}`;\n  }\n  url = `https://www.notion.so${url.startsWith(\"/image\") ? url : `/image/${encodeURIComponent(url)}`}`;\n  const notionImageUrlV2 = new URL(url);\n  let table = block.parent_table === \"space\" ? \"block\" : block.parent_table;\n  if (table === \"collection\") {\n    table = \"block\";\n  }\n  notionImageUrlV2.searchParams.set(\"table\", table);\n  notionImageUrlV2.searchParams.set(\"id\", block.id);\n  notionImageUrlV2.searchParams.set(\"cache\", \"v2\");\n  url = notionImageUrlV2.toString();\n  return url;\n};\nvar defaultMapPageUrl = (rootPageId) => (pageId) => {\n  pageId = (pageId || \"\").replace(/-/g, \"\");\n  if (rootPageId && pageId === rootPageId) {\n    return \"/\";\n  } else {\n    return `/${pageId}`;\n  }\n};\nvar cs = (...classes) => classes.filter((a) => !!a).join(\" \");\nvar getHashFragmentValue = (url) => {\n  return url.includes(\"#\") ? url.replace(/^.+(#.+)$/, \"$1\") : \"\";\n};\nvar isBrowser = typeof window !== \"undefined\";\nvar youtubeDomains = /* @__PURE__ */ new Set([\n  \"youtu.be\",\n  \"youtube.com\",\n  \"www.youtube.com\",\n  \"youtube-nocookie.com\",\n  \"www.youtube-nocookie.com\"\n]);\nvar getYoutubeId = (url) => {\n  try {\n    const { hostname } = new URL(url);\n    if (!youtubeDomains.has(hostname)) {\n      return null;\n    }\n    const regExp = /^.*(youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/i;\n    const match = url.match(regExp);\n    if (match && match[2].length == 11) {\n      return match[2];\n    }\n  } catch (e) {\n  }\n  return null;\n};\n\n// src/components/lazy-image.tsx\nvar LazyImage = (_a) => {\n  var _b = _a, {\n    src,\n    alt,\n    className,\n    style,\n    zoomable = false,\n    priority = false,\n    height\n  } = _b, rest = __objRest(_b, [\n    \"src\",\n    \"alt\",\n    \"className\",\n    \"style\",\n    \"zoomable\",\n    \"priority\",\n    \"height\"\n  ]);\n  var _a2, _b2, _c;\n  const { recordMap, zoom, previewImages, forceCustomImages, components } = useNotionContext();\n  const zoomRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(zoom ? zoom.clone() : null);\n  const previewImage = previewImages ? (_c = (_a2 = recordMap == null ? void 0 : recordMap.preview_images) == null ? void 0 : _a2[src]) != null ? _c : (_b2 = recordMap == null ? void 0 : recordMap.preview_images) == null ? void 0 : _b2[(0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.normalizeUrl)(src)] : null;\n  const onLoad = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((e) => {\n    if (zoomable && (e.target.src || e.target.srcset)) {\n      if (zoomRef.current) {\n        ;\n        zoomRef.current.attach(e.target);\n      }\n    }\n  }, [zoomRef, zoomable]);\n  const attachZoom = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((image) => {\n    if (zoomRef.current && image) {\n      ;\n      zoomRef.current.attach(image);\n    }\n  }, [zoomRef]);\n  const attachZoomRef = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => zoomable ? attachZoom : void 0, [zoomable, attachZoom]);\n  if (previewImage) {\n    const aspectRatio = previewImage.originalHeight / previewImage.originalWidth;\n    if (components.Image) {\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Image, {\n        src,\n        alt,\n        style,\n        className,\n        width: previewImage.originalWidth,\n        height: previewImage.originalHeight,\n        blurDataURL: previewImage.dataURIBase64,\n        placeholder: \"blur\",\n        priority,\n        onLoad\n      });\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_lazy_images__WEBPACK_IMPORTED_MODULE_3__.LazyImageFull, __spreadProps(__spreadValues({\n      src\n    }, rest), {\n      experimentalDecode: true\n    }), ({ imageState, ref }) => {\n      const isLoaded = imageState === react_lazy_images__WEBPACK_IMPORTED_MODULE_3__.ImageState.LoadSuccess;\n      const wrapperStyle = {\n        width: \"100%\"\n      };\n      const imgStyle = {};\n      if (height) {\n        wrapperStyle.height = height;\n      } else {\n        imgStyle.position = \"absolute\";\n        wrapperStyle.paddingBottom = `${aspectRatio * 100}%`;\n      }\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: cs(\"lazy-image-wrapper\", isLoaded && \"lazy-image-loaded\", className),\n        style: wrapperStyle\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        className: \"lazy-image-preview\",\n        src: previewImage.dataURIBase64,\n        alt,\n        ref,\n        style,\n        decoding: \"async\"\n      }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        className: \"lazy-image-real\",\n        src,\n        alt,\n        ref: attachZoomRef,\n        style: __spreadValues(__spreadValues({}, style), imgStyle),\n        width: previewImage.originalWidth,\n        height: previewImage.originalHeight,\n        decoding: \"async\",\n        loading: \"lazy\"\n      }));\n    });\n  } else {\n    if (components.Image && forceCustomImages) {\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Image, {\n        src,\n        alt,\n        className,\n        style,\n        width: null,\n        height: height || null,\n        priority,\n        onLoad\n      });\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", __spreadValues({\n      className,\n      style,\n      src,\n      alt,\n      ref: attachZoomRef,\n      loading: \"lazy\",\n      decoding: \"async\"\n    }, rest));\n  }\n};\n\n// src/components/lite-youtube-embed.tsx\n\nvar qs = (params) => {\n  return Object.keys(params).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join(\"&\");\n};\nvar LiteYouTubeEmbed = ({\n  id,\n  defaultPlay = false,\n  mute = false,\n  lazyImage = false,\n  iframeTitle = \"YouTube video\",\n  alt = \"Video preview\",\n  params = {},\n  adLinksPreconnect = true,\n  style,\n  className\n}) => {\n  const muteParam = mute || defaultPlay ? \"1\" : \"0\";\n  const queryString = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => qs(__spreadValues({ autoplay: \"1\", mute: muteParam }, params)), [muteParam, params]);\n  const resolution = \"hqdefault\";\n  const posterUrl = `https://i.ytimg.com/vi/${id}/${resolution}.jpg`;\n  const ytUrl = \"https://www.youtube-nocookie.com\";\n  const iframeSrc = `${ytUrl}/embed/${id}?${queryString}`;\n  const [isPreconnected, setIsPreconnected] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const [iframeInitialized, setIframeInitialized] = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultPlay);\n  const [isIframeLoaded, setIsIframeLoaded] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const warmConnections = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (isPreconnected)\n      return;\n    setIsPreconnected(true);\n  }, [isPreconnected]);\n  const onLoadIframe = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (iframeInitialized)\n      return;\n    setIframeInitialized(true);\n  }, [iframeInitialized]);\n  const onIframeLoaded = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    setIsIframeLoaded(true);\n  }, []);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n    rel: \"preload\",\n    href: posterUrl,\n    as: \"image\"\n  }), isPreconnected && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n    rel: \"preconnect\",\n    href: ytUrl\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://www.google.com\"\n  })), isPreconnected && adLinksPreconnect && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://static.doubleclick.net\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://googleads.g.doubleclick.net\"\n  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    onClick: onLoadIframe,\n    onPointerOver: warmConnections,\n    className: cs(\"notion-yt-lite\", isIframeLoaded && \"notion-yt-loaded\", iframeInitialized && \"notion-yt-initialized\", className),\n    style\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n    src: posterUrl,\n    className: \"notion-yt-thumbnail\",\n    loading: lazyImage ? \"lazy\" : void 0,\n    alt\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-yt-playbtn\"\n  }), iframeInitialized && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true,\n    title: iframeTitle,\n    src: iframeSrc,\n    onLoad: onIframeLoaded\n  })));\n};\n\n// src/components/asset.tsx\nvar isServer = typeof window === \"undefined\";\nvar supportedAssetTypes = [\n  \"video\",\n  \"image\",\n  \"embed\",\n  \"figma\",\n  \"typeform\",\n  \"excalidraw\",\n  \"maps\",\n  \"tweet\",\n  \"pdf\",\n  \"gist\",\n  \"codepen\",\n  \"drive\"\n];\nvar Asset = ({ block, zoomable = true, children }) => {\n  var _a, _b, _c, _d, _e, _f;\n  const { recordMap, mapImageUrl, components } = useNotionContext();\n  if (!block || !supportedAssetTypes.includes(block.type)) {\n    return null;\n  }\n  const style = {\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignSelf: \"center\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    flexDirection: \"column\"\n  };\n  const assetStyle = {};\n  if (block.format) {\n    const {\n      block_aspect_ratio,\n      block_height,\n      block_width,\n      block_full_width,\n      block_page_width,\n      block_preserve_scale\n    } = block.format;\n    if (block_full_width || block_page_width) {\n      if (block_full_width) {\n        style.width = \"100vw\";\n      } else {\n        style.width = \"100%\";\n      }\n      if (block.type === \"video\") {\n        if (block_height) {\n          style.height = block_height;\n        } else if (block_aspect_ratio) {\n          style.paddingBottom = `${block_aspect_ratio * 100}%`;\n        } else if (block_preserve_scale) {\n          style.objectFit = \"contain\";\n        }\n      } else if (block_aspect_ratio && block.type !== \"image\") {\n        style.paddingBottom = `${block_aspect_ratio * 100}%`;\n      } else if (block_height) {\n        style.height = block_height;\n      } else if (block_preserve_scale) {\n        if (block.type === \"image\") {\n          style.height = \"100%\";\n        } else {\n          style.paddingBottom = \"75%\";\n          style.minHeight = 100;\n        }\n      }\n    } else {\n      if (block_width) {\n        style.width = block_width;\n      }\n      if (block_preserve_scale && block.type !== \"image\") {\n        style.paddingBottom = \"50%\";\n        style.minHeight = 100;\n      } else {\n        if (block_height && block.type !== \"image\") {\n          style.height = block_height;\n        }\n      }\n    }\n    if (block.type === \"image\") {\n      assetStyle.objectFit = \"cover\";\n    } else if (block_preserve_scale) {\n      assetStyle.objectFit = \"contain\";\n    }\n  }\n  const source = ((_a = recordMap.signed_urls) == null ? void 0 : _a[block.id]) || ((_d = (_c = (_b = block.properties) == null ? void 0 : _b.source) == null ? void 0 : _c[0]) == null ? void 0 : _d[0]);\n  let content = null;\n  if (!source) {\n    return null;\n  }\n  if (block.type === \"tweet\") {\n    const src = source;\n    if (!src)\n      return null;\n    const id = src.split(\"?\")[0].split(\"/\").pop();\n    if (!id)\n      return null;\n    content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      style: __spreadProps(__spreadValues({}, assetStyle), {\n        maxWidth: 420,\n        width: \"100%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n      })\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Tweet, {\n      id\n    }));\n  } else if (block.type === \"pdf\") {\n    style.overflow = \"auto\";\n    style.background = \"rgb(226, 226, 226)\";\n    if (!style.padding) {\n      style.padding = \"8px 16px\";\n    }\n    if (!isServer) {\n      content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Pdf, {\n        file: source\n      });\n    }\n  } else if (block.type === \"embed\" || block.type === \"video\" || block.type === \"figma\" || block.type === \"typeform\" || block.type === \"gist\" || block.type === \"maps\" || block.type === \"excalidraw\" || block.type === \"codepen\" || block.type === \"drive\") {\n    if (block.type === \"video\" && source && source.indexOf(\"youtube\") < 0 && source.indexOf(\"youtu.be\") < 0 && source.indexOf(\"vimeo\") < 0 && source.indexOf(\"wistia\") < 0 && source.indexOf(\"loom\") < 0 && source.indexOf(\"videoask\") < 0 && source.indexOf(\"getcloudapp\") < 0) {\n      style.paddingBottom = void 0;\n      content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        playsInline: true,\n        controls: true,\n        preload: \"metadata\",\n        style: assetStyle,\n        src: source,\n        title: block.type\n      });\n    } else {\n      let src = ((_e = block.format) == null ? void 0 : _e.display_source) || source;\n      if (src) {\n        const youtubeVideoId = block.type === \"video\" ? getYoutubeId(src) : null;\n        if (youtubeVideoId) {\n          content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LiteYouTubeEmbed, {\n            id: youtubeVideoId,\n            style: assetStyle,\n            className: \"notion-asset-object-fit\"\n          });\n        } else if (block.type === \"gist\") {\n          if (!src.endsWith(\".pibb\")) {\n            src = `${src}.pibb`;\n          }\n          assetStyle.width = \"100%\";\n          style.paddingBottom = \"50%\";\n          content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"iframe\", {\n            style: assetStyle,\n            className: \"notion-asset-object-fit\",\n            src,\n            title: \"GitHub Gist\",\n            frameBorder: \"0\",\n            loading: \"lazy\",\n            scrolling: \"auto\"\n          });\n        } else {\n          content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"iframe\", {\n            className: \"notion-asset-object-fit\",\n            style: assetStyle,\n            src,\n            title: `iframe ${block.type}`,\n            frameBorder: \"0\",\n            allowFullScreen: true,\n            loading: \"lazy\",\n            scrolling: \"auto\"\n          });\n        }\n      }\n    }\n  } else if (block.type === \"image\") {\n    const src = mapImageUrl(source, block);\n    const caption = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getTextContent)((_f = block.properties) == null ? void 0 : _f.caption);\n    const alt = caption || \"notion image\";\n    content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LazyImage, {\n      src,\n      alt,\n      zoomable,\n      height: style.height,\n      style: assetStyle\n    });\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    style\n  }, content, block.type === \"image\" && children), block.type !== \"image\" && children);\n};\n\n// src/components/page-icon.tsx\n\n\n\n// src/icons/default-page-icon.tsx\n\nvar DefaultPageIcon = (props) => {\n  const _a = props, { className } = _a, rest = __objRest(_a, [\"className\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadProps(__spreadValues({\n    className\n  }, rest), {\n    viewBox: \"0 0 30 30\",\n    width: \"16\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z\"\n  }));\n};\n\n// src/components/page-icon.tsx\nvar isIconBlock = (value) => {\n  return value.type === \"page\" || value.type === \"callout\" || value.type === \"collection_view\" || value.type === \"collection_view_page\";\n};\nvar PageIconImpl = ({\n  block,\n  className,\n  inline = true,\n  hideDefaultIcon = false,\n  defaultIcon\n}) => {\n  var _a;\n  const { mapImageUrl, recordMap } = useNotionContext();\n  let isImage = false;\n  let content = null;\n  if (isIconBlock(block)) {\n    const icon = ((_a = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getBlockIcon)(block, recordMap)) == null ? void 0 : _a.trim()) || defaultIcon;\n    const title = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getBlockTitle)(block, recordMap);\n    if (icon && (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.isUrl)(icon)) {\n      const url = mapImageUrl(icon, block);\n      isImage = true;\n      content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LazyImage, {\n        src: url,\n        alt: title || \"page icon\",\n        className: cs(className, \"notion-page-icon\")\n      });\n    } else if (!icon) {\n      if (!hideDefaultIcon) {\n        isImage = true;\n        content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPageIcon, {\n          className: cs(className, \"notion-page-icon\"),\n          alt: title ? title : \"page icon\"\n        });\n      }\n    } else {\n      isImage = false;\n      content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: cs(className, \"notion-page-icon\"),\n        role: \"img\",\n        \"aria-label\": icon\n      }, icon);\n    }\n  }\n  if (!content) {\n    return null;\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: cs(inline ? \"notion-page-icon-inline\" : \"notion-page-icon-hero\", isImage ? \"notion-page-icon-image\" : \"notion-page-icon-span\")\n  }, content);\n};\nvar PageIcon = react__WEBPACK_IMPORTED_MODULE_0__.memo(PageIconImpl);\n\n// src/components/page-title.tsx\n\n\nvar PageTitleImpl = (_a) => {\n  var _b = _a, { block, className, defaultIcon } = _b, rest = __objRest(_b, [\"block\", \"className\", \"defaultIcon\"]);\n  var _a2, _b2;\n  const { recordMap } = useNotionContext();\n  if (!block)\n    return null;\n  if (block.type === \"collection_view_page\" || block.type === \"collection_view\") {\n    const title = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getBlockTitle)(block, recordMap);\n    if (!title) {\n      return null;\n    }\n    const titleDecoration = [[title]];\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({\n      className: cs(\"notion-page-title\", className)\n    }, rest), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PageIcon, {\n      block,\n      defaultIcon,\n      className: \"notion-page-title-icon\"\n    }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"notion-page-title-text\"\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Text, {\n      value: titleDecoration,\n      block\n    })));\n  }\n  if (!((_a2 = block.properties) == null ? void 0 : _a2.title)) {\n    return null;\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({\n    className: cs(\"notion-page-title\", className)\n  }, rest), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PageIcon, {\n    block,\n    defaultIcon,\n    className: \"notion-page-title-icon\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n    className: \"notion-page-title-text\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Text, {\n    value: (_b2 = block.properties) == null ? void 0 : _b2.title,\n    block\n  })));\n};\nvar PageTitle = react__WEBPACK_IMPORTED_MODULE_0__.memo(PageTitleImpl);\n\n// src/components/graceful-image.tsx\n\n\nvar GracefulImage = (props) => {\n  if (isBrowser) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_image__WEBPACK_IMPORTED_MODULE_5__.Img, __spreadValues({}, props));\n  } else {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", __spreadValues({}, props));\n  }\n};\n\n// src/components/eoi.tsx\n\n\n// src/icons/type-github.tsx\n\nfunction SvgTypeGitHub(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n    viewBox: \"0 0 260 260\"\n  }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M128.00106,0 C57.3172926,0 0,57.3066942 0,128.00106 C0,184.555281 36.6761997,232.535542 87.534937,249.460899 C93.9320223,250.645779 96.280588,246.684165 96.280588,243.303333 C96.280588,240.251045 96.1618878,230.167899 96.106777,219.472176 C60.4967585,227.215235 52.9826207,204.369712 52.9826207,204.369712 C47.1599584,189.574598 38.770408,185.640538 38.770408,185.640538 C27.1568785,177.696113 39.6458206,177.859325 39.6458206,177.859325 C52.4993419,178.762293 59.267365,191.04987 59.267365,191.04987 C70.6837675,210.618423 89.2115753,204.961093 96.5158685,201.690482 C97.6647155,193.417512 100.981959,187.77078 104.642583,184.574357 C76.211799,181.33766 46.324819,170.362144 46.324819,121.315702 C46.324819,107.340889 51.3250588,95.9223682 59.5132437,86.9583937 C58.1842268,83.7344152 53.8029229,70.715562 60.7532354,53.0843636 C60.7532354,53.0843636 71.5019501,49.6441813 95.9626412,66.2049595 C106.172967,63.368876 117.123047,61.9465949 128.00106,61.8978432 C138.879073,61.9465949 149.837632,63.368876 160.067033,66.2049595 C184.49805,49.6441813 195.231926,53.0843636 195.231926,53.0843636 C202.199197,70.715562 197.815773,83.7344152 196.486756,86.9583937 C204.694018,95.9223682 209.660343,107.340889 209.660343,121.315702 C209.660343,170.478725 179.716133,181.303747 151.213281,184.472614 C155.80443,188.444828 159.895342,196.234518 159.895342,208.176593 C159.895342,225.303317 159.746968,239.087361 159.746968,243.303333 C159.746968,246.709601 162.05102,250.70089 168.53925,249.443941 C219.370432,232.499507 256,184.536204 256,128.00106 C256,57.3066942 198.691187,0 128.00106,0 Z M47.9405593,182.340212 C47.6586465,182.976105 46.6581745,183.166873 45.7467277,182.730227 C44.8183235,182.312656 44.2968914,181.445722 44.5978808,180.80771 C44.8734344,180.152739 45.876026,179.97045 46.8023103,180.409216 C47.7328342,180.826786 48.2627451,181.702199 47.9405593,182.340212 Z M54.2367892,187.958254 C53.6263318,188.524199 52.4329723,188.261363 51.6232682,187.366874 C50.7860088,186.474504 50.6291553,185.281144 51.2480912,184.70672 C51.8776254,184.140775 53.0349512,184.405731 53.8743302,185.298101 C54.7115892,186.201069 54.8748019,187.38595 54.2367892,187.958254 Z M58.5562413,195.146347 C57.7719732,195.691096 56.4895886,195.180261 55.6968417,194.042013 C54.9125733,192.903764 54.9125733,191.538713 55.713799,190.991845 C56.5086651,190.444977 57.7719732,190.936735 58.5753181,192.066505 C59.3574669,193.22383 59.3574669,194.58888 58.5562413,195.146347 Z M65.8613592,203.471174 C65.1597571,204.244846 63.6654083,204.03712 62.5716717,202.981538 C61.4524999,201.94927 61.1409122,200.484596 61.8446341,199.710926 C62.5547146,198.935137 64.0575422,199.15346 65.1597571,200.200564 C66.2704506,201.230712 66.6095936,202.705984 65.8613592,203.471174 Z M75.3025151,206.281542 C74.9930474,207.284134 73.553809,207.739857 72.1039724,207.313809 C70.6562556,206.875043 69.7087748,205.700761 70.0012857,204.687571 C70.302275,203.678621 71.7478721,203.20382 73.2083069,203.659543 C74.6539041,204.09619 75.6035048,205.261994 75.3025151,206.281542 Z M86.046947,207.473627 C86.0829806,208.529209 84.8535871,209.404622 83.3316829,209.4237 C81.8013,209.457614 80.563428,208.603398 80.5464708,207.564772 C80.5464708,206.498591 81.7483088,205.631657 83.2786917,205.606221 C84.8005962,205.576546 86.046947,206.424403 86.046947,207.473627 Z M96.6021471,207.069023 C96.7844366,208.099171 95.7267341,209.156872 94.215428,209.438785 C92.7295577,209.710099 91.3539086,209.074206 91.1652603,208.052538 C90.9808515,206.996955 92.0576306,205.939253 93.5413813,205.66582 C95.054807,205.402984 96.4092596,206.021919 96.6021471,207.069023 Z\",\n    fill: \"#161614\"\n  })));\n}\nvar type_github_default = SvgTypeGitHub;\n\n// src/components/eoi.tsx\nvar EOI = ({ block, inline, className }) => {\n  var _a, _b, _c;\n  const { components } = useNotionContext();\n  const { original_url, attributes, domain } = (block == null ? void 0 : block.format) || {};\n  if (!original_url || !attributes) {\n    return null;\n  }\n  const title = (_a = attributes.find((attr) => attr.id === \"title\")) == null ? void 0 : _a.values[0];\n  let owner = (_b = attributes.find((attr) => attr.id === \"owner\")) == null ? void 0 : _b.values[0];\n  const lastUpdatedAt = (_c = attributes.find((attr) => attr.id === \"updated_at\")) == null ? void 0 : _c.values[0];\n  const lastUpdated = lastUpdatedAt ? (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.formatNotionDateTime)(lastUpdatedAt) : null;\n  let externalImage;\n  switch (domain) {\n    case \"github.com\":\n      externalImage = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(type_github_default, null);\n      if (owner) {\n        const parts = owner.split(\"/\");\n        owner = parts[parts.length - 1];\n      }\n      break;\n    default:\n      if (true) {\n        console.log(`Unsupported external_object_instance domain \"${domain}\"`, JSON.stringify(block, null, 2));\n      }\n      return null;\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Link, {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: original_url,\n    className: cs(\"notion-external\", inline ? \"notion-external-mention\" : \"notion-external-block notion-row\", className)\n  }, externalImage && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-external-image\"\n  }, externalImage), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-external-description\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-external-title\"\n  }, title), (owner || lastUpdated) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-external-subtitle\"\n  }, owner && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, owner), owner && lastUpdated && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \" \\u2022 \"), lastUpdated && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \"Updated \", lastUpdated))));\n};\n\n// src/components/header.tsx\n\n\n\n\n// src/icons/search-icon.tsx\n\nvar SearchIcon = (props) => {\n  const _a = props, { className } = _a, rest = __objRest(_a, [\"className\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n    className: cs(\"notion-icon\", className),\n    viewBox: \"0 0 17 17\"\n  }, rest), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M6.78027 13.6729C8.24805 13.6729 9.60156 13.1982 10.709 12.4072L14.875 16.5732C15.0684 16.7666 15.3232 16.8633 15.5957 16.8633C16.167 16.8633 16.5713 16.4238 16.5713 15.8613C16.5713 15.5977 16.4834 15.3516 16.29 15.1582L12.1504 11.0098C13.0205 9.86719 13.5391 8.45215 13.5391 6.91406C13.5391 3.19629 10.498 0.155273 6.78027 0.155273C3.0625 0.155273 0.0214844 3.19629 0.0214844 6.91406C0.0214844 10.6318 3.0625 13.6729 6.78027 13.6729ZM6.78027 12.2139C3.87988 12.2139 1.48047 9.81445 1.48047 6.91406C1.48047 4.01367 3.87988 1.61426 6.78027 1.61426C9.68066 1.61426 12.0801 4.01367 12.0801 6.91406C12.0801 9.81445 9.68066 12.2139 6.78027 12.2139Z\"\n  }));\n};\n\n// src/components/search-dialog.tsx\nvar import_lodash = __toESM(require_lodash(), 1);\n\n\n\n// src/icons/clear-icon.tsx\n\nvar ClearIcon = (props) => {\n  const _a = props, { className } = _a, rest = __objRest(_a, [\"className\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadProps(__spreadValues({\n    className: cs(\"notion-icon\", className)\n  }, rest), {\n    viewBox: \"0 0 30 30\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M15,0C6.716,0,0,6.716,0,15s6.716,15,15,15s15-6.716,15-15S23.284,0,15,0z M22,20.6L20.6,22L15,16.4L9.4,22L8,20.6l5.6-5.6 L8,9.4L9.4,8l5.6,5.6L20.6,8L22,9.4L16.4,15L22,20.6z\"\n  }));\n};\n\n// src/icons/loading-icon.tsx\n\nvar LoadingIcon = (props) => {\n  const _a = props, { className } = _a, rest = __objRest(_a, [\"className\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadProps(__spreadValues({\n    className: cs(\"notion-icon\", className)\n  }, rest), {\n    viewBox: \"0 0 24 24\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"linearGradient\", {\n    x1: \"28.1542969%\",\n    y1: \"63.7402344%\",\n    x2: \"74.6289062%\",\n    y2: \"17.7832031%\",\n    id: \"linearGradient-1\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n    stopColor: \"rgba(164, 164, 164, 1)\",\n    offset: \"0%\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n    stopColor: \"rgba(164, 164, 164, 0)\",\n    stopOpacity: \"0\",\n    offset: \"100%\"\n  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n    id: \"Page-1\",\n    stroke: \"none\",\n    strokeWidth: \"1\",\n    fill: \"none\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n    transform: \"translate(-236.000000, -286.000000)\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n    transform: \"translate(238.000000, 286.000000)\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    id: \"Oval-2\",\n    stroke: \"url(#linearGradient-1)\",\n    strokeWidth: \"4\",\n    cx: \"10\",\n    cy: \"12\",\n    r: \"10\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M10,2 C4.4771525,2 0,6.4771525 0,12\",\n    id: \"Oval-2\",\n    stroke: \"rgba(164, 164, 164, 1)\",\n    strokeWidth: \"4\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n    id: \"Rectangle-1\",\n    fill: \"rgba(164, 164, 164, 1)\",\n    x: \"8\",\n    y: \"0\",\n    width: \"4\",\n    height: \"4\",\n    rx: \"8\"\n  })))));\n};\n\n// src/components/search-dialog.tsx\nvar SearchDialog = class extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      query: \"\",\n      searchResult: null,\n      searchError: null\n    };\n    this._onAfterOpen = () => {\n      if (this._inputRef.current) {\n        this._inputRef.current.focus();\n      }\n    };\n    this._onChangeQuery = (e) => {\n      const query = e.target.value;\n      this.setState({ query });\n      if (!query.trim()) {\n        this.setState({ isLoading: false, searchResult: null, searchError: null });\n        return;\n      } else {\n        this._search();\n      }\n    };\n    this._onClearQuery = () => {\n      this._onChangeQuery({ target: { value: \"\" } });\n    };\n    this._warmupSearch = () => __async(this, null, function* () {\n      const { searchNotion, rootBlockId } = this.props;\n      yield searchNotion({\n        query: \"\",\n        ancestorId: rootBlockId\n      });\n    });\n    this._searchImpl = () => __async(this, null, function* () {\n      const { searchNotion, rootBlockId } = this.props;\n      const { query } = this.state;\n      if (!query.trim()) {\n        this.setState({ isLoading: false, searchResult: null, searchError: null });\n        return;\n      }\n      this.setState({ isLoading: true });\n      const result = yield searchNotion({\n        query,\n        ancestorId: rootBlockId\n      });\n      console.log(\"search\", query, result);\n      let searchResult = null;\n      let searchError = null;\n      if (result.error || result.errorId) {\n        searchError = result;\n      } else {\n        searchResult = __spreadValues({}, result);\n        const results = searchResult.results.map((result2) => {\n          var _a, _b;\n          const block = (_a = searchResult.recordMap.block[result2.id]) == null ? void 0 : _a.value;\n          if (!block)\n            return;\n          const title = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getBlockTitle)(block, searchResult.recordMap);\n          if (!title) {\n            return;\n          }\n          result2.title = title;\n          result2.block = block;\n          result2.recordMap = searchResult.recordMap;\n          result2.page = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getBlockParentPage)(block, searchResult.recordMap, {\n            inclusive: true\n          }) || block;\n          if (!result2.page.id) {\n            return;\n          }\n          if ((_b = result2.highlight) == null ? void 0 : _b.text) {\n            result2.highlight.html = result2.highlight.text.replace(/<gzkNfoUU>/gi, \"<b>\").replace(/<\\/gzkNfoUU>/gi, \"</b>\");\n          }\n          return result2;\n        }).filter(Boolean);\n        const searchResultsMap = results.reduce((map, result2) => __spreadProps(__spreadValues({}, map), {\n          [result2.page.id]: result2\n        }), {});\n        searchResult.results = Object.values(searchResultsMap);\n      }\n      if (this.state.query === query) {\n        this.setState({ isLoading: false, searchResult, searchError });\n      }\n    });\n    this._inputRef = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n  }\n  componentDidMount() {\n    this._search = (0, import_lodash.default)(this._searchImpl.bind(this), 1e3);\n    this._warmupSearch();\n  }\n  render() {\n    const { isOpen, onClose } = this.props;\n    const { isLoading, query, searchResult, searchError } = this.state;\n    const hasQuery = !!query.trim();\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NotionContextConsumer, null, (ctx2) => {\n      const { components, defaultPageIcon, mapPageUrl } = ctx2;\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Modal, {\n        isOpen,\n        contentLabel: \"Search\",\n        className: \"notion-search\",\n        overlayClassName: \"notion-search-overlay\",\n        onRequestClose: onClose,\n        onAfterOpen: this._onAfterOpen\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"quickFindMenu\"\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"searchBar\"\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"inlineIcon\"\n      }, isLoading ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LoadingIcon, {\n        className: \"loadingIcon\"\n      }) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SearchIcon, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        className: \"searchInput\",\n        placeholder: \"Search\",\n        value: query,\n        ref: this._inputRef,\n        onChange: this._onChangeQuery\n      }), query && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        role: \"button\",\n        className: \"clearButton\",\n        onClick: this._onClearQuery\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ClearIcon, {\n        className: \"clearIcon\"\n      }))), hasQuery && searchResult && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, searchResult.results.length ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NotionContextProvider, __spreadProps(__spreadValues({}, ctx2), {\n        recordMap: searchResult.recordMap\n      }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"resultsPane\"\n      }, searchResult.results.map((result) => {\n        var _a;\n        return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.PageLink, {\n          key: result.id,\n          className: cs(\"result\", \"notion-page-link\"),\n          href: mapPageUrl(result.page.id, searchResult.recordMap)\n        }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PageTitle, {\n          block: result.page,\n          defaultIcon: defaultPageIcon\n        }), ((_a = result.highlight) == null ? void 0 : _a.html) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"notion-search-result-highlight\",\n          dangerouslySetInnerHTML: {\n            __html: result.highlight.html\n          }\n        }));\n      })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"footer\", {\n        className: \"resultsFooter\"\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"resultsCount\"\n      }, searchResult.total), searchResult.total === 1 ? \" result\" : \" results\"))) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"noResultsPane\"\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"noResults\"\n      }, \"No results\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"noResultsDetail\"\n      }, \"Try different search terms\"))), hasQuery && !searchResult && searchError && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"noResultsPane\"\n      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"noResults\"\n      }, \"Search error\"))));\n    });\n  }\n};\n\n// src/components/header.tsx\nvar Header = ({ block }) => {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"header\", {\n    className: \"notion-header\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-nav-header\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Breadcrumbs, {\n    block\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Search, {\n    block\n  })));\n};\nvar Breadcrumbs = ({ block, rootOnly = false }) => {\n  const { recordMap, mapPageUrl, components } = useNotionContext();\n  const breadcrumbs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const breadcrumbs2 = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getPageBreadcrumbs)(recordMap, block.id);\n    if (rootOnly) {\n      return [breadcrumbs2[0]].filter(Boolean);\n    }\n    return breadcrumbs2;\n  }, [recordMap, block.id, rootOnly]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"breadcrumbs\",\n    key: \"breadcrumbs\"\n  }, breadcrumbs.map((breadcrumb, index) => {\n    if (!breadcrumb) {\n      return null;\n    }\n    const pageLinkProps = {};\n    const componentMap = {\n      pageLink: components.PageLink\n    };\n    if (breadcrumb.active) {\n      componentMap.pageLink = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, props));\n    } else {\n      pageLinkProps.href = mapPageUrl(breadcrumb.pageId);\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n      key: breadcrumb.pageId\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(componentMap.pageLink, __spreadValues({\n      className: cs(\"breadcrumb\", breadcrumb.active && \"active\")\n    }, pageLinkProps), breadcrumb.icon && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PageIcon, {\n      className: \"icon\",\n      block: breadcrumb.block\n    }), breadcrumb.title && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"title\"\n    }, breadcrumb.title)), index < breadcrumbs.length - 1 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"spacer\"\n    }, \"/\"));\n  }));\n};\nvar Search = ({ block, search, title = \"Search\" }) => {\n  const { searchNotion, rootPageId } = useNotionContext();\n  const onSearchNotion = search || searchNotion;\n  const [isSearchOpen, setIsSearchOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const onOpenSearch = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    setIsSearchOpen(true);\n  }, []);\n  const onCloseSearch = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    setIsSearchOpen(false);\n  }, []);\n  (0,react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_6__.useHotkeys)(\"cmd+p\", (event) => {\n    onOpenSearch();\n    event.preventDefault();\n    event.stopPropagation();\n  });\n  (0,react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_6__.useHotkeys)(\"cmd+k\", (event) => {\n    onOpenSearch();\n    event.preventDefault();\n    event.stopPropagation();\n  });\n  const hasSearch = !!onSearchNotion;\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, hasSearch && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    role: \"button\",\n    className: cs(\"breadcrumb\", \"button\", \"notion-search-button\"),\n    onClick: onOpenSearch\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SearchIcon, {\n    className: \"searchIcon\"\n  }), title && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n    className: \"title\"\n  }, title)), isSearchOpen && hasSearch && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SearchDialog, {\n    isOpen: isSearchOpen,\n    rootBlockId: rootPageId || (block == null ? void 0 : block.id),\n    onClose: onCloseSearch,\n    searchNotion: onSearchNotion\n  }));\n};\n\n// src/components/asset-wrapper.tsx\n\nvar urlStyle = { width: \"100%\" };\nvar AssetWrapper = ({ blockId, block }) => {\n  var _a, _b, _c, _d, _e, _f;\n  const value = block;\n  const { components, mapPageUrl, rootDomain } = useNotionContext();\n  let isURL = false;\n  if (block.type === \"image\") {\n    const caption = (_c = (_b = (_a = value == null ? void 0 : value.properties) == null ? void 0 : _a.caption) == null ? void 0 : _b[0]) == null ? void 0 : _c[0];\n    if (caption) {\n      const id = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.parsePageId)(caption, { uuid: true });\n      const isPage = caption.charAt(0) === \"/\" && id;\n      if (isPage || isValidURL(caption)) {\n        isURL = true;\n      }\n    }\n  }\n  const figure = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"figure\", {\n    className: cs(\"notion-asset-wrapper\", `notion-asset-wrapper-${block.type}`, ((_d = value.format) == null ? void 0 : _d.block_full_width) && \"notion-asset-wrapper-full\", blockId)\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Asset, {\n    block: value,\n    zoomable: !isURL\n  }, ((_e = value == null ? void 0 : value.properties) == null ? void 0 : _e.caption) && !isURL && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"figcaption\", {\n    className: \"notion-asset-caption\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Text, {\n    value: value.properties.caption,\n    block\n  }))));\n  if (isURL) {\n    const caption = (_f = value == null ? void 0 : value.properties) == null ? void 0 : _f.caption[0][0];\n    const id = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.parsePageId)(caption, { uuid: true });\n    const isPage = caption.charAt(0) === \"/\" && id;\n    const captionHostname = extractHostname(caption);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.PageLink, {\n      style: urlStyle,\n      href: isPage ? mapPageUrl(id) : caption,\n      target: captionHostname && captionHostname !== rootDomain && !caption.startsWith(\"/\") ? \"blank_\" : null\n    }, figure);\n  }\n  return figure;\n};\nfunction isValidURL(str) {\n  const pattern = new RegExp(\"^(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$\", \"i\");\n  return !!pattern.test(str);\n}\nfunction extractHostname(url) {\n  try {\n    const hostname = new URL(url).hostname;\n    return hostname;\n  } catch (err) {\n    return \"\";\n  }\n}\n\n// src/components/checkbox.tsx\n\n\n// src/icons/check.tsx\n\nfunction SvgCheck(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n    viewBox: \"0 0 14 14\"\n  }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M5.5 12L14 3.5 12.5 2l-7 7-4-4.003L0 6.499z\"\n  }));\n}\nvar check_default = SvgCheck;\n\n// src/components/checkbox.tsx\nvar Checkbox = ({ isChecked }) => {\n  let content = null;\n  if (isChecked) {\n    content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"notion-property-checkbox-checked\"\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(check_default, null));\n  } else {\n    content = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"notion-property-checkbox-unchecked\"\n    });\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n    className: \"notion-property notion-property-checkbox\"\n  }, content);\n};\n\n// src/context.tsx\nvar DefaultLink = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", __spreadValues({\n  target: \"_blank\",\n  rel: \"noopener noreferrer\"\n}, props));\nvar DefaultLinkMemo = react__WEBPACK_IMPORTED_MODULE_0__.memo(DefaultLink);\nvar DefaultPageLink = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", __spreadValues({}, props));\nvar DefaultPageLinkMemo = react__WEBPACK_IMPORTED_MODULE_0__.memo(DefaultPageLink);\nvar DefaultEmbed = AssetWrapper;\nvar DefaultHeader = Header;\nvar dummyComponent = (name) => () => {\n  console.warn(`Warning: using empty component \"${name}\" (you should override this in NotionRenderer.components)`);\n  return null;\n};\nvar dummyOverrideFn = (_, defaultValueFn) => defaultValueFn();\nvar defaultComponents = {\n  Image: null,\n  Link: DefaultLinkMemo,\n  PageLink: DefaultPageLinkMemo,\n  Checkbox,\n  Callout: void 0,\n  Code: dummyComponent(\"Code\"),\n  Equation: dummyComponent(\"Equation\"),\n  Collection: dummyComponent(\"Collection\"),\n  Property: void 0,\n  propertyTextValue: dummyOverrideFn,\n  propertySelectValue: dummyOverrideFn,\n  propertyRelationValue: dummyOverrideFn,\n  propertyFormulaValue: dummyOverrideFn,\n  propertyTitleValue: dummyOverrideFn,\n  propertyPersonValue: dummyOverrideFn,\n  propertyFileValue: dummyOverrideFn,\n  propertyCheckboxValue: dummyOverrideFn,\n  propertyUrlValue: dummyOverrideFn,\n  propertyEmailValue: dummyOverrideFn,\n  propertyPhoneNumberValue: dummyOverrideFn,\n  propertyNumberValue: dummyOverrideFn,\n  propertyLastEditedTimeValue: dummyOverrideFn,\n  propertyCreatedTimeValue: dummyOverrideFn,\n  propertyDateValue: dummyOverrideFn,\n  Pdf: dummyComponent(\"Pdf\"),\n  Tweet: dummyComponent(\"Tweet\"),\n  Modal: dummyComponent(\"Modal\"),\n  Header: DefaultHeader,\n  Embed: DefaultEmbed\n};\nvar defaultNotionContext = {\n  recordMap: {\n    block: {},\n    collection: {},\n    collection_view: {},\n    collection_query: {},\n    notion_user: {},\n    signed_urls: {}\n  },\n  components: defaultComponents,\n  mapPageUrl: defaultMapPageUrl(),\n  mapImageUrl: defaultMapImageUrl,\n  searchNotion: null,\n  fullPage: false,\n  darkMode: false,\n  previewImages: false,\n  forceCustomImages: false,\n  showCollectionViewDropdown: true,\n  linkTableTitleProperties: true,\n  showTableOfContents: false,\n  minTableOfContentsItems: 3,\n  defaultPageIcon: null,\n  defaultPageCover: null,\n  defaultPageCoverPosition: 0.5,\n  zoom: null\n};\nvar ctx = react__WEBPACK_IMPORTED_MODULE_0__.createContext(defaultNotionContext);\nvar NotionContextProvider = (_a) => {\n  var _b = _a, {\n    components: themeComponents = {},\n    children,\n    mapPageUrl,\n    mapImageUrl,\n    rootPageId\n  } = _b, rest = __objRest(_b, [\n    \"components\",\n    \"children\",\n    \"mapPageUrl\",\n    \"mapImageUrl\",\n    \"rootPageId\"\n  ]);\n  for (const key of Object.keys(rest)) {\n    if (rest[key] === void 0) {\n      delete rest[key];\n    }\n  }\n  const wrappedThemeComponents = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => __spreadValues({}, themeComponents), [themeComponents]);\n  if (wrappedThemeComponents.nextImage) {\n    wrappedThemeComponents.Image = wrapNextImage(themeComponents.nextImage);\n  }\n  if (wrappedThemeComponents.nextLink) {\n    wrappedThemeComponents.nextLink = wrapNextLink(themeComponents.nextLink);\n  }\n  for (const key of Object.keys(wrappedThemeComponents)) {\n    if (!wrappedThemeComponents[key]) {\n      delete wrappedThemeComponents[key];\n    }\n  }\n  const value = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => __spreadProps(__spreadValues(__spreadValues({}, defaultNotionContext), rest), {\n    rootPageId,\n    mapPageUrl: mapPageUrl != null ? mapPageUrl : defaultMapPageUrl(rootPageId),\n    mapImageUrl: mapImageUrl != null ? mapImageUrl : defaultMapImageUrl,\n    components: __spreadValues(__spreadValues({}, defaultComponents), wrappedThemeComponents)\n  }), [mapImageUrl, mapPageUrl, wrappedThemeComponents, rootPageId, rest]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ctx.Provider, {\n    value\n  }, children);\n};\nvar NotionContextConsumer = ctx.Consumer;\nvar useNotionContext = () => {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ctx);\n};\n\n// src/components/text.tsx\nvar Text = ({ value, block, linkProps, linkProtocol }) => {\n  const { components, recordMap, mapPageUrl, mapImageUrl, rootDomain } = useNotionContext();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, value == null ? void 0 : value.map(([text, decorations], index) => {\n    if (!decorations) {\n      if (text === \",\") {\n        return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n          key: index,\n          style: { padding: \"0.5em\" }\n        });\n      } else {\n        return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n          key: index\n        }, text);\n      }\n    }\n    const formatted = decorations.reduce((element, decorator) => {\n      var _a, _b, _c, _d, _e;\n      switch (decorator[0]) {\n        case \"p\": {\n          const blockId = decorator[1];\n          const linkedBlock = (_a = recordMap.block[blockId]) == null ? void 0 : _a.value;\n          if (!linkedBlock) {\n            console.log('\"p\" missing block', blockId);\n            return null;\n          }\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.PageLink, {\n            className: \"notion-link\",\n            href: mapPageUrl(blockId)\n          }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PageTitle, {\n            block: linkedBlock\n          }));\n        }\n        case \"\\u2023\": {\n          const linkType = decorator[1][0];\n          const id = decorator[1][1];\n          switch (linkType) {\n            case \"u\": {\n              const user = (_b = recordMap.notion_user[id]) == null ? void 0 : _b.value;\n              if (!user) {\n                console.log('\"\\u2023\" missing user', id);\n                return null;\n              }\n              const name = [user.given_name, user.family_name].filter(Boolean).join(\" \");\n              return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GracefulImage, {\n                className: \"notion-user\",\n                src: mapImageUrl(user.profile_photo, block),\n                alt: name\n              });\n            }\n            default: {\n              const linkedBlock = (_c = recordMap.block[id]) == null ? void 0 : _c.value;\n              if (!linkedBlock) {\n                console.log('\"\\u2023\" missing block', linkType, id);\n                return null;\n              }\n              return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.PageLink, __spreadProps(__spreadValues({\n                className: \"notion-link\",\n                href: mapPageUrl(id)\n              }, linkProps), {\n                target: \"_blank\",\n                rel: \"noopener noreferrer\"\n              }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PageTitle, {\n                block: linkedBlock\n              }));\n            }\n          }\n        }\n        case \"h\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: `notion-${decorator[1]}`\n          }, element);\n        case \"c\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n            className: \"notion-inline-code\"\n          }, element);\n        case \"b\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"b\", null, element);\n        case \"i\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"em\", null, element);\n        case \"s\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"s\", null, element);\n        case \"_\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"notion-inline-underscore\"\n          }, element);\n        case \"e\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Equation, {\n            math: decorator[1],\n            inline: true\n          });\n        case \"m\":\n          return element;\n        case \"a\": {\n          const v = decorator[1];\n          const pathname = v.substr(1);\n          const id = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.parsePageId)(pathname, { uuid: true });\n          if ((v[0] === \"/\" || v.includes(rootDomain)) && id) {\n            const href = v.includes(rootDomain) ? v : `${mapPageUrl(id)}${getHashFragmentValue(v)}`;\n            return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.PageLink, __spreadValues({\n              className: \"notion-link\",\n              href\n            }, linkProps), element);\n          } else {\n            return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Link, __spreadValues({\n              className: \"notion-link\",\n              href: linkProtocol ? `${linkProtocol}:${decorator[1]}` : decorator[1]\n            }, linkProps), element);\n          }\n        }\n        case \"d\": {\n          const v = decorator[1];\n          const type = v == null ? void 0 : v.type;\n          if (type === \"date\") {\n            const startDate = v.start_date;\n            return (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.formatDate)(startDate);\n          } else if (type === \"daterange\") {\n            const startDate = v.start_date;\n            const endDate = v.end_date;\n            return `${(0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.formatDate)(startDate)} \\u2192 ${(0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.formatDate)(endDate)}`;\n          } else {\n            return element;\n          }\n        }\n        case \"u\": {\n          const userId = decorator[1];\n          const user = (_d = recordMap.notion_user[userId]) == null ? void 0 : _d.value;\n          if (!user) {\n            console.log(\"missing user\", userId);\n            return null;\n          }\n          const name = [user.given_name, user.family_name].filter(Boolean).join(\" \");\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GracefulImage, {\n            className: \"notion-user\",\n            src: mapImageUrl(user.profile_photo, block),\n            alt: name\n          });\n        }\n        case \"eoi\": {\n          const blockId = decorator[1];\n          const externalObjectInstance = (_e = recordMap.block[blockId]) == null ? void 0 : _e.value;\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EOI, {\n            block: externalObjectInstance,\n            inline: true\n          });\n        }\n        default:\n          if (true) {\n            console.log(\"unsupported text format\", decorator);\n          }\n          return element;\n      }\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, text));\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n      key: index\n    }, formatted);\n  }));\n};\n\n// src/icons/copy.tsx\n\nfunction SvgCopy(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n    fill: \"currentColor\",\n    viewBox: \"0 0 16 16\",\n    width: \"1em\",\n    version: \"1.1\"\n  }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n  }));\n}\nvar copy_default = SvgCopy;\n\n// src/third-party/code.tsx\n\n\n\n\n\n\n\n\n\nvar Code = ({ block, defaultLanguage = \"typescript\", className }) => {\n  var _a, _b, _c;\n  const [isCopied, setIsCopied] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const copyTimeout = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const { recordMap } = useNotionContext();\n  const content = (0,notion_utils__WEBPACK_IMPORTED_MODULE_4__.getBlockTitle)(block, recordMap);\n  const language = (((_c = (_b = (_a = block.properties) == null ? void 0 : _a.language) == null ? void 0 : _b[0]) == null ? void 0 : _c[0]) || defaultLanguage).toLowerCase();\n  const caption = block.properties.caption;\n  const codeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (codeRef.current) {\n      try {\n        (0,prismjs__WEBPACK_IMPORTED_MODULE_1__.highlightElement)(codeRef.current);\n      } catch (err) {\n        console.warn(\"prismjs highlight error\", err);\n      }\n    }\n  }, [codeRef]);\n  const onClickCopyToClipboard = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    (0, import_clipboard_copy.default)(content);\n    setIsCopied(true);\n    if (copyTimeout.current) {\n      clearTimeout(copyTimeout.current);\n      copyTimeout.current = null;\n    }\n    copyTimeout.current = setTimeout(() => {\n      setIsCopied(false);\n    }, 1200);\n  }, [content, copyTimeout]);\n  const copyButton = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-code-copy-button\",\n    onClick: onClickCopyToClipboard\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(copy_default, null));\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pre\", {\n    className: cs(\"notion-code\", className)\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-code-copy\"\n  }, copyButton, isCopied && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"notion-code-copy-tooltip\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, isCopied ? \"Copied\" : \"Copy\"))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n    className: `language-${language}`,\n    ref: codeRef\n  }, content)), caption && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"figcaption\", {\n    className: \"notion-asset-caption\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Text, {\n    value: caption,\n    block\n  })));\n};\n\n/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3Qtbm90aW9uLXgvYnVpbGQvdGhpcmQtcGFydHkvY29kZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGFBQWE7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HLHFGQUFxRiw4QkFBOEI7QUFDdE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDaUM7QUFDVTtBQUNvQjs7QUFFL0Q7QUFDaUM7QUFDMEI7O0FBRTNEO0FBQ2lDOztBQUVqQztBQUMrQjtBQUNVO0FBQ3pDO0FBQ0EsU0FBUyx1Q0FBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwy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cUI7QUFDNUc7QUFDQSxHQUFHLGtCQUFrQixnREFBcUI7QUFDMUM7QUFDQSxHQUFHLDBDQUEwQyxnREFBcUI7QUFDbEU7QUFDQSxHQUFHLGtCQUFrQixnREFBcUIsK0RBQStELGdEQUFxQjtBQUM5SCwyQkFBMkIsU0FBUztBQUNwQztBQUNBLEdBQUcsd0NBQXdDLGdEQUFxQjtBQUNoRTtBQUNBLEdBQUcsa0JBQWtCLGdEQUFxQjtBQUMxQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3Qtbm90aW9uLXgvYnVpbGQvdGhpcmQtcGFydHkvY29kZS5qcz9kNjZlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlKCkge1xuICByZXR1cm4gbW9kIHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QpLCBtb2QuZXhwb3J0cztcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LCBtb2QpKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy9jbGlwYm9hcmQtY29weS9pbmRleC5qc1xudmFyIHJlcXVpcmVfY2xpcGJvYXJkX2NvcHkgPSBfX2NvbW1vbkpTKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvY2xpcGJvYXJkLWNvcHkvaW5kZXguanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGNsaXBib2FyZENvcHk7XG4gICAgZnVuY3Rpb24gbWFrZUVycm9yKCkge1xuICAgICAgcmV0dXJuIG5ldyBET01FeGNlcHRpb24oXCJUaGUgcmVxdWVzdCBpcyBub3QgYWxsb3dlZFwiLCBcIk5vdEFsbG93ZWRFcnJvclwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29weUNsaXBib2FyZEFwaSh0ZXh0KSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBpZiAoIW5hdmlnYXRvci5jbGlwYm9hcmQpIHtcbiAgICAgICAgICB0aHJvdyBtYWtlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29weUV4ZWNDb21tYW5kKHRleHQpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgIHNwYW4uc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlXCI7XG4gICAgICAgIHNwYW4uc3R5bGUud2Via2l0VXNlclNlbGVjdCA9IFwiYXV0b1wiO1xuICAgICAgICBzcGFuLnN0eWxlLnVzZXJTZWxlY3QgPSBcImFsbFwiO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShzcGFuKTtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzdWNjZXNzID0gd2luZG93LmRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3Bhbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdWNjZXNzKVxuICAgICAgICAgIHRocm93IG1ha2VFcnJvcigpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsaXBib2FyZENvcHkodGV4dCkge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB5aWVsZCBjb3B5Q2xpcGJvYXJkQXBpKHRleHQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgeWllbGQgY29weUV4ZWNDb21tYW5kKHRleHQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycjIpIHtcbiAgICAgICAgICAgIHRocm93IGVycjIgfHwgZXJyIHx8IG1ha2VFcnJvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC50aHJvdHRsZS9pbmRleC5qc1xudmFyIHJlcXVpcmVfbG9kYXNoID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC50aHJvdHRsZS9pbmRleC5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgIHZhciBGVU5DX0VSUk9SX1RFWFQgPSBcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIjtcbiAgICB2YXIgTkFOID0gMCAvIDA7XG4gICAgdmFyIHN5bWJvbFRhZyA9IFwiW29iamVjdCBTeW1ib2xdXCI7XG4gICAgdmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuICAgIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG4gICAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG4gICAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG4gICAgdmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuICAgIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSBcIm9iamVjdFwiICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuICAgIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09IFwib2JqZWN0XCIgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG4gICAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgICB2YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuICAgIHZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuICAgIHZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcbiAgICB2YXIgbmF0aXZlTWluID0gTWF0aC5taW47XG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncywgbGFzdFRoaXMsIG1heFdhaXQsIHJlc3VsdCwgdGltZXJJZCwgbGFzdENhbGxUaW1lLCBsYXN0SW52b2tlVGltZSA9IDAsIGxlYWRpbmcgPSBmYWxzZSwgbWF4aW5nID0gZmFsc2UsIHRyYWlsaW5nID0gdHJ1ZTtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSBcIm1heFdhaXRcIiBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9IFwidHJhaWxpbmdcIiBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncywgdGhpc0FyZyA9IGxhc3RUaGlzO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdm9pZCAwO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsIHJlc3VsdDIgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG4gICAgICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0MiwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0MjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG4gICAgICAgIHJldHVybiBsYXN0Q2FsbFRpbWUgPT09IHZvaWQgMCB8fCB0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0IHx8IHRpbWVTaW5jZUxhc3RDYWxsIDwgMCB8fCBtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdm9pZCAwO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB2b2lkIDAgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLCBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRocm90dGxlMihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsIHRyYWlsaW5nID0gdHJ1ZTtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSBcImxlYWRpbmdcIiBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9IFwidHJhaWxpbmdcIiBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICBcImxlYWRpbmdcIjogbGVhZGluZyxcbiAgICAgICAgXCJtYXhXYWl0XCI6IHdhaXQsXG4gICAgICAgIFwidHJhaWxpbmdcIjogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSBcIm9iamVjdFwiIHx8IHR5cGUgPT0gXCJmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJzeW1ib2xcIiB8fCBpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZztcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09IFwiZnVuY3Rpb25cIiA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IG90aGVyICsgXCJcIiA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgXCJcIik7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOCkgOiByZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlMjtcbiAgfVxufSk7XG5cbi8vIHNyYy90aGlyZC1wYXJ0eS9jb2RlLnRzeFxudmFyIGltcG9ydF9jbGlwYm9hcmRfY29weSA9IF9fdG9FU00ocmVxdWlyZV9jbGlwYm9hcmRfY29weSgpLCAxKTtcbmltcG9ydCAqIGFzIFJlYWN0MjIgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBoaWdobGlnaHRFbGVtZW50IH0gZnJvbSBcInByaXNtanNcIjtcbmltcG9ydCB7IGdldEJsb2NrVGl0bGUgYXMgZ2V0QmxvY2tUaXRsZTQgfSBmcm9tIFwibm90aW9uLXV0aWxzXCI7XG5cbi8vIHNyYy9jb21wb25lbnRzL3RleHQudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDIwIGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcGFyc2VQYWdlSWQgYXMgcGFyc2VQYWdlSWQyIH0gZnJvbSBcIm5vdGlvbi11dGlsc1wiO1xuXG4vLyBzcmMvY29udGV4dC50c3hcbmltcG9ydCAqIGFzIFJlYWN0MTkgZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy9uZXh0LnRzeFxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgaXNFcXVhbCBmcm9tIFwicmVhY3QtZmFzdC1jb21wYXJlXCI7XG52YXIgd3JhcE5leHRJbWFnZSA9IChOZXh0SW1hZ2UpID0+IHtcbiAgcmV0dXJuIFJlYWN0Lm1lbW8oZnVuY3Rpb24gUmVhY3ROb3Rpb25YTmV4dEltYWdlKF9hKSB7XG4gICAgdmFyIF9iID0gX2EsIHtcbiAgICAgIHNyYyxcbiAgICAgIGFsdCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgc3R5bGUsXG4gICAgICBsYXlvdXRcbiAgICB9ID0gX2IsIHJlc3QgPSBfX29ialJlc3QoX2IsIFtcbiAgICAgIFwic3JjXCIsXG4gICAgICBcImFsdFwiLFxuICAgICAgXCJ3aWR0aFwiLFxuICAgICAgXCJoZWlnaHRcIixcbiAgICAgIFwiY2xhc3NOYW1lXCIsXG4gICAgICBcInN0eWxlXCIsXG4gICAgICBcImxheW91dFwiXG4gICAgXSk7XG4gICAgaWYgKCFsYXlvdXQpIHtcbiAgICAgIGxheW91dCA9IHdpZHRoICYmIGhlaWdodCA/IFwiaW50cmluc2ljXCIgOiBcImZpbGxcIjtcbiAgICB9XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KE5leHRJbWFnZSwgX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgc3JjLFxuICAgICAgYWx0LFxuICAgICAgd2lkdGg6IGxheW91dCA9PT0gXCJpbnRyaW5zaWNcIiAmJiB3aWR0aCxcbiAgICAgIGhlaWdodDogbGF5b3V0ID09PSBcImludHJpbnNpY1wiICYmIGhlaWdodCxcbiAgICAgIG9iamVjdEZpdDogc3R5bGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0eWxlLm9iamVjdEZpdCxcbiAgICAgIG9iamVjdFBvc2l0aW9uOiBzdHlsZSA9PSBudWxsID8gdm9pZCAwIDogc3R5bGUub2JqZWN0UG9zaXRpb24sXG4gICAgICBsYXlvdXRcbiAgICB9LCByZXN0KSk7XG4gIH0sIGlzRXF1YWwpO1xufTtcbnZhciB3cmFwTmV4dExpbmsgPSAoTmV4dExpbmspID0+IGZ1bmN0aW9uIFJlYWN0Tm90aW9uWE5leHRMaW5rKF9hKSB7XG4gIHZhciBfYiA9IF9hLCB7XG4gICAgaHJlZixcbiAgICBhcyxcbiAgICBwYXNzSHJlZixcbiAgICBwcmVmZXRjaCxcbiAgICByZXBsYWNlLFxuICAgIHNjcm9sbCxcbiAgICBzaGFsbG93LFxuICAgIGxvY2FsZVxuICB9ID0gX2IsIGxpbmtQcm9wcyA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwiaHJlZlwiLFxuICAgIFwiYXNcIixcbiAgICBcInBhc3NIcmVmXCIsXG4gICAgXCJwcmVmZXRjaFwiLFxuICAgIFwicmVwbGFjZVwiLFxuICAgIFwic2Nyb2xsXCIsXG4gICAgXCJzaGFsbG93XCIsXG4gICAgXCJsb2NhbGVcIlxuICBdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KE5leHRMaW5rLCB7XG4gICAgaHJlZixcbiAgICBhcyxcbiAgICBwYXNzSHJlZixcbiAgICBwcmVmZXRjaCxcbiAgICByZXBsYWNlLFxuICAgIHNjcm9sbCxcbiAgICBzaGFsbG93LFxuICAgIGxvY2FsZVxuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX19zcHJlYWRWYWx1ZXMoe30sIGxpbmtQcm9wcykpKTtcbn07XG5cbi8vIHNyYy9jb21wb25lbnRzL2Fzc2V0LXdyYXBwZXIudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDE2IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvY29tcG9uZW50cy9hc3NldC50c3hcbmltcG9ydCAqIGFzIFJlYWN0NCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldFRleHRDb250ZW50IH0gZnJvbSBcIm5vdGlvbi11dGlsc1wiO1xuXG4vLyBzcmMvY29tcG9uZW50cy9sYXp5LWltYWdlLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QyIGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGF6eUltYWdlRnVsbCwgSW1hZ2VTdGF0ZSB9IGZyb20gXCJyZWFjdC1sYXp5LWltYWdlc1wiO1xuaW1wb3J0IHsgbm9ybWFsaXplVXJsIH0gZnJvbSBcIm5vdGlvbi11dGlsc1wiO1xuXG4vLyBzcmMvdXRpbHMudHNcbmltcG9ydCB7IGlzVXJsLCBmb3JtYXREYXRlLCBmb3JtYXROb3Rpb25EYXRlVGltZSB9IGZyb20gXCJub3Rpb24tdXRpbHNcIjtcbnZhciBkZWZhdWx0TWFwSW1hZ2VVcmwgPSAodXJsLCBibG9jaykgPT4ge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICh1cmwuc3RhcnRzV2l0aChcImRhdGE6XCIpKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBpZiAodXJsLnN0YXJ0c1dpdGgoXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb21cIikpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgdSA9IG5ldyBVUkwodXJsKTtcbiAgICBpZiAodS5wYXRobmFtZS5zdGFydHNXaXRoKFwiL3NlY3VyZS5ub3Rpb24tc3RhdGljLmNvbVwiKSAmJiB1Lmhvc3RuYW1lLmVuZHNXaXRoKFwiLmFtYXpvbmF3cy5jb21cIikpIHtcbiAgICAgIGlmICh1LnNlYXJjaFBhcmFtcy5oYXMoXCJYLUFtei1DcmVkZW50aWFsXCIpICYmIHUuc2VhcmNoUGFyYW1zLmhhcyhcIlgtQW16LVNpZ25hdHVyZVwiKSAmJiB1LnNlYXJjaFBhcmFtcy5oYXMoXCJYLUFtei1BbGdvcml0aG1cIikpIHtcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICBpZiAodXJsLnN0YXJ0c1dpdGgoXCIvaW1hZ2VzXCIpKSB7XG4gICAgdXJsID0gYGh0dHBzOi8vd3d3Lm5vdGlvbi5zbyR7dXJsfWA7XG4gIH1cbiAgdXJsID0gYGh0dHBzOi8vd3d3Lm5vdGlvbi5zbyR7dXJsLnN0YXJ0c1dpdGgoXCIvaW1hZ2VcIikgPyB1cmwgOiBgL2ltYWdlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHVybCl9YH1gO1xuICBjb25zdCBub3Rpb25JbWFnZVVybFYyID0gbmV3IFVSTCh1cmwpO1xuICBsZXQgdGFibGUgPSBibG9jay5wYXJlbnRfdGFibGUgPT09IFwic3BhY2VcIiA/IFwiYmxvY2tcIiA6IGJsb2NrLnBhcmVudF90YWJsZTtcbiAgaWYgKHRhYmxlID09PSBcImNvbGxlY3Rpb25cIikge1xuICAgIHRhYmxlID0gXCJibG9ja1wiO1xuICB9XG4gIG5vdGlvbkltYWdlVXJsVjIuc2VhcmNoUGFyYW1zLnNldChcInRhYmxlXCIsIHRhYmxlKTtcbiAgbm90aW9uSW1hZ2VVcmxWMi5zZWFyY2hQYXJhbXMuc2V0KFwiaWRcIiwgYmxvY2suaWQpO1xuICBub3Rpb25JbWFnZVVybFYyLnNlYXJjaFBhcmFtcy5zZXQoXCJjYWNoZVwiLCBcInYyXCIpO1xuICB1cmwgPSBub3Rpb25JbWFnZVVybFYyLnRvU3RyaW5nKCk7XG4gIHJldHVybiB1cmw7XG59O1xudmFyIGRlZmF1bHRNYXBQYWdlVXJsID0gKHJvb3RQYWdlSWQpID0+IChwYWdlSWQpID0+IHtcbiAgcGFnZUlkID0gKHBhZ2VJZCB8fCBcIlwiKS5yZXBsYWNlKC8tL2csIFwiXCIpO1xuICBpZiAocm9vdFBhZ2VJZCAmJiBwYWdlSWQgPT09IHJvb3RQYWdlSWQpIHtcbiAgICByZXR1cm4gXCIvXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGAvJHtwYWdlSWR9YDtcbiAgfVxufTtcbnZhciBjcyA9ICguLi5jbGFzc2VzKSA9PiBjbGFzc2VzLmZpbHRlcigoYSkgPT4gISFhKS5qb2luKFwiIFwiKTtcbnZhciBnZXRIYXNoRnJhZ21lbnRWYWx1ZSA9ICh1cmwpID0+IHtcbiAgcmV0dXJuIHVybC5pbmNsdWRlcyhcIiNcIikgPyB1cmwucmVwbGFjZSgvXi4rKCMuKykkLywgXCIkMVwiKSA6IFwiXCI7XG59O1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG52YXIgeW91dHViZURvbWFpbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gIFwieW91dHUuYmVcIixcbiAgXCJ5b3V0dWJlLmNvbVwiLFxuICBcInd3dy55b3V0dWJlLmNvbVwiLFxuICBcInlvdXR1YmUtbm9jb29raWUuY29tXCIsXG4gIFwid3d3LnlvdXR1YmUtbm9jb29raWUuY29tXCJcbl0pO1xudmFyIGdldFlvdXR1YmVJZCA9ICh1cmwpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGhvc3RuYW1lIH0gPSBuZXcgVVJMKHVybCk7XG4gICAgaWYgKCF5b3V0dWJlRG9tYWlucy5oYXMoaG9zdG5hbWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVnRXhwID0gL14uKih5b3V0dVxcLmJlXFwvfHZcXC98dVxcL1xcd1xcL3xlbWJlZFxcL3x3YXRjaFxcP3Y9fCZ2PSkoW14jJj9dKikuKi9pO1xuICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHJlZ0V4cCk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdLmxlbmd0aCA9PSAxMSkge1xuICAgICAgcmV0dXJuIG1hdGNoWzJdO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvbGF6eS1pbWFnZS50c3hcbnZhciBMYXp5SW1hZ2UgPSAoX2EpID0+IHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICBzcmMsXG4gICAgYWx0LFxuICAgIGNsYXNzTmFtZSxcbiAgICBzdHlsZSxcbiAgICB6b29tYWJsZSA9IGZhbHNlLFxuICAgIHByaW9yaXR5ID0gZmFsc2UsXG4gICAgaGVpZ2h0XG4gIH0gPSBfYiwgcmVzdCA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwic3JjXCIsXG4gICAgXCJhbHRcIixcbiAgICBcImNsYXNzTmFtZVwiLFxuICAgIFwic3R5bGVcIixcbiAgICBcInpvb21hYmxlXCIsXG4gICAgXCJwcmlvcml0eVwiLFxuICAgIFwiaGVpZ2h0XCJcbiAgXSk7XG4gIHZhciBfYTIsIF9iMiwgX2M7XG4gIGNvbnN0IHsgcmVjb3JkTWFwLCB6b29tLCBwcmV2aWV3SW1hZ2VzLCBmb3JjZUN1c3RvbUltYWdlcywgY29tcG9uZW50cyB9ID0gdXNlTm90aW9uQ29udGV4dCgpO1xuICBjb25zdCB6b29tUmVmID0gUmVhY3QyLnVzZVJlZih6b29tID8gem9vbS5jbG9uZSgpIDogbnVsbCk7XG4gIGNvbnN0IHByZXZpZXdJbWFnZSA9IHByZXZpZXdJbWFnZXMgPyAoX2MgPSAoX2EyID0gcmVjb3JkTWFwID09IG51bGwgPyB2b2lkIDAgOiByZWNvcmRNYXAucHJldmlld19pbWFnZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYTJbc3JjXSkgIT0gbnVsbCA/IF9jIDogKF9iMiA9IHJlY29yZE1hcCA9PSBudWxsID8gdm9pZCAwIDogcmVjb3JkTWFwLnByZXZpZXdfaW1hZ2VzKSA9PSBudWxsID8gdm9pZCAwIDogX2IyW25vcm1hbGl6ZVVybChzcmMpXSA6IG51bGw7XG4gIGNvbnN0IG9uTG9hZCA9IFJlYWN0Mi51c2VDYWxsYmFjaygoZSkgPT4ge1xuICAgIGlmICh6b29tYWJsZSAmJiAoZS50YXJnZXQuc3JjIHx8IGUudGFyZ2V0LnNyY3NldCkpIHtcbiAgICAgIGlmICh6b29tUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgO1xuICAgICAgICB6b29tUmVmLmN1cnJlbnQuYXR0YWNoKGUudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFt6b29tUmVmLCB6b29tYWJsZV0pO1xuICBjb25zdCBhdHRhY2hab29tID0gUmVhY3QyLnVzZUNhbGxiYWNrKChpbWFnZSkgPT4ge1xuICAgIGlmICh6b29tUmVmLmN1cnJlbnQgJiYgaW1hZ2UpIHtcbiAgICAgIDtcbiAgICAgIHpvb21SZWYuY3VycmVudC5hdHRhY2goaW1hZ2UpO1xuICAgIH1cbiAgfSwgW3pvb21SZWZdKTtcbiAgY29uc3QgYXR0YWNoWm9vbVJlZiA9IFJlYWN0Mi51c2VNZW1vKCgpID0+IHpvb21hYmxlID8gYXR0YWNoWm9vbSA6IHZvaWQgMCwgW3pvb21hYmxlLCBhdHRhY2hab29tXSk7XG4gIGlmIChwcmV2aWV3SW1hZ2UpIHtcbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IHByZXZpZXdJbWFnZS5vcmlnaW5hbEhlaWdodCAvIHByZXZpZXdJbWFnZS5vcmlnaW5hbFdpZHRoO1xuICAgIGlmIChjb21wb25lbnRzLkltYWdlKSB7XG4gICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0Mi5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHMuSW1hZ2UsIHtcbiAgICAgICAgc3JjLFxuICAgICAgICBhbHQsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHdpZHRoOiBwcmV2aWV3SW1hZ2Uub3JpZ2luYWxXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBwcmV2aWV3SW1hZ2Uub3JpZ2luYWxIZWlnaHQsXG4gICAgICAgIGJsdXJEYXRhVVJMOiBwcmV2aWV3SW1hZ2UuZGF0YVVSSUJhc2U2NCxcbiAgICAgICAgcGxhY2Vob2xkZXI6IFwiYmx1clwiLFxuICAgICAgICBwcmlvcml0eSxcbiAgICAgICAgb25Mb2FkXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIuY3JlYXRlRWxlbWVudChMYXp5SW1hZ2VGdWxsLCBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIHNyY1xuICAgIH0sIHJlc3QpLCB7XG4gICAgICBleHBlcmltZW50YWxEZWNvZGU6IHRydWVcbiAgICB9KSwgKHsgaW1hZ2VTdGF0ZSwgcmVmIH0pID0+IHtcbiAgICAgIGNvbnN0IGlzTG9hZGVkID0gaW1hZ2VTdGF0ZSA9PT0gSW1hZ2VTdGF0ZS5Mb2FkU3VjY2VzcztcbiAgICAgIGNvbnN0IHdyYXBwZXJTdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICB9O1xuICAgICAgY29uc3QgaW1nU3R5bGUgPSB7fTtcbiAgICAgIGlmIChoZWlnaHQpIHtcbiAgICAgICAgd3JhcHBlclN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltZ1N0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICB3cmFwcGVyU3R5bGUucGFkZGluZ0JvdHRvbSA9IGAke2FzcGVjdFJhdGlvICogMTAwfSVgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY3MoXCJsYXp5LWltYWdlLXdyYXBwZXJcIiwgaXNMb2FkZWQgJiYgXCJsYXp5LWltYWdlLWxvYWRlZFwiLCBjbGFzc05hbWUpLFxuICAgICAgICBzdHlsZTogd3JhcHBlclN0eWxlXG4gICAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QyLmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibGF6eS1pbWFnZS1wcmV2aWV3XCIsXG4gICAgICAgIHNyYzogcHJldmlld0ltYWdlLmRhdGFVUklCYXNlNjQsXG4gICAgICAgIGFsdCxcbiAgICAgICAgcmVmLFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgZGVjb2Rpbmc6IFwiYXN5bmNcIlxuICAgICAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYXp5LWltYWdlLXJlYWxcIixcbiAgICAgICAgc3JjLFxuICAgICAgICBhbHQsXG4gICAgICAgIHJlZjogYXR0YWNoWm9vbVJlZixcbiAgICAgICAgc3R5bGU6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBzdHlsZSksIGltZ1N0eWxlKSxcbiAgICAgICAgd2lkdGg6IHByZXZpZXdJbWFnZS5vcmlnaW5hbFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IHByZXZpZXdJbWFnZS5vcmlnaW5hbEhlaWdodCxcbiAgICAgICAgZGVjb2Rpbmc6IFwiYXN5bmNcIixcbiAgICAgICAgbG9hZGluZzogXCJsYXp5XCJcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoY29tcG9uZW50cy5JbWFnZSAmJiBmb3JjZUN1c3RvbUltYWdlcykge1xuICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLkltYWdlLCB7XG4gICAgICAgIHNyYyxcbiAgICAgICAgYWx0LFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgfHwgbnVsbCxcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIG9uTG9hZFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyLmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgc3R5bGUsXG4gICAgICBzcmMsXG4gICAgICBhbHQsXG4gICAgICByZWY6IGF0dGFjaFpvb21SZWYsXG4gICAgICBsb2FkaW5nOiBcImxhenlcIixcbiAgICAgIGRlY29kaW5nOiBcImFzeW5jXCJcbiAgICB9LCByZXN0KSk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21wb25lbnRzL2xpdGUteW91dHViZS1lbWJlZC50c3hcbmltcG9ydCAqIGFzIFJlYWN0MyBmcm9tIFwicmVhY3RcIjtcbnZhciBxcyA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHBhcmFtcykubWFwKChrZXkpID0+IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSl9YCkuam9pbihcIiZcIik7XG59O1xudmFyIExpdGVZb3VUdWJlRW1iZWQgPSAoe1xuICBpZCxcbiAgZGVmYXVsdFBsYXkgPSBmYWxzZSxcbiAgbXV0ZSA9IGZhbHNlLFxuICBsYXp5SW1hZ2UgPSBmYWxzZSxcbiAgaWZyYW1lVGl0bGUgPSBcIllvdVR1YmUgdmlkZW9cIixcbiAgYWx0ID0gXCJWaWRlbyBwcmV2aWV3XCIsXG4gIHBhcmFtcyA9IHt9LFxuICBhZExpbmtzUHJlY29ubmVjdCA9IHRydWUsXG4gIHN0eWxlLFxuICBjbGFzc05hbWVcbn0pID0+IHtcbiAgY29uc3QgbXV0ZVBhcmFtID0gbXV0ZSB8fCBkZWZhdWx0UGxheSA/IFwiMVwiIDogXCIwXCI7XG4gIGNvbnN0IHF1ZXJ5U3RyaW5nID0gUmVhY3QzLnVzZU1lbW8oKCkgPT4gcXMoX19zcHJlYWRWYWx1ZXMoeyBhdXRvcGxheTogXCIxXCIsIG11dGU6IG11dGVQYXJhbSB9LCBwYXJhbXMpKSwgW211dGVQYXJhbSwgcGFyYW1zXSk7XG4gIGNvbnN0IHJlc29sdXRpb24gPSBcImhxZGVmYXVsdFwiO1xuICBjb25zdCBwb3N0ZXJVcmwgPSBgaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8ke2lkfS8ke3Jlc29sdXRpb259LmpwZ2A7XG4gIGNvbnN0IHl0VXJsID0gXCJodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbVwiO1xuICBjb25zdCBpZnJhbWVTcmMgPSBgJHt5dFVybH0vZW1iZWQvJHtpZH0/JHtxdWVyeVN0cmluZ31gO1xuICBjb25zdCBbaXNQcmVjb25uZWN0ZWQsIHNldElzUHJlY29ubmVjdGVkXSA9IFJlYWN0My51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpZnJhbWVJbml0aWFsaXplZCwgc2V0SWZyYW1lSW5pdGlhbGl6ZWRdID0gUmVhY3QzLnVzZVN0YXRlKGRlZmF1bHRQbGF5KTtcbiAgY29uc3QgW2lzSWZyYW1lTG9hZGVkLCBzZXRJc0lmcmFtZUxvYWRlZF0gPSBSZWFjdDMudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCB3YXJtQ29ubmVjdGlvbnMgPSBSZWFjdDMudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChpc1ByZWNvbm5lY3RlZClcbiAgICAgIHJldHVybjtcbiAgICBzZXRJc1ByZWNvbm5lY3RlZCh0cnVlKTtcbiAgfSwgW2lzUHJlY29ubmVjdGVkXSk7XG4gIGNvbnN0IG9uTG9hZElmcmFtZSA9IFJlYWN0My51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGlmcmFtZUluaXRpYWxpemVkKVxuICAgICAgcmV0dXJuO1xuICAgIHNldElmcmFtZUluaXRpYWxpemVkKHRydWUpO1xuICB9LCBbaWZyYW1lSW5pdGlhbGl6ZWRdKTtcbiAgY29uc3Qgb25JZnJhbWVMb2FkZWQgPSBSZWFjdDMudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzSWZyYW1lTG9hZGVkKHRydWUpO1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QzLmNyZWF0ZUVsZW1lbnQoUmVhY3QzLkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QzLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgIGhyZWY6IHBvc3RlclVybCxcbiAgICBhczogXCJpbWFnZVwiXG4gIH0pLCBpc1ByZWNvbm5lY3RlZCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QzLmNyZWF0ZUVsZW1lbnQoUmVhY3QzLkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QzLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICByZWw6IFwicHJlY29ubmVjdFwiLFxuICAgIGhyZWY6IHl0VXJsXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QzLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICByZWw6IFwicHJlY29ubmVjdFwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbVwiXG4gIH0pKSwgaXNQcmVjb25uZWN0ZWQgJiYgYWRMaW5rc1ByZWNvbm5lY3QgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0My5jcmVhdGVFbGVtZW50KFJlYWN0My5GcmFnbWVudCwgbnVsbCwgLyogQF9fUFVSRV9fICovIFJlYWN0My5jcmVhdGVFbGVtZW50KFwibGlua1wiLCB7XG4gICAgcmVsOiBcInByZWNvbm5lY3RcIixcbiAgICBocmVmOiBcImh0dHBzOi8vc3RhdGljLmRvdWJsZWNsaWNrLm5ldFwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QzLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICByZWw6IFwicHJlY29ubmVjdFwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly9nb29nbGVhZHMuZy5kb3VibGVjbGljay5uZXRcIlxuICB9KSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDMuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgb25DbGljazogb25Mb2FkSWZyYW1lLFxuICAgIG9uUG9pbnRlck92ZXI6IHdhcm1Db25uZWN0aW9ucyxcbiAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLXl0LWxpdGVcIiwgaXNJZnJhbWVMb2FkZWQgJiYgXCJub3Rpb24teXQtbG9hZGVkXCIsIGlmcmFtZUluaXRpYWxpemVkICYmIFwibm90aW9uLXl0LWluaXRpYWxpemVkXCIsIGNsYXNzTmFtZSksXG4gICAgc3R5bGVcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0My5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHtcbiAgICBzcmM6IHBvc3RlclVybCxcbiAgICBjbGFzc05hbWU6IFwibm90aW9uLXl0LXRodW1ibmFpbFwiLFxuICAgIGxvYWRpbmc6IGxhenlJbWFnZSA/IFwibGF6eVwiIDogdm9pZCAwLFxuICAgIGFsdFxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0My5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwibm90aW9uLXl0LXBsYXlidG5cIlxuICB9KSwgaWZyYW1lSW5pdGlhbGl6ZWQgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0My5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIsIHtcbiAgICB3aWR0aDogXCI1NjBcIixcbiAgICBoZWlnaHQ6IFwiMzE1XCIsXG4gICAgZnJhbWVCb3JkZXI6IFwiMFwiLFxuICAgIGFsbG93OiBcImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlXCIsXG4gICAgYWxsb3dGdWxsU2NyZWVuOiB0cnVlLFxuICAgIHRpdGxlOiBpZnJhbWVUaXRsZSxcbiAgICBzcmM6IGlmcmFtZVNyYyxcbiAgICBvbkxvYWQ6IG9uSWZyYW1lTG9hZGVkXG4gIH0pKSk7XG59O1xuXG4vLyBzcmMvY29tcG9uZW50cy9hc3NldC50c3hcbnZhciBpc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCI7XG52YXIgc3VwcG9ydGVkQXNzZXRUeXBlcyA9IFtcbiAgXCJ2aWRlb1wiLFxuICBcImltYWdlXCIsXG4gIFwiZW1iZWRcIixcbiAgXCJmaWdtYVwiLFxuICBcInR5cGVmb3JtXCIsXG4gIFwiZXhjYWxpZHJhd1wiLFxuICBcIm1hcHNcIixcbiAgXCJ0d2VldFwiLFxuICBcInBkZlwiLFxuICBcImdpc3RcIixcbiAgXCJjb2RlcGVuXCIsXG4gIFwiZHJpdmVcIlxuXTtcbnZhciBBc3NldCA9ICh7IGJsb2NrLCB6b29tYWJsZSA9IHRydWUsIGNoaWxkcmVuIH0pID0+IHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gIGNvbnN0IHsgcmVjb3JkTWFwLCBtYXBJbWFnZVVybCwgY29tcG9uZW50cyB9ID0gdXNlTm90aW9uQ29udGV4dCgpO1xuICBpZiAoIWJsb2NrIHx8ICFzdXBwb3J0ZWRBc3NldFR5cGVzLmluY2x1ZGVzKGJsb2NrLnR5cGUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3Qgc3R5bGUgPSB7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBhbGlnblNlbGY6IFwiY2VudGVyXCIsXG4gICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgIG1heFdpZHRoOiBcIjEwMCVcIixcbiAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiXG4gIH07XG4gIGNvbnN0IGFzc2V0U3R5bGUgPSB7fTtcbiAgaWYgKGJsb2NrLmZvcm1hdCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGJsb2NrX2FzcGVjdF9yYXRpbyxcbiAgICAgIGJsb2NrX2hlaWdodCxcbiAgICAgIGJsb2NrX3dpZHRoLFxuICAgICAgYmxvY2tfZnVsbF93aWR0aCxcbiAgICAgIGJsb2NrX3BhZ2Vfd2lkdGgsXG4gICAgICBibG9ja19wcmVzZXJ2ZV9zY2FsZVxuICAgIH0gPSBibG9jay5mb3JtYXQ7XG4gICAgaWYgKGJsb2NrX2Z1bGxfd2lkdGggfHwgYmxvY2tfcGFnZV93aWR0aCkge1xuICAgICAgaWYgKGJsb2NrX2Z1bGxfd2lkdGgpIHtcbiAgICAgICAgc3R5bGUud2lkdGggPSBcIjEwMHZ3XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgfVxuICAgICAgaWYgKGJsb2NrLnR5cGUgPT09IFwidmlkZW9cIikge1xuICAgICAgICBpZiAoYmxvY2tfaGVpZ2h0KSB7XG4gICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gYmxvY2tfaGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKGJsb2NrX2FzcGVjdF9yYXRpbykge1xuICAgICAgICAgIHN0eWxlLnBhZGRpbmdCb3R0b20gPSBgJHtibG9ja19hc3BlY3RfcmF0aW8gKiAxMDB9JWA7XG4gICAgICAgIH0gZWxzZSBpZiAoYmxvY2tfcHJlc2VydmVfc2NhbGUpIHtcbiAgICAgICAgICBzdHlsZS5vYmplY3RGaXQgPSBcImNvbnRhaW5cIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChibG9ja19hc3BlY3RfcmF0aW8gJiYgYmxvY2sudHlwZSAhPT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIHN0eWxlLnBhZGRpbmdCb3R0b20gPSBgJHtibG9ja19hc3BlY3RfcmF0aW8gKiAxMDB9JWA7XG4gICAgICB9IGVsc2UgaWYgKGJsb2NrX2hlaWdodCkge1xuICAgICAgICBzdHlsZS5oZWlnaHQgPSBibG9ja19oZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKGJsb2NrX3ByZXNlcnZlX3NjYWxlKSB7XG4gICAgICAgIGlmIChibG9jay50eXBlID09PSBcImltYWdlXCIpIHtcbiAgICAgICAgICBzdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZS5wYWRkaW5nQm90dG9tID0gXCI3NSVcIjtcbiAgICAgICAgICBzdHlsZS5taW5IZWlnaHQgPSAxMDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGJsb2NrX3dpZHRoKSB7XG4gICAgICAgIHN0eWxlLndpZHRoID0gYmxvY2tfd2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAoYmxvY2tfcHJlc2VydmVfc2NhbGUgJiYgYmxvY2sudHlwZSAhPT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIHN0eWxlLnBhZGRpbmdCb3R0b20gPSBcIjUwJVwiO1xuICAgICAgICBzdHlsZS5taW5IZWlnaHQgPSAxMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYmxvY2tfaGVpZ2h0ICYmIGJsb2NrLnR5cGUgIT09IFwiaW1hZ2VcIikge1xuICAgICAgICAgIHN0eWxlLmhlaWdodCA9IGJsb2NrX2hlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmxvY2sudHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICBhc3NldFN0eWxlLm9iamVjdEZpdCA9IFwiY292ZXJcIjtcbiAgICB9IGVsc2UgaWYgKGJsb2NrX3ByZXNlcnZlX3NjYWxlKSB7XG4gICAgICBhc3NldFN0eWxlLm9iamVjdEZpdCA9IFwiY29udGFpblwiO1xuICAgIH1cbiAgfVxuICBjb25zdCBzb3VyY2UgPSAoKF9hID0gcmVjb3JkTWFwLnNpZ25lZF91cmxzKSA9PSBudWxsID8gdm9pZCAwIDogX2FbYmxvY2suaWRdKSB8fCAoKF9kID0gKF9jID0gKF9iID0gYmxvY2sucHJvcGVydGllcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnNvdXJjZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2RbMF0pO1xuICBsZXQgY29udGVudCA9IG51bGw7XG4gIGlmICghc291cmNlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGJsb2NrLnR5cGUgPT09IFwidHdlZXRcIikge1xuICAgIGNvbnN0IHNyYyA9IHNvdXJjZTtcbiAgICBpZiAoIXNyYylcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGlkID0gc3JjLnNwbGl0KFwiP1wiKVswXS5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgaWYgKCFpZClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnRlbnQgPSAvKiBAX19QVVJFX18gKi8gUmVhY3Q0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgc3R5bGU6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGFzc2V0U3R5bGUpLCB7XG4gICAgICAgIG1heFdpZHRoOiA0MjAsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWFyZ2luTGVmdDogXCJhdXRvXCIsXG4gICAgICAgIG1hcmdpblJpZ2h0OiBcImF1dG9cIlxuICAgICAgfSlcbiAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50cy5Ud2VldCwge1xuICAgICAgaWRcbiAgICB9KSk7XG4gIH0gZWxzZSBpZiAoYmxvY2sudHlwZSA9PT0gXCJwZGZcIikge1xuICAgIHN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XG4gICAgc3R5bGUuYmFja2dyb3VuZCA9IFwicmdiKDIyNiwgMjI2LCAyMjYpXCI7XG4gICAgaWYgKCFzdHlsZS5wYWRkaW5nKSB7XG4gICAgICBzdHlsZS5wYWRkaW5nID0gXCI4cHggMTZweFwiO1xuICAgIH1cbiAgICBpZiAoIWlzU2VydmVyKSB7XG4gICAgICBjb250ZW50ID0gLyogQF9fUFVSRV9fICovIFJlYWN0NC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHMuUGRmLCB7XG4gICAgICAgIGZpbGU6IHNvdXJjZVxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGJsb2NrLnR5cGUgPT09IFwiZW1iZWRcIiB8fCBibG9jay50eXBlID09PSBcInZpZGVvXCIgfHwgYmxvY2sudHlwZSA9PT0gXCJmaWdtYVwiIHx8IGJsb2NrLnR5cGUgPT09IFwidHlwZWZvcm1cIiB8fCBibG9jay50eXBlID09PSBcImdpc3RcIiB8fCBibG9jay50eXBlID09PSBcIm1hcHNcIiB8fCBibG9jay50eXBlID09PSBcImV4Y2FsaWRyYXdcIiB8fCBibG9jay50eXBlID09PSBcImNvZGVwZW5cIiB8fCBibG9jay50eXBlID09PSBcImRyaXZlXCIpIHtcbiAgICBpZiAoYmxvY2sudHlwZSA9PT0gXCJ2aWRlb1wiICYmIHNvdXJjZSAmJiBzb3VyY2UuaW5kZXhPZihcInlvdXR1YmVcIikgPCAwICYmIHNvdXJjZS5pbmRleE9mKFwieW91dHUuYmVcIikgPCAwICYmIHNvdXJjZS5pbmRleE9mKFwidmltZW9cIikgPCAwICYmIHNvdXJjZS5pbmRleE9mKFwid2lzdGlhXCIpIDwgMCAmJiBzb3VyY2UuaW5kZXhPZihcImxvb21cIikgPCAwICYmIHNvdXJjZS5pbmRleE9mKFwidmlkZW9hc2tcIikgPCAwICYmIHNvdXJjZS5pbmRleE9mKFwiZ2V0Y2xvdWRhcHBcIikgPCAwKSB7XG4gICAgICBzdHlsZS5wYWRkaW5nQm90dG9tID0gdm9pZCAwO1xuICAgICAgY29udGVudCA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDQuY3JlYXRlRWxlbWVudChcInZpZGVvXCIsIHtcbiAgICAgICAgcGxheXNJbmxpbmU6IHRydWUsXG4gICAgICAgIGNvbnRyb2xzOiB0cnVlLFxuICAgICAgICBwcmVsb2FkOiBcIm1ldGFkYXRhXCIsXG4gICAgICAgIHN0eWxlOiBhc3NldFN0eWxlLFxuICAgICAgICBzcmM6IHNvdXJjZSxcbiAgICAgICAgdGl0bGU6IGJsb2NrLnR5cGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc3JjID0gKChfZSA9IGJsb2NrLmZvcm1hdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLmRpc3BsYXlfc291cmNlKSB8fCBzb3VyY2U7XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGNvbnN0IHlvdXR1YmVWaWRlb0lkID0gYmxvY2sudHlwZSA9PT0gXCJ2aWRlb1wiID8gZ2V0WW91dHViZUlkKHNyYykgOiBudWxsO1xuICAgICAgICBpZiAoeW91dHViZVZpZGVvSWQpIHtcbiAgICAgICAgICBjb250ZW50ID0gLyogQF9fUFVSRV9fICovIFJlYWN0NC5jcmVhdGVFbGVtZW50KExpdGVZb3VUdWJlRW1iZWQsIHtcbiAgICAgICAgICAgIGlkOiB5b3V0dWJlVmlkZW9JZCxcbiAgICAgICAgICAgIHN0eWxlOiBhc3NldFN0eWxlLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1hc3NldC1vYmplY3QtZml0XCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChibG9jay50eXBlID09PSBcImdpc3RcIikge1xuICAgICAgICAgIGlmICghc3JjLmVuZHNXaXRoKFwiLnBpYmJcIikpIHtcbiAgICAgICAgICAgIHNyYyA9IGAke3NyY30ucGliYmA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2V0U3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICBzdHlsZS5wYWRkaW5nQm90dG9tID0gXCI1MCVcIjtcbiAgICAgICAgICBjb250ZW50ID0gLyogQF9fUFVSRV9fICovIFJlYWN0NC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIsIHtcbiAgICAgICAgICAgIHN0eWxlOiBhc3NldFN0eWxlLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1hc3NldC1vYmplY3QtZml0XCIsXG4gICAgICAgICAgICBzcmMsXG4gICAgICAgICAgICB0aXRsZTogXCJHaXRIdWIgR2lzdFwiLFxuICAgICAgICAgICAgZnJhbWVCb3JkZXI6IFwiMFwiLFxuICAgICAgICAgICAgbG9hZGluZzogXCJsYXp5XCIsXG4gICAgICAgICAgICBzY3JvbGxpbmc6IFwiYXV0b1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGVudCA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwibm90aW9uLWFzc2V0LW9iamVjdC1maXRcIixcbiAgICAgICAgICAgIHN0eWxlOiBhc3NldFN0eWxlLFxuICAgICAgICAgICAgc3JjLFxuICAgICAgICAgICAgdGl0bGU6IGBpZnJhbWUgJHtibG9jay50eXBlfWAsXG4gICAgICAgICAgICBmcmFtZUJvcmRlcjogXCIwXCIsXG4gICAgICAgICAgICBhbGxvd0Z1bGxTY3JlZW46IHRydWUsXG4gICAgICAgICAgICBsb2FkaW5nOiBcImxhenlcIixcbiAgICAgICAgICAgIHNjcm9sbGluZzogXCJhdXRvXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChibG9jay50eXBlID09PSBcImltYWdlXCIpIHtcbiAgICBjb25zdCBzcmMgPSBtYXBJbWFnZVVybChzb3VyY2UsIGJsb2NrKTtcbiAgICBjb25zdCBjYXB0aW9uID0gZ2V0VGV4dENvbnRlbnQoKF9mID0gYmxvY2sucHJvcGVydGllcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmNhcHRpb24pO1xuICAgIGNvbnN0IGFsdCA9IGNhcHRpb24gfHwgXCJub3Rpb24gaW1hZ2VcIjtcbiAgICBjb250ZW50ID0gLyogQF9fUFVSRV9fICovIFJlYWN0NC5jcmVhdGVFbGVtZW50KExhenlJbWFnZSwge1xuICAgICAgc3JjLFxuICAgICAgYWx0LFxuICAgICAgem9vbWFibGUsXG4gICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCxcbiAgICAgIHN0eWxlOiBhc3NldFN0eWxlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDQuY3JlYXRlRWxlbWVudChSZWFjdDQuRnJhZ21lbnQsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgc3R5bGVcbiAgfSwgY29udGVudCwgYmxvY2sudHlwZSA9PT0gXCJpbWFnZVwiICYmIGNoaWxkcmVuKSwgYmxvY2sudHlwZSAhPT0gXCJpbWFnZVwiICYmIGNoaWxkcmVuKTtcbn07XG5cbi8vIHNyYy9jb21wb25lbnRzL3BhZ2UtaWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NiBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldEJsb2NrSWNvbiwgZ2V0QmxvY2tUaXRsZSB9IGZyb20gXCJub3Rpb24tdXRpbHNcIjtcblxuLy8gc3JjL2ljb25zL2RlZmF1bHQtcGFnZS1pY29uLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q1IGZyb20gXCJyZWFjdFwiO1xudmFyIERlZmF1bHRQYWdlSWNvbiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBfYSA9IHByb3BzLCB7IGNsYXNzTmFtZSB9ID0gX2EsIHJlc3QgPSBfX29ialJlc3QoX2EsIFtcImNsYXNzTmFtZVwiXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q1LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7XG4gICAgY2xhc3NOYW1lXG4gIH0sIHJlc3QpLCB7XG4gICAgdmlld0JveDogXCIwIDAgMzAgMzBcIixcbiAgICB3aWR0aDogXCIxNlwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q1LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNiwxSDR2MjhoMjJWMTFMMTYsMXogTTE2LDMuODI4TDIzLjE3MiwxMUgxNlYzLjgyOHogTTI0LDI3SDZWM2g4djEwaDEwVjI3eiBNOCwxN2gxNHYtMkg4VjE3eiBNOCwyMWgxNHYtMkg4VjIxeiBNOCwyNWgxNHYtMkg4VjI1elwiXG4gIH0pKTtcbn07XG5cbi8vIHNyYy9jb21wb25lbnRzL3BhZ2UtaWNvbi50c3hcbnZhciBpc0ljb25CbG9jayA9ICh2YWx1ZSkgPT4ge1xuICByZXR1cm4gdmFsdWUudHlwZSA9PT0gXCJwYWdlXCIgfHwgdmFsdWUudHlwZSA9PT0gXCJjYWxsb3V0XCIgfHwgdmFsdWUudHlwZSA9PT0gXCJjb2xsZWN0aW9uX3ZpZXdcIiB8fCB2YWx1ZS50eXBlID09PSBcImNvbGxlY3Rpb25fdmlld19wYWdlXCI7XG59O1xudmFyIFBhZ2VJY29uSW1wbCA9ICh7XG4gIGJsb2NrLFxuICBjbGFzc05hbWUsXG4gIGlubGluZSA9IHRydWUsXG4gIGhpZGVEZWZhdWx0SWNvbiA9IGZhbHNlLFxuICBkZWZhdWx0SWNvblxufSkgPT4ge1xuICB2YXIgX2E7XG4gIGNvbnN0IHsgbWFwSW1hZ2VVcmwsIHJlY29yZE1hcCB9ID0gdXNlTm90aW9uQ29udGV4dCgpO1xuICBsZXQgaXNJbWFnZSA9IGZhbHNlO1xuICBsZXQgY29udGVudCA9IG51bGw7XG4gIGlmIChpc0ljb25CbG9jayhibG9jaykpIHtcbiAgICBjb25zdCBpY29uID0gKChfYSA9IGdldEJsb2NrSWNvbihibG9jaywgcmVjb3JkTWFwKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnRyaW0oKSkgfHwgZGVmYXVsdEljb247XG4gICAgY29uc3QgdGl0bGUgPSBnZXRCbG9ja1RpdGxlKGJsb2NrLCByZWNvcmRNYXApO1xuICAgIGlmIChpY29uICYmIGlzVXJsKGljb24pKSB7XG4gICAgICBjb25zdCB1cmwgPSBtYXBJbWFnZVVybChpY29uLCBibG9jayk7XG4gICAgICBpc0ltYWdlID0gdHJ1ZTtcbiAgICAgIGNvbnRlbnQgPSAvKiBAX19QVVJFX18gKi8gUmVhY3Q2LmNyZWF0ZUVsZW1lbnQoTGF6eUltYWdlLCB7XG4gICAgICAgIHNyYzogdXJsLFxuICAgICAgICBhbHQ6IHRpdGxlIHx8IFwicGFnZSBpY29uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogY3MoY2xhc3NOYW1lLCBcIm5vdGlvbi1wYWdlLWljb25cIilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWljb24pIHtcbiAgICAgIGlmICghaGlkZURlZmF1bHRJY29uKSB7XG4gICAgICAgIGlzSW1hZ2UgPSB0cnVlO1xuICAgICAgICBjb250ZW50ID0gLyogQF9fUFVSRV9fICovIFJlYWN0Ni5jcmVhdGVFbGVtZW50KERlZmF1bHRQYWdlSWNvbiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY3MoY2xhc3NOYW1lLCBcIm5vdGlvbi1wYWdlLWljb25cIiksXG4gICAgICAgICAgYWx0OiB0aXRsZSA/IHRpdGxlIDogXCJwYWdlIGljb25cIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXNJbWFnZSA9IGZhbHNlO1xuICAgICAgY29udGVudCA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDYuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNzKGNsYXNzTmFtZSwgXCJub3Rpb24tcGFnZS1pY29uXCIpLFxuICAgICAgICByb2xlOiBcImltZ1wiLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogaWNvblxuICAgICAgfSwgaWNvbik7XG4gICAgfVxuICB9XG4gIGlmICghY29udGVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q2LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY3MoaW5saW5lID8gXCJub3Rpb24tcGFnZS1pY29uLWlubGluZVwiIDogXCJub3Rpb24tcGFnZS1pY29uLWhlcm9cIiwgaXNJbWFnZSA/IFwibm90aW9uLXBhZ2UtaWNvbi1pbWFnZVwiIDogXCJub3Rpb24tcGFnZS1pY29uLXNwYW5cIilcbiAgfSwgY29udGVudCk7XG59O1xudmFyIFBhZ2VJY29uID0gUmVhY3Q2Lm1lbW8oUGFnZUljb25JbXBsKTtcblxuLy8gc3JjL2NvbXBvbmVudHMvcGFnZS10aXRsZS50c3hcbmltcG9ydCAqIGFzIFJlYWN0NyBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldEJsb2NrVGl0bGUgYXMgZ2V0QmxvY2tUaXRsZTIgfSBmcm9tIFwibm90aW9uLXV0aWxzXCI7XG52YXIgUGFnZVRpdGxlSW1wbCA9IChfYSkgPT4ge1xuICB2YXIgX2IgPSBfYSwgeyBibG9jaywgY2xhc3NOYW1lLCBkZWZhdWx0SWNvbiB9ID0gX2IsIHJlc3QgPSBfX29ialJlc3QoX2IsIFtcImJsb2NrXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdEljb25cIl0pO1xuICB2YXIgX2EyLCBfYjI7XG4gIGNvbnN0IHsgcmVjb3JkTWFwIH0gPSB1c2VOb3Rpb25Db250ZXh0KCk7XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmIChibG9jay50eXBlID09PSBcImNvbGxlY3Rpb25fdmlld19wYWdlXCIgfHwgYmxvY2sudHlwZSA9PT0gXCJjb2xsZWN0aW9uX3ZpZXdcIikge1xuICAgIGNvbnN0IHRpdGxlID0gZ2V0QmxvY2tUaXRsZTIoYmxvY2ssIHJlY29yZE1hcCk7XG4gICAgaWYgKCF0aXRsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHRpdGxlRGVjb3JhdGlvbiA9IFtbdGl0bGVdXTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0Ny5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLXBhZ2UtdGl0bGVcIiwgY2xhc3NOYW1lKVxuICAgIH0sIHJlc3QpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q3LmNyZWF0ZUVsZW1lbnQoUGFnZUljb24sIHtcbiAgICAgIGJsb2NrLFxuICAgICAgZGVmYXVsdEljb24sXG4gICAgICBjbGFzc05hbWU6IFwibm90aW9uLXBhZ2UtdGl0bGUtaWNvblwiXG4gICAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1wYWdlLXRpdGxlLXRleHRcIlxuICAgIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcuY3JlYXRlRWxlbWVudChUZXh0LCB7XG4gICAgICB2YWx1ZTogdGl0bGVEZWNvcmF0aW9uLFxuICAgICAgYmxvY2tcbiAgICB9KSkpO1xuICB9XG4gIGlmICghKChfYTIgPSBibG9jay5wcm9wZXJ0aWVzKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnRpdGxlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9fc3ByZWFkVmFsdWVzKHtcbiAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLXBhZ2UtdGl0bGVcIiwgY2xhc3NOYW1lKVxuICB9LCByZXN0KSwgLyogQF9fUFVSRV9fICovIFJlYWN0Ny5jcmVhdGVFbGVtZW50KFBhZ2VJY29uLCB7XG4gICAgYmxvY2ssXG4gICAgZGVmYXVsdEljb24sXG4gICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1wYWdlLXRpdGxlLWljb25cIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0Ny5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1wYWdlLXRpdGxlLXRleHRcIlxuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q3LmNyZWF0ZUVsZW1lbnQoVGV4dCwge1xuICAgIHZhbHVlOiAoX2IyID0gYmxvY2sucHJvcGVydGllcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi50aXRsZSxcbiAgICBibG9ja1xuICB9KSkpO1xufTtcbnZhciBQYWdlVGl0bGUgPSBSZWFjdDcubWVtbyhQYWdlVGl0bGVJbXBsKTtcblxuLy8gc3JjL2NvbXBvbmVudHMvZ3JhY2VmdWwtaW1hZ2UudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDggZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbWcgfSBmcm9tIFwicmVhY3QtaW1hZ2VcIjtcbnZhciBHcmFjZWZ1bEltYWdlID0gKHByb3BzKSA9PiB7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0OC5jcmVhdGVFbGVtZW50KEltZywgX19zcHJlYWRWYWx1ZXMoe30sIHByb3BzKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDguY3JlYXRlRWxlbWVudChcImltZ1wiLCBfX3NwcmVhZFZhbHVlcyh7fSwgcHJvcHMpKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvZW9pLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QxMCBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2ljb25zL3R5cGUtZ2l0aHViLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q5IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gU3ZnVHlwZUdpdEh1Yihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0OS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHtcbiAgICB2aWV3Qm94OiBcIjAgMCAyNjAgMjYwXCJcbiAgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q5LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDkuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEyOC4wMDEwNiwwIEM1Ny4zMTcyOTI2LDAgMCw1Ny4zMDY2OTQyIDAsMTI4LjAwMTA2IEMwLDE4NC41NTUyODEgMzYuNjc2MTk5NywyMzIuNTM1NTQyIDg3LjUzNDkzNywyNDkuNDYwODk5IEM5My45MzIwMjIzLDI1MC42NDU3NzkgOTYuMjgwNTg4LDI0Ni42ODQxNjUgOTYuMjgwNTg4LDI0My4zMDMzMzMgQzk2LjI4MDU4OCwyNDAuMjUxMDQ1IDk2LjE2MTg4NzgsMjMwLjE2Nzg5OSA5Ni4xMDY3NzcsMjE5LjQ3MjE3NiBDNjAuNDk2NzU4NSwyMjcuMjE1MjM1IDUyLjk4MjYyMDcsMjA0LjM2OTcxMiA1Mi45ODI2MjA3LDIwNC4zNjk3MTIgQzQ3LjE1OTk1ODQsMTg5LjU3NDU5OCAzOC43NzA0MDgsMTg1LjY0MDUzOCAzOC43NzA0MDgsMTg1LjY0MDUzOCBDMjcuMTU2ODc4NSwxNzcuNjk2MTEzIDM5LjY0NTgyMDYsMTc3Ljg1OTMyNSAzOS42NDU4MjA2LDE3Ny44NTkzMjUgQzUyLjQ5OTM0MTksMTc4Ljc2MjI5MyA1OS4yNjczNjUsMTkxLjA0OTg3IDU5LjI2NzM2NSwxOTEuMDQ5ODcgQzcwLjY4Mzc2NzUsMjEwLjYxODQyMyA4OS4yMTE1NzUzLDIwNC45NjEwOTMgOTYuNTE1ODY4NSwyMDEuNjkwNDgyIEM5Ny42NjQ3MTU1LDE5My40MTc1MTIgMTAwLjk4MTk1OSwxODcuNzcwNzggMTA0LjY0MjU4MywxODQuNTc0MzU3IEM3Ni4yMTE3OTksMTgxLjMzNzY2IDQ2LjMyNDgxOSwxNzAuMzYyMTQ0IDQ2LjMyNDgxOSwxMjEuMzE1NzAyIEM0Ni4zMjQ4MTksMTA3LjM0MDg4OSA1MS4zMjUwNTg4LDk1LjkyMjM2ODIgNTkuNTEzMjQzNyw4Ni45NTgzOTM3IEM1OC4xODQyMjY4LDgzLjczNDQxNTIgNTMuODAyOTIyOSw3MC43MTU1NjIgNjAuNzUzMjM1NCw1My4wODQzNjM2IEM2MC43NTMyMzU0LDUzLjA4NDM2MzYgNzEuNTAxOTUwMSw0OS42NDQxODEzIDk1Ljk2MjY0MTIsNjYuMjA0OTU5NSBDMTA2LjE3Mjk2Nyw2My4zNjg4NzYgMTE3LjEyMzA0Nyw2MS45NDY1OTQ5IDEyOC4wMDEwNiw2MS44OTc4NDMyIEMxMzguODc5MDczLDYxLjk0NjU5NDkgMTQ5LjgzNzYzMiw2My4zNjg4NzYgMTYwLjA2NzAzMyw2Ni4yMDQ5NTk1IEMxODQuNDk4MDUsNDkuNjQ0MTgxMyAxOTUuMjMxOTI2LDUzLjA4NDM2MzYgMTk1LjIzMTkyNiw1My4wODQzNjM2IEMyMDIuMTk5MTk3LDcwLjcxNTU2MiAxOTcuODE1NzczLDgzLjczNDQxNTIgMTk2LjQ4Njc1Niw4Ni45NTgzOTM3IEMyMDQuNjk0MDE4LDk1LjkyMjM2ODIgMjA5LjY2MDM0MywxMDcuMzQwODg5IDIwOS42NjAzNDMsMTIxLjMxNTcwMiBDMjA5LjY2MDM0MywxNzAuNDc4NzI1IDE3OS43MTYxMzMsMTgxLjMwMzc0NyAxNTEuMjEzMjgxLDE4NC40NzI2MTQgQzE1NS44MDQ0MywxODguNDQ0ODI4IDE1OS44OTUzNDIsMTk2LjIzNDUxOCAxNTkuODk1MzQyLDIwOC4xNzY1OTMgQzE1OS44OTUzNDIsMjI1LjMwMzMxNyAxNTkuNzQ2OTY4LDIzOS4wODczNjEgMTU5Ljc0Njk2OCwyNDMuMzAzMzMzIEMxNTkuNzQ2OTY4LDI0Ni43MDk2MDEgMTYyLjA1MTAyLDI1MC43MDA4OSAxNjguNTM5MjUsMjQ5LjQ0Mzk0MSBDMjE5LjM3MDQzMiwyMzIuNDk5NTA3IDI1NiwxODQuNTM2MjA0IDI1NiwxMjguMDAxMDYgQzI1Niw1Ny4zMDY2OTQyIDE5OC42OTExODcsMCAxMjguMDAxMDYsMCBaIE00Ny45NDA1NTkzLDE4Mi4zNDAyMTIgQzQ3LjY1ODY0NjUsMTgyLjk3NjEwNSA0Ni42NTgxNzQ1LDE4My4xNjY4NzMgNDUuNzQ2NzI3NywxODIuNzMwMjI3IEM0NC44MTgzMjM1LDE4Mi4zMTI2NTYgNDQuMjk2ODkxNCwxODEuNDQ1NzIyIDQ0LjU5Nzg4MDgsMTgwLjgwNzcxIEM0NC44NzM0MzQ0LDE4MC4xNTI3MzkgNDUuODc2MDI2LDE3OS45NzA0NSA0Ni44MDIzMTAzLDE4MC40MDkyMTYgQzQ3LjczMjgzNDIsMTgwLjgyNjc4NiA0OC4yNjI3NDUxLDE4MS43MDIxOTkgNDcuOTQwNTU5MywxODIuMzQwMjEyIFogTTU0LjIzNjc4OTIsMTg3Ljk1ODI1NCBDNTMuNjI2MzMxOCwxODguNTI0MTk5IDUyLjQzMjk3MjMsMTg4LjI2MTM2MyA1MS42MjMyNjgyLDE4Ny4zNjY4NzQgQzUwLjc4NjAwODgsMTg2LjQ3NDUwNCA1MC42MjkxNTUzLDE4NS4yODExNDQgNTEuMjQ4MDkxMiwxODQuNzA2NzIgQzUxLjg3NzYyNTQsMTg0LjE0MDc3NSA1My4wMzQ5NTEyLDE4NC40MDU3MzEgNTMuODc0MzMwMiwxODUuMjk4MTAxIEM1NC43MTE1ODkyLDE4Ni4yMDEwNjkgNTQuODc0ODAxOSwxODcuMzg1OTUgNTQuMjM2Nzg5MiwxODcuOTU4MjU0IFogTTU4LjU1NjI0MTMsMTk1LjE0NjM0NyBDNTcuNzcxOTczMiwxOTUuNjkxMDk2IDU2LjQ4OTU4ODYsMTk1LjE4MDI2MSA1NS42OTY4NDE3LDE5NC4wNDIwMTMgQzU0LjkxMjU3MzMsMTkyLjkwMzc2NCA1NC45MTI1NzMzLDE5MS41Mzg3MTMgNTUuNzEzNzk5LDE5MC45OTE4NDUgQzU2LjUwODY2NTEsMTkwLjQ0NDk3NyA1Ny43NzE5NzMyLDE5MC45MzY3MzUgNTguNTc1MzE4MSwxOTIuMDY2NTA1IEM1OS4zNTc0NjY5LDE5My4yMjM4MyA1OS4zNTc0NjY5LDE5NC41ODg4OCA1OC41NTYyNDEzLDE5NS4xNDYzNDcgWiBNNjUuODYxMzU5MiwyMDMuNDcxMTc0IEM2NS4xNTk3NTcxLDIwNC4yNDQ4NDYgNjMuNjY1NDA4MywyMDQuMDM3MTIgNjIuNTcxNjcxNywyMDIuOTgxNTM4IEM2MS40NTI0OTk5LDIwMS45NDkyNyA2MS4xNDA5MTIyLDIwMC40ODQ1OTYgNjEuODQ0NjM0MSwxOTkuNzEwOTI2IEM2Mi41NTQ3MTQ2LDE5OC45MzUxMzcgNjQuMDU3NTQyMiwxOTkuMTUzNDYgNjUuMTU5NzU3MSwyMDAuMjAwNTY0IEM2Ni4yNzA0NTA2LDIwMS4yMzA3MTIgNjYuNjA5NTkzNiwyMDIuNzA1OTg0IDY1Ljg2MTM1OTIsMjAzLjQ3MTE3NCBaIE03NS4zMDI1MTUxLDIwNi4yODE1NDIgQzc0Ljk5MzA0NzQsMjA3LjI4NDEzNCA3My41NTM4MDksMjA3LjczOTg1NyA3Mi4xMDM5NzI0LDIwNy4zMTM4MDkgQzcwLjY1NjI1NTYsMjA2Ljg3NTA0MyA2OS43MDg3NzQ4LDIwNS43MDA3NjEgNzAuMDAxMjg1NywyMDQuNjg3NTcxIEM3MC4zMDIyNzUsMjAzLjY3ODYyMSA3MS43NDc4NzIxLDIwMy4yMDM4MiA3My4yMDgzMDY5LDIwMy42NTk1NDMgQzc0LjY1MzkwNDEsMjA0LjA5NjE5IDc1LjYwMzUwNDgsMjA1LjI2MTk5NCA3NS4zMDI1MTUxLDIwNi4yODE1NDIgWiBNODYuMDQ2OTQ3LDIwNy40NzM2MjcgQzg2LjA4Mjk4MDYsMjA4LjUyOTIwOSA4NC44NTM1ODcxLDIwOS40MDQ2MjIgODMuMzMxNjgyOSwyMDkuNDIzNyBDODEuODAxMywyMDkuNDU3NjE0IDgwLjU2MzQyOCwyMDguNjAzMzk4IDgwLjU0NjQ3MDgsMjA3LjU2NDc3MiBDODAuNTQ2NDcwOCwyMDYuNDk4NTkxIDgxLjc0ODMwODgsMjA1LjYzMTY1NyA4My4yNzg2OTE3LDIwNS42MDYyMjEgQzg0LjgwMDU5NjIsMjA1LjU3NjU0NiA4Ni4wNDY5NDcsMjA2LjQyNDQwMyA4Ni4wNDY5NDcsMjA3LjQ3MzYyNyBaIE05Ni42MDIxNDcxLDIwNy4wNjkwMjMgQzk2Ljc4NDQzNjYsMjA4LjA5OTE3MSA5NS43MjY3MzQxLDIwOS4xNTY4NzIgOTQuMjE1NDI4LDIwOS40Mzg3ODUgQzkyLjcyOTU1NzcsMjA5LjcxMDA5OSA5MS4zNTM5MDg2LDIwOS4wNzQyMDYgOTEuMTY1MjYwMywyMDguMDUyNTM4IEM5MC45ODA4NTE1LDIwNi45OTY5NTUgOTIuMDU3NjMwNiwyMDUuOTM5MjUzIDkzLjU0MTM4MTMsMjA1LjY2NTgyIEM5NS4wNTQ4MDcsMjA1LjQwMjk4NCA5Ni40MDkyNTk2LDIwNi4wMjE5MTkgOTYuNjAyMTQ3MSwyMDcuMDY5MDIzIFpcIixcbiAgICBmaWxsOiBcIiMxNjE2MTRcIlxuICB9KSkpO1xufVxudmFyIHR5cGVfZ2l0aHViX2RlZmF1bHQgPSBTdmdUeXBlR2l0SHViO1xuXG4vLyBzcmMvY29tcG9uZW50cy9lb2kudHN4XG52YXIgRU9JID0gKHsgYmxvY2ssIGlubGluZSwgY2xhc3NOYW1lIH0pID0+IHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIGNvbnN0IHsgY29tcG9uZW50cyB9ID0gdXNlTm90aW9uQ29udGV4dCgpO1xuICBjb25zdCB7IG9yaWdpbmFsX3VybCwgYXR0cmlidXRlcywgZG9tYWluIH0gPSAoYmxvY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGJsb2NrLmZvcm1hdCkgfHwge307XG4gIGlmICghb3JpZ2luYWxfdXJsIHx8ICFhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgdGl0bGUgPSAoX2EgPSBhdHRyaWJ1dGVzLmZpbmQoKGF0dHIpID0+IGF0dHIuaWQgPT09IFwidGl0bGVcIikpID09IG51bGwgPyB2b2lkIDAgOiBfYS52YWx1ZXNbMF07XG4gIGxldCBvd25lciA9IChfYiA9IGF0dHJpYnV0ZXMuZmluZCgoYXR0cikgPT4gYXR0ci5pZCA9PT0gXCJvd25lclwiKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnZhbHVlc1swXTtcbiAgY29uc3QgbGFzdFVwZGF0ZWRBdCA9IChfYyA9IGF0dHJpYnV0ZXMuZmluZCgoYXR0cikgPT4gYXR0ci5pZCA9PT0gXCJ1cGRhdGVkX2F0XCIpKSA9PSBudWxsID8gdm9pZCAwIDogX2MudmFsdWVzWzBdO1xuICBjb25zdCBsYXN0VXBkYXRlZCA9IGxhc3RVcGRhdGVkQXQgPyBmb3JtYXROb3Rpb25EYXRlVGltZShsYXN0VXBkYXRlZEF0KSA6IG51bGw7XG4gIGxldCBleHRlcm5hbEltYWdlO1xuICBzd2l0Y2ggKGRvbWFpbikge1xuICAgIGNhc2UgXCJnaXRodWIuY29tXCI6XG4gICAgICBleHRlcm5hbEltYWdlID0gLyogQF9fUFVSRV9fICovIFJlYWN0MTAuY3JlYXRlRWxlbWVudCh0eXBlX2dpdGh1Yl9kZWZhdWx0LCBudWxsKTtcbiAgICAgIGlmIChvd25lcikge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IG93bmVyLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgb3duZXIgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAodHJ1ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgVW5zdXBwb3J0ZWQgZXh0ZXJuYWxfb2JqZWN0X2luc3RhbmNlIGRvbWFpbiBcIiR7ZG9tYWlufVwiYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHMuTGluaywge1xuICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICByZWw6IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiLFxuICAgIGhyZWY6IG9yaWdpbmFsX3VybCxcbiAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLWV4dGVybmFsXCIsIGlubGluZSA/IFwibm90aW9uLWV4dGVybmFsLW1lbnRpb25cIiA6IFwibm90aW9uLWV4dGVybmFsLWJsb2NrIG5vdGlvbi1yb3dcIiwgY2xhc3NOYW1lKVxuICB9LCBleHRlcm5hbEltYWdlICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJub3Rpb24tZXh0ZXJuYWwtaW1hZ2VcIlxuICB9LCBleHRlcm5hbEltYWdlKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1leHRlcm5hbC1kZXNjcmlwdGlvblwiXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJub3Rpb24tZXh0ZXJuYWwtdGl0bGVcIlxuICB9LCB0aXRsZSksIChvd25lciB8fCBsYXN0VXBkYXRlZCkgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTAuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1leHRlcm5hbC1zdWJ0aXRsZVwiXG4gIH0sIG93bmVyICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIG93bmVyKSwgb3duZXIgJiYgbGFzdFVwZGF0ZWQgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTAuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgXCIgXFx1MjAyMiBcIiksIGxhc3RVcGRhdGVkICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIFwiVXBkYXRlZCBcIiwgbGFzdFVwZGF0ZWQpKSkpO1xufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvaGVhZGVyLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QxNSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUhvdGtleXMgfSBmcm9tIFwicmVhY3QtaG90a2V5cy1ob29rXCI7XG5pbXBvcnQgeyBnZXRQYWdlQnJlYWRjcnVtYnMgfSBmcm9tIFwibm90aW9uLXV0aWxzXCI7XG5cbi8vIHNyYy9pY29ucy9zZWFyY2gtaWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0MTEgZnJvbSBcInJlYWN0XCI7XG52YXIgU2VhcmNoSWNvbiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBfYSA9IHByb3BzLCB7IGNsYXNzTmFtZSB9ID0gX2EsIHJlc3QgPSBfX29ialJlc3QoX2EsIFtcImNsYXNzTmFtZVwiXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHtcbiAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLWljb25cIiwgY2xhc3NOYW1lKSxcbiAgICB2aWV3Qm94OiBcIjAgMCAxNyAxN1wiXG4gIH0sIHJlc3QpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNi43ODAyNyAxMy42NzI5QzguMjQ4MDUgMTMuNjcyOSA5LjYwMTU2IDEzLjE5ODIgMTAuNzA5IDEyLjQwNzJMMTQuODc1IDE2LjU3MzJDMTUuMDY4NCAxNi43NjY2IDE1LjMyMzIgMTYuODYzMyAxNS41OTU3IDE2Ljg2MzNDMTYuMTY3IDE2Ljg2MzMgMTYuNTcxMyAxNi40MjM4IDE2LjU3MTMgMTUuODYxM0MxNi41NzEzIDE1LjU5NzcgMTYuNDgzNCAxNS4zNTE2IDE2LjI5IDE1LjE1ODJMMTIuMTUwNCAxMS4wMDk4QzEzLjAyMDUgOS44NjcxOSAxMy41MzkxIDguNDUyMTUgMTMuNTM5MSA2LjkxNDA2QzEzLjUzOTEgMy4xOTYyOSAxMC40OTggMC4xNTUyNzMgNi43ODAyNyAwLjE1NTI3M0MzLjA2MjUgMC4xNTUyNzMgMC4wMjE0ODQ0IDMuMTk2MjkgMC4wMjE0ODQ0IDYuOTE0MDZDMC4wMjE0ODQ0IDEwLjYzMTggMy4wNjI1IDEzLjY3MjkgNi43ODAyNyAxMy42NzI5Wk02Ljc4MDI3IDEyLjIxMzlDMy44Nzk4OCAxMi4yMTM5IDEuNDgwNDcgOS44MTQ0NSAxLjQ4MDQ3IDYuOTE0MDZDMS40ODA0NyA0LjAxMzY3IDMuODc5ODggMS42MTQyNiA2Ljc4MDI3IDEuNjE0MjZDOS42ODA2NiAxLjYxNDI2IDEyLjA4MDEgNC4wMTM2NyAxMi4wODAxIDYuOTE0MDZDMTIuMDgwMSA5LjgxNDQ1IDkuNjgwNjYgMTIuMjEzOSA2Ljc4MDI3IDEyLjIxMzlaXCJcbiAgfSkpO1xufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvc2VhcmNoLWRpYWxvZy50c3hcbnZhciBpbXBvcnRfbG9kYXNoID0gX190b0VTTShyZXF1aXJlX2xvZGFzaCgpLCAxKTtcbmltcG9ydCAqIGFzIFJlYWN0MTQgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBnZXRCbG9ja1RpdGxlIGFzIGdldEJsb2NrVGl0bGUzLCBnZXRCbG9ja1BhcmVudFBhZ2UgfSBmcm9tIFwibm90aW9uLXV0aWxzXCI7XG5cbi8vIHNyYy9pY29ucy9jbGVhci1pY29uLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QxMiBmcm9tIFwicmVhY3RcIjtcbnZhciBDbGVhckljb24gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgX2EgPSBwcm9wcywgeyBjbGFzc05hbWUgfSA9IF9hLCByZXN0ID0gX19vYmpSZXN0KF9hLCBbXCJjbGFzc05hbWVcIl0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTIuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLWljb25cIiwgY2xhc3NOYW1lKVxuICB9LCByZXN0KSwge1xuICAgIHZpZXdCb3g6IFwiMCAwIDMwIDMwXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEyLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNSwwQzYuNzE2LDAsMCw2LjcxNiwwLDE1czYuNzE2LDE1LDE1LDE1czE1LTYuNzE2LDE1LTE1UzIzLjI4NCwwLDE1LDB6IE0yMiwyMC42TDIwLjYsMjJMMTUsMTYuNEw5LjQsMjJMOCwyMC42bDUuNi01LjYgTDgsOS40TDkuNCw4bDUuNiw1LjZMMjAuNiw4TDIyLDkuNEwxNi40LDE1TDIyLDIwLjZ6XCJcbiAgfSkpO1xufTtcblxuLy8gc3JjL2ljb25zL2xvYWRpbmctaWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0MTMgZnJvbSBcInJlYWN0XCI7XG52YXIgTG9hZGluZ0ljb24gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgX2EgPSBwcm9wcywgeyBjbGFzc05hbWUgfSA9IF9hLCByZXN0ID0gX19vYmpSZXN0KF9hLCBbXCJjbGFzc05hbWVcIl0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTMuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLWljb25cIiwgY2xhc3NOYW1lKVxuICB9LCByZXN0KSwge1xuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEzLmNyZWF0ZUVsZW1lbnQoXCJkZWZzXCIsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEzLmNyZWF0ZUVsZW1lbnQoXCJsaW5lYXJHcmFkaWVudFwiLCB7XG4gICAgeDE6IFwiMjguMTU0Mjk2OSVcIixcbiAgICB5MTogXCI2My43NDAyMzQ0JVwiLFxuICAgIHgyOiBcIjc0LjYyODkwNjIlXCIsXG4gICAgeTI6IFwiMTcuNzgzMjAzMSVcIixcbiAgICBpZDogXCJsaW5lYXJHcmFkaWVudC0xXCJcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTMuY3JlYXRlRWxlbWVudChcInN0b3BcIiwge1xuICAgIHN0b3BDb2xvcjogXCJyZ2JhKDE2NCwgMTY0LCAxNjQsIDEpXCIsXG4gICAgb2Zmc2V0OiBcIjAlXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEzLmNyZWF0ZUVsZW1lbnQoXCJzdG9wXCIsIHtcbiAgICBzdG9wQ29sb3I6IFwicmdiYSgxNjQsIDE2NCwgMTY0LCAwKVwiLFxuICAgIHN0b3BPcGFjaXR5OiBcIjBcIixcbiAgICBvZmZzZXQ6IFwiMTAwJVwiXG4gIH0pKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEzLmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBpZDogXCJQYWdlLTFcIixcbiAgICBzdHJva2U6IFwibm9uZVwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjFcIixcbiAgICBmaWxsOiBcIm5vbmVcIlxuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMy5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgtMjM2LjAwMDAwMCwgLTI4Ni4wMDAwMDApXCJcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTMuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoMjM4LjAwMDAwMCwgMjg2LjAwMDAwMClcIlxuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMy5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBpZDogXCJPdmFsLTJcIixcbiAgICBzdHJva2U6IFwidXJsKCNsaW5lYXJHcmFkaWVudC0xKVwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjRcIixcbiAgICBjeDogXCIxMFwiLFxuICAgIGN5OiBcIjEyXCIsXG4gICAgcjogXCIxMFwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMy5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTAsMiBDNC40NzcxNTI1LDIgMCw2LjQ3NzE1MjUgMCwxMlwiLFxuICAgIGlkOiBcIk92YWwtMlwiLFxuICAgIHN0cm9rZTogXCJyZ2JhKDE2NCwgMTY0LCAxNjQsIDEpXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiNFwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMy5jcmVhdGVFbGVtZW50KFwicmVjdFwiLCB7XG4gICAgaWQ6IFwiUmVjdGFuZ2xlLTFcIixcbiAgICBmaWxsOiBcInJnYmEoMTY0LCAxNjQsIDE2NCwgMSlcIixcbiAgICB4OiBcIjhcIixcbiAgICB5OiBcIjBcIixcbiAgICB3aWR0aDogXCI0XCIsXG4gICAgaGVpZ2h0OiBcIjRcIixcbiAgICByeDogXCI4XCJcbiAgfSkpKSkpO1xufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvc2VhcmNoLWRpYWxvZy50c3hcbnZhciBTZWFyY2hEaWFsb2cgPSBjbGFzcyBleHRlbmRzIFJlYWN0MTQuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICBxdWVyeTogXCJcIixcbiAgICAgIHNlYXJjaFJlc3VsdDogbnVsbCxcbiAgICAgIHNlYXJjaEVycm9yOiBudWxsXG4gICAgfTtcbiAgICB0aGlzLl9vbkFmdGVyT3BlbiA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pbnB1dFJlZi5jdXJyZW50KSB7XG4gICAgICAgIHRoaXMuX2lucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX29uQ2hhbmdlUXVlcnkgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBxdWVyeSB9KTtcbiAgICAgIGlmICghcXVlcnkudHJpbSgpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0xvYWRpbmc6IGZhbHNlLCBzZWFyY2hSZXN1bHQ6IG51bGwsIHNlYXJjaEVycm9yOiBudWxsIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWFyY2goKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX29uQ2xlYXJRdWVyeSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX29uQ2hhbmdlUXVlcnkoeyB0YXJnZXQ6IHsgdmFsdWU6IFwiXCIgfSB9KTtcbiAgICB9O1xuICAgIHRoaXMuX3dhcm11cFNlYXJjaCA9ICgpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IHsgc2VhcmNoTm90aW9uLCByb290QmxvY2tJZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIHlpZWxkIHNlYXJjaE5vdGlvbih7XG4gICAgICAgIHF1ZXJ5OiBcIlwiLFxuICAgICAgICBhbmNlc3RvcklkOiByb290QmxvY2tJZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5fc2VhcmNoSW1wbCA9ICgpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IHsgc2VhcmNoTm90aW9uLCByb290QmxvY2tJZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHsgcXVlcnkgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBpZiAoIXF1ZXJ5LnRyaW0oKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nOiBmYWxzZSwgc2VhcmNoUmVzdWx0OiBudWxsLCBzZWFyY2hFcnJvcjogbnVsbCB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZzogdHJ1ZSB9KTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHNlYXJjaE5vdGlvbih7XG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICBhbmNlc3RvcklkOiByb290QmxvY2tJZFxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhcInNlYXJjaFwiLCBxdWVyeSwgcmVzdWx0KTtcbiAgICAgIGxldCBzZWFyY2hSZXN1bHQgPSBudWxsO1xuICAgICAgbGV0IHNlYXJjaEVycm9yID0gbnVsbDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IgfHwgcmVzdWx0LmVycm9ySWQpIHtcbiAgICAgICAgc2VhcmNoRXJyb3IgPSByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWFyY2hSZXN1bHQgPSBfX3NwcmVhZFZhbHVlcyh7fSwgcmVzdWx0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHNlYXJjaFJlc3VsdC5yZXN1bHRzLm1hcCgocmVzdWx0MikgPT4ge1xuICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgY29uc3QgYmxvY2sgPSAoX2EgPSBzZWFyY2hSZXN1bHQucmVjb3JkTWFwLmJsb2NrW3Jlc3VsdDIuaWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2EudmFsdWU7XG4gICAgICAgICAgaWYgKCFibG9jaylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICBjb25zdCB0aXRsZSA9IGdldEJsb2NrVGl0bGUzKGJsb2NrLCBzZWFyY2hSZXN1bHQucmVjb3JkTWFwKTtcbiAgICAgICAgICBpZiAoIXRpdGxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdDIudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgICByZXN1bHQyLmJsb2NrID0gYmxvY2s7XG4gICAgICAgICAgcmVzdWx0Mi5yZWNvcmRNYXAgPSBzZWFyY2hSZXN1bHQucmVjb3JkTWFwO1xuICAgICAgICAgIHJlc3VsdDIucGFnZSA9IGdldEJsb2NrUGFyZW50UGFnZShibG9jaywgc2VhcmNoUmVzdWx0LnJlY29yZE1hcCwge1xuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlXG4gICAgICAgICAgfSkgfHwgYmxvY2s7XG4gICAgICAgICAgaWYgKCFyZXN1bHQyLnBhZ2UuaWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKChfYiA9IHJlc3VsdDIuaGlnaGxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX2IudGV4dCkge1xuICAgICAgICAgICAgcmVzdWx0Mi5oaWdobGlnaHQuaHRtbCA9IHJlc3VsdDIuaGlnaGxpZ2h0LnRleHQucmVwbGFjZSgvPGd6a05mb1VVPi9naSwgXCI8Yj5cIikucmVwbGFjZSgvPFxcL2d6a05mb1VVPi9naSwgXCI8L2I+XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHRzTWFwID0gcmVzdWx0cy5yZWR1Y2UoKG1hcCwgcmVzdWx0MikgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWFwKSwge1xuICAgICAgICAgIFtyZXN1bHQyLnBhZ2UuaWRdOiByZXN1bHQyXG4gICAgICAgIH0pLCB7fSk7XG4gICAgICAgIHNlYXJjaFJlc3VsdC5yZXN1bHRzID0gT2JqZWN0LnZhbHVlcyhzZWFyY2hSZXN1bHRzTWFwKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlLnF1ZXJ5ID09PSBxdWVyeSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nOiBmYWxzZSwgc2VhcmNoUmVzdWx0LCBzZWFyY2hFcnJvciB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9pbnB1dFJlZiA9IFJlYWN0MTQuY3JlYXRlUmVmKCk7XG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fc2VhcmNoID0gKDAsIGltcG9ydF9sb2Rhc2guZGVmYXVsdCkodGhpcy5fc2VhcmNoSW1wbC5iaW5kKHRoaXMpLCAxZTMpO1xuICAgIHRoaXMuX3dhcm11cFNlYXJjaCgpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGlzT3Blbiwgb25DbG9zZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzTG9hZGluZywgcXVlcnksIHNlYXJjaFJlc3VsdCwgc2VhcmNoRXJyb3IgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgaGFzUXVlcnkgPSAhIXF1ZXJ5LnRyaW0oKTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChOb3Rpb25Db250ZXh0Q29uc3VtZXIsIG51bGwsIChjdHgyKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbXBvbmVudHMsIGRlZmF1bHRQYWdlSWNvbiwgbWFwUGFnZVVybCB9ID0gY3R4MjtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHMuTW9kYWwsIHtcbiAgICAgICAgaXNPcGVuLFxuICAgICAgICBjb250ZW50TGFiZWw6IFwiU2VhcmNoXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJub3Rpb24tc2VhcmNoXCIsXG4gICAgICAgIG92ZXJsYXlDbGFzc05hbWU6IFwibm90aW9uLXNlYXJjaC1vdmVybGF5XCIsXG4gICAgICAgIG9uUmVxdWVzdENsb3NlOiBvbkNsb3NlLFxuICAgICAgICBvbkFmdGVyT3BlbjogdGhpcy5fb25BZnRlck9wZW5cbiAgICAgIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicXVpY2tGaW5kTWVudVwiXG4gICAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInNlYXJjaEJhclwiXG4gICAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImlubGluZUljb25cIlxuICAgICAgfSwgaXNMb2FkaW5nID8gLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChMb2FkaW5nSWNvbiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibG9hZGluZ0ljb25cIlxuICAgICAgfSkgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KFNlYXJjaEljb24sIG51bGwpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInNlYXJjaElucHV0XCIsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBcIlNlYXJjaFwiLFxuICAgICAgICB2YWx1ZTogcXVlcnksXG4gICAgICAgIHJlZjogdGhpcy5faW5wdXRSZWYsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLl9vbkNoYW5nZVF1ZXJ5XG4gICAgICB9KSwgcXVlcnkgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJjbGVhckJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLl9vbkNsZWFyUXVlcnlcbiAgICAgIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoQ2xlYXJJY29uLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJjbGVhckljb25cIlxuICAgICAgfSkpKSwgaGFzUXVlcnkgJiYgc2VhcmNoUmVzdWx0ICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoUmVhY3QxNC5GcmFnbWVudCwgbnVsbCwgc2VhcmNoUmVzdWx0LnJlc3VsdHMubGVuZ3RoID8gLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChOb3Rpb25Db250ZXh0UHJvdmlkZXIsIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGN0eDIpLCB7XG4gICAgICAgIHJlY29yZE1hcDogc2VhcmNoUmVzdWx0LnJlY29yZE1hcFxuICAgICAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVzdWx0c1BhbmVcIlxuICAgICAgfSwgc2VhcmNoUmVzdWx0LnJlc3VsdHMubWFwKChyZXN1bHQpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLlBhZ2VMaW5rLCB7XG4gICAgICAgICAga2V5OiByZXN1bHQuaWQsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjcyhcInJlc3VsdFwiLCBcIm5vdGlvbi1wYWdlLWxpbmtcIiksXG4gICAgICAgICAgaHJlZjogbWFwUGFnZVVybChyZXN1bHQucGFnZS5pZCwgc2VhcmNoUmVzdWx0LnJlY29yZE1hcClcbiAgICAgICAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChQYWdlVGl0bGUsIHtcbiAgICAgICAgICBibG9jazogcmVzdWx0LnBhZ2UsXG4gICAgICAgICAgZGVmYXVsdEljb246IGRlZmF1bHRQYWdlSWNvblxuICAgICAgICB9KSwgKChfYSA9IHJlc3VsdC5oaWdobGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5odG1sKSAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwibm90aW9uLXNlYXJjaC1yZXN1bHQtaGlnaGxpZ2h0XCIsXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICAgIF9faHRtbDogcmVzdWx0LmhpZ2hsaWdodC5odG1sXG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9KSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoXCJmb290ZXJcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmVzdWx0c0Zvb3RlclwiXG4gICAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlc3VsdHNDb3VudFwiXG4gICAgICB9LCBzZWFyY2hSZXN1bHQudG90YWwpLCBzZWFyY2hSZXN1bHQudG90YWwgPT09IDEgPyBcIiByZXN1bHRcIiA6IFwiIHJlc3VsdHNcIikpKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibm9SZXN1bHRzUGFuZVwiXG4gICAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm5vUmVzdWx0c1wiXG4gICAgICB9LCBcIk5vIHJlc3VsdHNcIiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibm9SZXN1bHRzRGV0YWlsXCJcbiAgICAgIH0sIFwiVHJ5IGRpZmZlcmVudCBzZWFyY2ggdGVybXNcIikpKSwgaGFzUXVlcnkgJiYgIXNlYXJjaFJlc3VsdCAmJiBzZWFyY2hFcnJvciAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm5vUmVzdWx0c1BhbmVcIlxuICAgICAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJub1Jlc3VsdHNcIlxuICAgICAgfSwgXCJTZWFyY2ggZXJyb3JcIikpKSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21wb25lbnRzL2hlYWRlci50c3hcbnZhciBIZWFkZXIgPSAoeyBibG9jayB9KSA9PiB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNS5jcmVhdGVFbGVtZW50KFwiaGVhZGVyXCIsIHtcbiAgICBjbGFzc05hbWU6IFwibm90aW9uLWhlYWRlclwiXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE1LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJub3Rpb24tbmF2LWhlYWRlclwiXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE1LmNyZWF0ZUVsZW1lbnQoQnJlYWRjcnVtYnMsIHtcbiAgICBibG9ja1xuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTUuY3JlYXRlRWxlbWVudChTZWFyY2gsIHtcbiAgICBibG9ja1xuICB9KSkpO1xufTtcbnZhciBCcmVhZGNydW1icyA9ICh7IGJsb2NrLCByb290T25seSA9IGZhbHNlIH0pID0+IHtcbiAgY29uc3QgeyByZWNvcmRNYXAsIG1hcFBhZ2VVcmwsIGNvbXBvbmVudHMgfSA9IHVzZU5vdGlvbkNvbnRleHQoKTtcbiAgY29uc3QgYnJlYWRjcnVtYnMgPSBSZWFjdDE1LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGJyZWFkY3J1bWJzMiA9IGdldFBhZ2VCcmVhZGNydW1icyhyZWNvcmRNYXAsIGJsb2NrLmlkKTtcbiAgICBpZiAocm9vdE9ubHkpIHtcbiAgICAgIHJldHVybiBbYnJlYWRjcnVtYnMyWzBdXS5maWx0ZXIoQm9vbGVhbik7XG4gICAgfVxuICAgIHJldHVybiBicmVhZGNydW1iczI7XG4gIH0sIFtyZWNvcmRNYXAsIGJsb2NrLmlkLCByb290T25seV0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTUuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcImJyZWFkY3J1bWJzXCIsXG4gICAga2V5OiBcImJyZWFkY3J1bWJzXCJcbiAgfSwgYnJlYWRjcnVtYnMubWFwKChicmVhZGNydW1iLCBpbmRleCkgPT4ge1xuICAgIGlmICghYnJlYWRjcnVtYikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHBhZ2VMaW5rUHJvcHMgPSB7fTtcbiAgICBjb25zdCBjb21wb25lbnRNYXAgPSB7XG4gICAgICBwYWdlTGluazogY29tcG9uZW50cy5QYWdlTGlua1xuICAgIH07XG4gICAgaWYgKGJyZWFkY3J1bWIuYWN0aXZlKSB7XG4gICAgICBjb21wb25lbnRNYXAucGFnZUxpbmsgPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE1LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19zcHJlYWRWYWx1ZXMoe30sIHByb3BzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhZ2VMaW5rUHJvcHMuaHJlZiA9IG1hcFBhZ2VVcmwoYnJlYWRjcnVtYi5wYWdlSWQpO1xuICAgIH1cbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTUuY3JlYXRlRWxlbWVudChSZWFjdDE1LkZyYWdtZW50LCB7XG4gICAgICBrZXk6IGJyZWFkY3J1bWIucGFnZUlkXG4gICAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTUuY3JlYXRlRWxlbWVudChjb21wb25lbnRNYXAucGFnZUxpbmssIF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGNsYXNzTmFtZTogY3MoXCJicmVhZGNydW1iXCIsIGJyZWFkY3J1bWIuYWN0aXZlICYmIFwiYWN0aXZlXCIpXG4gICAgfSwgcGFnZUxpbmtQcm9wcyksIGJyZWFkY3J1bWIuaWNvbiAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNS5jcmVhdGVFbGVtZW50KFBhZ2VJY29uLCB7XG4gICAgICBjbGFzc05hbWU6IFwiaWNvblwiLFxuICAgICAgYmxvY2s6IGJyZWFkY3J1bWIuYmxvY2tcbiAgICB9KSwgYnJlYWRjcnVtYi50aXRsZSAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwidGl0bGVcIlxuICAgIH0sIGJyZWFkY3J1bWIudGl0bGUpKSwgaW5kZXggPCBicmVhZGNydW1icy5sZW5ndGggLSAxICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE1LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJzcGFjZXJcIlxuICAgIH0sIFwiL1wiKSk7XG4gIH0pKTtcbn07XG52YXIgU2VhcmNoID0gKHsgYmxvY2ssIHNlYXJjaCwgdGl0bGUgPSBcIlNlYXJjaFwiIH0pID0+IHtcbiAgY29uc3QgeyBzZWFyY2hOb3Rpb24sIHJvb3RQYWdlSWQgfSA9IHVzZU5vdGlvbkNvbnRleHQoKTtcbiAgY29uc3Qgb25TZWFyY2hOb3Rpb24gPSBzZWFyY2ggfHwgc2VhcmNoTm90aW9uO1xuICBjb25zdCBbaXNTZWFyY2hPcGVuLCBzZXRJc1NlYXJjaE9wZW5dID0gUmVhY3QxNS51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IG9uT3BlblNlYXJjaCA9IFJlYWN0MTUudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzU2VhcmNoT3Blbih0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBvbkNsb3NlU2VhcmNoID0gUmVhY3QxNS51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNTZWFyY2hPcGVuKGZhbHNlKTtcbiAgfSwgW10pO1xuICB1c2VIb3RrZXlzKFwiY21kK3BcIiwgKGV2ZW50KSA9PiB7XG4gICAgb25PcGVuU2VhcmNoKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG4gIHVzZUhvdGtleXMoXCJjbWQra1wiLCAoZXZlbnQpID0+IHtcbiAgICBvbk9wZW5TZWFyY2goKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcbiAgY29uc3QgaGFzU2VhcmNoID0gISFvblNlYXJjaE5vdGlvbjtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE1LmNyZWF0ZUVsZW1lbnQoUmVhY3QxNS5GcmFnbWVudCwgbnVsbCwgaGFzU2VhcmNoICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE1LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgY2xhc3NOYW1lOiBjcyhcImJyZWFkY3J1bWJcIiwgXCJidXR0b25cIiwgXCJub3Rpb24tc2VhcmNoLWJ1dHRvblwiKSxcbiAgICBvbkNsaWNrOiBvbk9wZW5TZWFyY2hcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTUuY3JlYXRlRWxlbWVudChTZWFyY2hJY29uLCB7XG4gICAgY2xhc3NOYW1lOiBcInNlYXJjaEljb25cIlxuICB9KSwgdGl0bGUgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTUuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogXCJ0aXRsZVwiXG4gIH0sIHRpdGxlKSksIGlzU2VhcmNoT3BlbiAmJiBoYXNTZWFyY2ggJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTUuY3JlYXRlRWxlbWVudChTZWFyY2hEaWFsb2csIHtcbiAgICBpc09wZW46IGlzU2VhcmNoT3BlbixcbiAgICByb290QmxvY2tJZDogcm9vdFBhZ2VJZCB8fCAoYmxvY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGJsb2NrLmlkKSxcbiAgICBvbkNsb3NlOiBvbkNsb3NlU2VhcmNoLFxuICAgIHNlYXJjaE5vdGlvbjogb25TZWFyY2hOb3Rpb25cbiAgfSkpO1xufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvYXNzZXQtd3JhcHBlci50c3hcbmltcG9ydCB7IHBhcnNlUGFnZUlkIH0gZnJvbSBcIm5vdGlvbi11dGlsc1wiO1xudmFyIHVybFN0eWxlID0geyB3aWR0aDogXCIxMDAlXCIgfTtcbnZhciBBc3NldFdyYXBwZXIgPSAoeyBibG9ja0lkLCBibG9jayB9KSA9PiB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICBjb25zdCB2YWx1ZSA9IGJsb2NrO1xuICBjb25zdCB7IGNvbXBvbmVudHMsIG1hcFBhZ2VVcmwsIHJvb3REb21haW4gfSA9IHVzZU5vdGlvbkNvbnRleHQoKTtcbiAgbGV0IGlzVVJMID0gZmFsc2U7XG4gIGlmIChibG9jay50eXBlID09PSBcImltYWdlXCIpIHtcbiAgICBjb25zdCBjYXB0aW9uID0gKF9jID0gKF9iID0gKF9hID0gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLnByb3BlcnRpZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYXB0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2JbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfY1swXTtcbiAgICBpZiAoY2FwdGlvbikge1xuICAgICAgY29uc3QgaWQgPSBwYXJzZVBhZ2VJZChjYXB0aW9uLCB7IHV1aWQ6IHRydWUgfSk7XG4gICAgICBjb25zdCBpc1BhZ2UgPSBjYXB0aW9uLmNoYXJBdCgwKSA9PT0gXCIvXCIgJiYgaWQ7XG4gICAgICBpZiAoaXNQYWdlIHx8IGlzVmFsaWRVUkwoY2FwdGlvbikpIHtcbiAgICAgICAgaXNVUkwgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBmaWd1cmUgPSAvKiBAX19QVVJFX18gKi8gUmVhY3QxNi5jcmVhdGVFbGVtZW50KFwiZmlndXJlXCIsIHtcbiAgICBjbGFzc05hbWU6IGNzKFwibm90aW9uLWFzc2V0LXdyYXBwZXJcIiwgYG5vdGlvbi1hc3NldC13cmFwcGVyLSR7YmxvY2sudHlwZX1gLCAoKF9kID0gdmFsdWUuZm9ybWF0KSA9PSBudWxsID8gdm9pZCAwIDogX2QuYmxvY2tfZnVsbF93aWR0aCkgJiYgXCJub3Rpb24tYXNzZXQtd3JhcHBlci1mdWxsXCIsIGJsb2NrSWQpXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE2LmNyZWF0ZUVsZW1lbnQoQXNzZXQsIHtcbiAgICBibG9jazogdmFsdWUsXG4gICAgem9vbWFibGU6ICFpc1VSTFxuICB9LCAoKF9lID0gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLnByb3BlcnRpZXMpID09IG51bGwgPyB2b2lkIDAgOiBfZS5jYXB0aW9uKSAmJiAhaXNVUkwgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTYuY3JlYXRlRWxlbWVudChcImZpZ2NhcHRpb25cIiwge1xuICAgIGNsYXNzTmFtZTogXCJub3Rpb24tYXNzZXQtY2FwdGlvblwiXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE2LmNyZWF0ZUVsZW1lbnQoVGV4dCwge1xuICAgIHZhbHVlOiB2YWx1ZS5wcm9wZXJ0aWVzLmNhcHRpb24sXG4gICAgYmxvY2tcbiAgfSkpKSk7XG4gIGlmIChpc1VSTCkge1xuICAgIGNvbnN0IGNhcHRpb24gPSAoX2YgPSB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUucHJvcGVydGllcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmNhcHRpb25bMF1bMF07XG4gICAgY29uc3QgaWQgPSBwYXJzZVBhZ2VJZChjYXB0aW9uLCB7IHV1aWQ6IHRydWUgfSk7XG4gICAgY29uc3QgaXNQYWdlID0gY2FwdGlvbi5jaGFyQXQoMCkgPT09IFwiL1wiICYmIGlkO1xuICAgIGNvbnN0IGNhcHRpb25Ib3N0bmFtZSA9IGV4dHJhY3RIb3N0bmFtZShjYXB0aW9uKTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTYuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLlBhZ2VMaW5rLCB7XG4gICAgICBzdHlsZTogdXJsU3R5bGUsXG4gICAgICBocmVmOiBpc1BhZ2UgPyBtYXBQYWdlVXJsKGlkKSA6IGNhcHRpb24sXG4gICAgICB0YXJnZXQ6IGNhcHRpb25Ib3N0bmFtZSAmJiBjYXB0aW9uSG9zdG5hbWUgIT09IHJvb3REb21haW4gJiYgIWNhcHRpb24uc3RhcnRzV2l0aChcIi9cIikgPyBcImJsYW5rX1wiIDogbnVsbFxuICAgIH0sIGZpZ3VyZSk7XG4gIH1cbiAgcmV0dXJuIGZpZ3VyZTtcbn07XG5mdW5jdGlvbiBpc1ZhbGlkVVJMKHN0cikge1xuICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcIl4oaHR0cHM/OlxcXFwvXFxcXC8pPygoKFthLXpcXFxcZF0oW2EtelxcXFxkLV0qW2EtelxcXFxkXSkqKVxcXFwuKStbYS16XXsyLH18KChcXFxcZHsxLDN9XFxcXC4pezN9XFxcXGR7MSwzfSkpKFxcXFw6XFxcXGQrKT8oXFxcXC9bLWEtelxcXFxkJV8ufitdKikqKFxcXFw/WzsmYS16XFxcXGQlXy5+Kz0tXSopPyhcXFxcI1stYS16XFxcXGRfXSopPyRcIiwgXCJpXCIpO1xuICByZXR1cm4gISFwYXR0ZXJuLnRlc3Qoc3RyKTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RIb3N0bmFtZSh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBob3N0bmFtZSA9IG5ldyBVUkwodXJsKS5ob3N0bmFtZTtcbiAgICByZXR1cm4gaG9zdG5hbWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2NoZWNrYm94LnRzeFxuaW1wb3J0ICogYXMgUmVhY3QxOCBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2ljb25zL2NoZWNrLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QxNyBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIFN2Z0NoZWNrKHByb3BzKSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxNy5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHtcbiAgICB2aWV3Qm94OiBcIjAgMCAxNCAxNFwiXG4gIH0sIHByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTcuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTUuNSAxMkwxNCAzLjUgMTIuNSAybC03IDctNC00LjAwM0wwIDYuNDk5elwiXG4gIH0pKTtcbn1cbnZhciBjaGVja19kZWZhdWx0ID0gU3ZnQ2hlY2s7XG5cbi8vIHNyYy9jb21wb25lbnRzL2NoZWNrYm94LnRzeFxudmFyIENoZWNrYm94ID0gKHsgaXNDaGVja2VkIH0pID0+IHtcbiAgbGV0IGNvbnRlbnQgPSBudWxsO1xuICBpZiAoaXNDaGVja2VkKSB7XG4gICAgY29udGVudCA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE4LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1wcm9wZXJ0eS1jaGVja2JveC1jaGVja2VkXCJcbiAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxOC5jcmVhdGVFbGVtZW50KGNoZWNrX2RlZmF1bHQsIG51bGwpKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50ID0gLyogQF9fUFVSRV9fICovIFJlYWN0MTguY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwibm90aW9uLXByb3BlcnR5LWNoZWNrYm94LXVuY2hlY2tlZFwiXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE4LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwibm90aW9uLXByb3BlcnR5IG5vdGlvbi1wcm9wZXJ0eS1jaGVja2JveFwiXG4gIH0sIGNvbnRlbnQpO1xufTtcblxuLy8gc3JjL2NvbnRleHQudHN4XG52YXIgRGVmYXVsdExpbmsgPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDE5LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fc3ByZWFkVmFsdWVzKHtcbiAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICByZWw6IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG59LCBwcm9wcykpO1xudmFyIERlZmF1bHRMaW5rTWVtbyA9IFJlYWN0MTkubWVtbyhEZWZhdWx0TGluayk7XG52YXIgRGVmYXVsdFBhZ2VMaW5rID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3QxOS5jcmVhdGVFbGVtZW50KFwiYVwiLCBfX3NwcmVhZFZhbHVlcyh7fSwgcHJvcHMpKTtcbnZhciBEZWZhdWx0UGFnZUxpbmtNZW1vID0gUmVhY3QxOS5tZW1vKERlZmF1bHRQYWdlTGluayk7XG52YXIgRGVmYXVsdEVtYmVkID0gQXNzZXRXcmFwcGVyO1xudmFyIERlZmF1bHRIZWFkZXIgPSBIZWFkZXI7XG52YXIgZHVtbXlDb21wb25lbnQgPSAobmFtZSkgPT4gKCkgPT4ge1xuICBjb25zb2xlLndhcm4oYFdhcm5pbmc6IHVzaW5nIGVtcHR5IGNvbXBvbmVudCBcIiR7bmFtZX1cIiAoeW91IHNob3VsZCBvdmVycmlkZSB0aGlzIGluIE5vdGlvblJlbmRlcmVyLmNvbXBvbmVudHMpYCk7XG4gIHJldHVybiBudWxsO1xufTtcbnZhciBkdW1teU92ZXJyaWRlRm4gPSAoXywgZGVmYXVsdFZhbHVlRm4pID0+IGRlZmF1bHRWYWx1ZUZuKCk7XG52YXIgZGVmYXVsdENvbXBvbmVudHMgPSB7XG4gIEltYWdlOiBudWxsLFxuICBMaW5rOiBEZWZhdWx0TGlua01lbW8sXG4gIFBhZ2VMaW5rOiBEZWZhdWx0UGFnZUxpbmtNZW1vLFxuICBDaGVja2JveCxcbiAgQ2FsbG91dDogdm9pZCAwLFxuICBDb2RlOiBkdW1teUNvbXBvbmVudChcIkNvZGVcIiksXG4gIEVxdWF0aW9uOiBkdW1teUNvbXBvbmVudChcIkVxdWF0aW9uXCIpLFxuICBDb2xsZWN0aW9uOiBkdW1teUNvbXBvbmVudChcIkNvbGxlY3Rpb25cIiksXG4gIFByb3BlcnR5OiB2b2lkIDAsXG4gIHByb3BlcnR5VGV4dFZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIHByb3BlcnR5U2VsZWN0VmFsdWU6IGR1bW15T3ZlcnJpZGVGbixcbiAgcHJvcGVydHlSZWxhdGlvblZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIHByb3BlcnR5Rm9ybXVsYVZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIHByb3BlcnR5VGl0bGVWYWx1ZTogZHVtbXlPdmVycmlkZUZuLFxuICBwcm9wZXJ0eVBlcnNvblZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIHByb3BlcnR5RmlsZVZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIHByb3BlcnR5Q2hlY2tib3hWYWx1ZTogZHVtbXlPdmVycmlkZUZuLFxuICBwcm9wZXJ0eVVybFZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIHByb3BlcnR5RW1haWxWYWx1ZTogZHVtbXlPdmVycmlkZUZuLFxuICBwcm9wZXJ0eVBob25lTnVtYmVyVmFsdWU6IGR1bW15T3ZlcnJpZGVGbixcbiAgcHJvcGVydHlOdW1iZXJWYWx1ZTogZHVtbXlPdmVycmlkZUZuLFxuICBwcm9wZXJ0eUxhc3RFZGl0ZWRUaW1lVmFsdWU6IGR1bW15T3ZlcnJpZGVGbixcbiAgcHJvcGVydHlDcmVhdGVkVGltZVZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIHByb3BlcnR5RGF0ZVZhbHVlOiBkdW1teU92ZXJyaWRlRm4sXG4gIFBkZjogZHVtbXlDb21wb25lbnQoXCJQZGZcIiksXG4gIFR3ZWV0OiBkdW1teUNvbXBvbmVudChcIlR3ZWV0XCIpLFxuICBNb2RhbDogZHVtbXlDb21wb25lbnQoXCJNb2RhbFwiKSxcbiAgSGVhZGVyOiBEZWZhdWx0SGVhZGVyLFxuICBFbWJlZDogRGVmYXVsdEVtYmVkXG59O1xudmFyIGRlZmF1bHROb3Rpb25Db250ZXh0ID0ge1xuICByZWNvcmRNYXA6IHtcbiAgICBibG9jazoge30sXG4gICAgY29sbGVjdGlvbjoge30sXG4gICAgY29sbGVjdGlvbl92aWV3OiB7fSxcbiAgICBjb2xsZWN0aW9uX3F1ZXJ5OiB7fSxcbiAgICBub3Rpb25fdXNlcjoge30sXG4gICAgc2lnbmVkX3VybHM6IHt9XG4gIH0sXG4gIGNvbXBvbmVudHM6IGRlZmF1bHRDb21wb25lbnRzLFxuICBtYXBQYWdlVXJsOiBkZWZhdWx0TWFwUGFnZVVybCgpLFxuICBtYXBJbWFnZVVybDogZGVmYXVsdE1hcEltYWdlVXJsLFxuICBzZWFyY2hOb3Rpb246IG51bGwsXG4gIGZ1bGxQYWdlOiBmYWxzZSxcbiAgZGFya01vZGU6IGZhbHNlLFxuICBwcmV2aWV3SW1hZ2VzOiBmYWxzZSxcbiAgZm9yY2VDdXN0b21JbWFnZXM6IGZhbHNlLFxuICBzaG93Q29sbGVjdGlvblZpZXdEcm9wZG93bjogdHJ1ZSxcbiAgbGlua1RhYmxlVGl0bGVQcm9wZXJ0aWVzOiB0cnVlLFxuICBzaG93VGFibGVPZkNvbnRlbnRzOiBmYWxzZSxcbiAgbWluVGFibGVPZkNvbnRlbnRzSXRlbXM6IDMsXG4gIGRlZmF1bHRQYWdlSWNvbjogbnVsbCxcbiAgZGVmYXVsdFBhZ2VDb3ZlcjogbnVsbCxcbiAgZGVmYXVsdFBhZ2VDb3ZlclBvc2l0aW9uOiAwLjUsXG4gIHpvb206IG51bGxcbn07XG52YXIgY3R4ID0gUmVhY3QxOS5jcmVhdGVDb250ZXh0KGRlZmF1bHROb3Rpb25Db250ZXh0KTtcbnZhciBOb3Rpb25Db250ZXh0UHJvdmlkZXIgPSAoX2EpID0+IHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICBjb21wb25lbnRzOiB0aGVtZUNvbXBvbmVudHMgPSB7fSxcbiAgICBjaGlsZHJlbixcbiAgICBtYXBQYWdlVXJsLFxuICAgIG1hcEltYWdlVXJsLFxuICAgIHJvb3RQYWdlSWRcbiAgfSA9IF9iLCByZXN0ID0gX19vYmpSZXN0KF9iLCBbXG4gICAgXCJjb21wb25lbnRzXCIsXG4gICAgXCJjaGlsZHJlblwiLFxuICAgIFwibWFwUGFnZVVybFwiLFxuICAgIFwibWFwSW1hZ2VVcmxcIixcbiAgICBcInJvb3RQYWdlSWRcIlxuICBdKTtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmVzdCkpIHtcbiAgICBpZiAocmVzdFtrZXldID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZSByZXN0W2tleV07XG4gICAgfVxuICB9XG4gIGNvbnN0IHdyYXBwZWRUaGVtZUNvbXBvbmVudHMgPSBSZWFjdDE5LnVzZU1lbW8oKCkgPT4gX19zcHJlYWRWYWx1ZXMoe30sIHRoZW1lQ29tcG9uZW50cyksIFt0aGVtZUNvbXBvbmVudHNdKTtcbiAgaWYgKHdyYXBwZWRUaGVtZUNvbXBvbmVudHMubmV4dEltYWdlKSB7XG4gICAgd3JhcHBlZFRoZW1lQ29tcG9uZW50cy5JbWFnZSA9IHdyYXBOZXh0SW1hZ2UodGhlbWVDb21wb25lbnRzLm5leHRJbWFnZSk7XG4gIH1cbiAgaWYgKHdyYXBwZWRUaGVtZUNvbXBvbmVudHMubmV4dExpbmspIHtcbiAgICB3cmFwcGVkVGhlbWVDb21wb25lbnRzLm5leHRMaW5rID0gd3JhcE5leHRMaW5rKHRoZW1lQ29tcG9uZW50cy5uZXh0TGluayk7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMod3JhcHBlZFRoZW1lQ29tcG9uZW50cykpIHtcbiAgICBpZiAoIXdyYXBwZWRUaGVtZUNvbXBvbmVudHNba2V5XSkge1xuICAgICAgZGVsZXRlIHdyYXBwZWRUaGVtZUNvbXBvbmVudHNba2V5XTtcbiAgICB9XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBSZWFjdDE5LnVzZU1lbW8oKCkgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZGVmYXVsdE5vdGlvbkNvbnRleHQpLCByZXN0KSwge1xuICAgIHJvb3RQYWdlSWQsXG4gICAgbWFwUGFnZVVybDogbWFwUGFnZVVybCAhPSBudWxsID8gbWFwUGFnZVVybCA6IGRlZmF1bHRNYXBQYWdlVXJsKHJvb3RQYWdlSWQpLFxuICAgIG1hcEltYWdlVXJsOiBtYXBJbWFnZVVybCAhPSBudWxsID8gbWFwSW1hZ2VVcmwgOiBkZWZhdWx0TWFwSW1hZ2VVcmwsXG4gICAgY29tcG9uZW50czogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIGRlZmF1bHRDb21wb25lbnRzKSwgd3JhcHBlZFRoZW1lQ29tcG9uZW50cylcbiAgfSksIFttYXBJbWFnZVVybCwgbWFwUGFnZVVybCwgd3JhcHBlZFRoZW1lQ29tcG9uZW50cywgcm9vdFBhZ2VJZCwgcmVzdF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTkuY3JlYXRlRWxlbWVudChjdHguUHJvdmlkZXIsIHtcbiAgICB2YWx1ZVxuICB9LCBjaGlsZHJlbik7XG59O1xudmFyIE5vdGlvbkNvbnRleHRDb25zdW1lciA9IGN0eC5Db25zdW1lcjtcbnZhciB1c2VOb3Rpb25Db250ZXh0ID0gKCkgPT4ge1xuICByZXR1cm4gUmVhY3QxOS51c2VDb250ZXh0KGN0eCk7XG59O1xuXG4vLyBzcmMvY29tcG9uZW50cy90ZXh0LnRzeFxudmFyIFRleHQgPSAoeyB2YWx1ZSwgYmxvY2ssIGxpbmtQcm9wcywgbGlua1Byb3RvY29sIH0pID0+IHtcbiAgY29uc3QgeyBjb21wb25lbnRzLCByZWNvcmRNYXAsIG1hcFBhZ2VVcmwsIG1hcEltYWdlVXJsLCByb290RG9tYWluIH0gPSB1c2VOb3Rpb25Db250ZXh0KCk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KFJlYWN0MjAuRnJhZ21lbnQsIG51bGwsIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5tYXAoKFt0ZXh0LCBkZWNvcmF0aW9uc10sIGluZGV4KSA9PiB7XG4gICAgaWYgKCFkZWNvcmF0aW9ucykge1xuICAgICAgaWYgKHRleHQgPT09IFwiLFwiKSB7XG4gICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICBzdHlsZTogeyBwYWRkaW5nOiBcIjAuNWVtXCIgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KFJlYWN0MjAuRnJhZ21lbnQsIHtcbiAgICAgICAgICBrZXk6IGluZGV4XG4gICAgICAgIH0sIHRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBmb3JtYXR0ZWQgPSBkZWNvcmF0aW9ucy5yZWR1Y2UoKGVsZW1lbnQsIGRlY29yYXRvcikgPT4ge1xuICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgIHN3aXRjaCAoZGVjb3JhdG9yWzBdKSB7XG4gICAgICAgIGNhc2UgXCJwXCI6IHtcbiAgICAgICAgICBjb25zdCBibG9ja0lkID0gZGVjb3JhdG9yWzFdO1xuICAgICAgICAgIGNvbnN0IGxpbmtlZEJsb2NrID0gKF9hID0gcmVjb3JkTWFwLmJsb2NrW2Jsb2NrSWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2EudmFsdWU7XG4gICAgICAgICAgaWYgKCFsaW5rZWRCbG9jaykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1wicFwiIG1pc3NpbmcgYmxvY2snLCBibG9ja0lkKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLlBhZ2VMaW5rLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwibm90aW9uLWxpbmtcIixcbiAgICAgICAgICAgIGhyZWY6IG1hcFBhZ2VVcmwoYmxvY2tJZClcbiAgICAgICAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KFBhZ2VUaXRsZSwge1xuICAgICAgICAgICAgYmxvY2s6IGxpbmtlZEJsb2NrXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJcXHUyMDIzXCI6IHtcbiAgICAgICAgICBjb25zdCBsaW5rVHlwZSA9IGRlY29yYXRvclsxXVswXTtcbiAgICAgICAgICBjb25zdCBpZCA9IGRlY29yYXRvclsxXVsxXTtcbiAgICAgICAgICBzd2l0Y2ggKGxpbmtUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidVwiOiB7XG4gICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSAoX2IgPSByZWNvcmRNYXAubm90aW9uX3VzZXJbaWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2IudmFsdWU7XG4gICAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcIlxcdTIwMjNcIiBtaXNzaW5nIHVzZXInLCBpZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IFt1c2VyLmdpdmVuX25hbWUsIHVzZXIuZmFtaWx5X25hbWVdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIwLmNyZWF0ZUVsZW1lbnQoR3JhY2VmdWxJbWFnZSwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJub3Rpb24tdXNlclwiLFxuICAgICAgICAgICAgICAgIHNyYzogbWFwSW1hZ2VVcmwodXNlci5wcm9maWxlX3Bob3RvLCBibG9jayksXG4gICAgICAgICAgICAgICAgYWx0OiBuYW1lXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICBjb25zdCBsaW5rZWRCbG9jayA9IChfYyA9IHJlY29yZE1hcC5ibG9ja1tpZF0pID09IG51bGwgPyB2b2lkIDAgOiBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKCFsaW5rZWRCbG9jaykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcIlxcdTIwMjNcIiBtaXNzaW5nIGJsb2NrJywgbGlua1R5cGUsIGlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLlBhZ2VMaW5rLCBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwibm90aW9uLWxpbmtcIixcbiAgICAgICAgICAgICAgICBocmVmOiBtYXBQYWdlVXJsKGlkKVxuICAgICAgICAgICAgICB9LCBsaW5rUHJvcHMpLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgICAgIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIwLmNyZWF0ZUVsZW1lbnQoUGFnZVRpdGxlLCB7XG4gICAgICAgICAgICAgICAgYmxvY2s6IGxpbmtlZEJsb2NrXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBgbm90aW9uLSR7ZGVjb3JhdG9yWzFdfWBcbiAgICAgICAgICB9LCBlbGVtZW50KTtcbiAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1pbmxpbmUtY29kZVwiXG4gICAgICAgICAgfSwgZWxlbWVudCk7XG4gICAgICAgIGNhc2UgXCJiXCI6XG4gICAgICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIwLmNyZWF0ZUVsZW1lbnQoXCJiXCIsIG51bGwsIGVsZW1lbnQpO1xuICAgICAgICBjYXNlIFwiaVwiOlxuICAgICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KFwiZW1cIiwgbnVsbCwgZWxlbWVudCk7XG4gICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIwLmNyZWF0ZUVsZW1lbnQoXCJzXCIsIG51bGwsIGVsZW1lbnQpO1xuICAgICAgICBjYXNlIFwiX1wiOlxuICAgICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwibm90aW9uLWlubGluZS11bmRlcnNjb3JlXCJcbiAgICAgICAgICB9LCBlbGVtZW50KTtcbiAgICAgICAgY2FzZSBcImVcIjpcbiAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLkVxdWF0aW9uLCB7XG4gICAgICAgICAgICBtYXRoOiBkZWNvcmF0b3JbMV0sXG4gICAgICAgICAgICBpbmxpbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgY2FzZSBcImFcIjoge1xuICAgICAgICAgIGNvbnN0IHYgPSBkZWNvcmF0b3JbMV07XG4gICAgICAgICAgY29uc3QgcGF0aG5hbWUgPSB2LnN1YnN0cigxKTtcbiAgICAgICAgICBjb25zdCBpZCA9IHBhcnNlUGFnZUlkMihwYXRobmFtZSwgeyB1dWlkOiB0cnVlIH0pO1xuICAgICAgICAgIGlmICgodlswXSA9PT0gXCIvXCIgfHwgdi5pbmNsdWRlcyhyb290RG9tYWluKSkgJiYgaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSB2LmluY2x1ZGVzKHJvb3REb21haW4pID8gdiA6IGAke21hcFBhZ2VVcmwoaWQpfSR7Z2V0SGFzaEZyYWdtZW50VmFsdWUodil9YDtcbiAgICAgICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHMuUGFnZUxpbmssIF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1saW5rXCIsXG4gICAgICAgICAgICAgIGhyZWZcbiAgICAgICAgICAgIH0sIGxpbmtQcm9wcyksIGVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLkxpbmssIF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1saW5rXCIsXG4gICAgICAgICAgICAgIGhyZWY6IGxpbmtQcm90b2NvbCA/IGAke2xpbmtQcm90b2NvbH06JHtkZWNvcmF0b3JbMV19YCA6IGRlY29yYXRvclsxXVxuICAgICAgICAgICAgfSwgbGlua1Byb3BzKSwgZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJkXCI6IHtcbiAgICAgICAgICBjb25zdCB2ID0gZGVjb3JhdG9yWzFdO1xuICAgICAgICAgIGNvbnN0IHR5cGUgPSB2ID09IG51bGwgPyB2b2lkIDAgOiB2LnR5cGU7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IFwiZGF0ZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydERhdGUgPSB2LnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShzdGFydERhdGUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkYXRlcmFuZ2VcIikge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gdi5zdGFydF9kYXRlO1xuICAgICAgICAgICAgY29uc3QgZW5kRGF0ZSA9IHYuZW5kX2RhdGU7XG4gICAgICAgICAgICByZXR1cm4gYCR7Zm9ybWF0RGF0ZShzdGFydERhdGUpfSBcXHUyMTkyICR7Zm9ybWF0RGF0ZShlbmREYXRlKX1gO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInVcIjoge1xuICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IGRlY29yYXRvclsxXTtcbiAgICAgICAgICBjb25zdCB1c2VyID0gKF9kID0gcmVjb3JkTWFwLm5vdGlvbl91c2VyW3VzZXJJZF0pID09IG51bGwgPyB2b2lkIDAgOiBfZC52YWx1ZTtcbiAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibWlzc2luZyB1c2VyXCIsIHVzZXJJZCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbmFtZSA9IFt1c2VyLmdpdmVuX25hbWUsIHVzZXIuZmFtaWx5X25hbWVdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChHcmFjZWZ1bEltYWdlLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwibm90aW9uLXVzZXJcIixcbiAgICAgICAgICAgIHNyYzogbWFwSW1hZ2VVcmwodXNlci5wcm9maWxlX3Bob3RvLCBibG9jayksXG4gICAgICAgICAgICBhbHQ6IG5hbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZW9pXCI6IHtcbiAgICAgICAgICBjb25zdCBibG9ja0lkID0gZGVjb3JhdG9yWzFdO1xuICAgICAgICAgIGNvbnN0IGV4dGVybmFsT2JqZWN0SW5zdGFuY2UgPSAoX2UgPSByZWNvcmRNYXAuYmxvY2tbYmxvY2tJZF0pID09IG51bGwgPyB2b2lkIDAgOiBfZS52YWx1ZTtcbiAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChFT0ksIHtcbiAgICAgICAgICAgIGJsb2NrOiBleHRlcm5hbE9iamVjdEluc3RhbmNlLFxuICAgICAgICAgICAgaW5saW5lOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1bnN1cHBvcnRlZCB0ZXh0IGZvcm1hdFwiLCBkZWNvcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QyMC5jcmVhdGVFbGVtZW50KFJlYWN0MjAuRnJhZ21lbnQsIG51bGwsIHRleHQpKTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjAuY3JlYXRlRWxlbWVudChSZWFjdDIwLkZyYWdtZW50LCB7XG4gICAgICBrZXk6IGluZGV4XG4gICAgfSwgZm9ybWF0dGVkKTtcbiAgfSkpO1xufTtcblxuLy8gc3JjL2ljb25zL2NvcHkudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDIxIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gU3ZnQ29weShwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MjEuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX3NwcmVhZFZhbHVlcyh7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiLFxuICAgIHdpZHRoOiBcIjFlbVwiLFxuICAgIHZlcnNpb246IFwiMS4xXCJcbiAgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QyMS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTAgNi43NUMwIDUuNzg0Ljc4NCA1IDEuNzUgNWgxLjVhLjc1Ljc1IDAgMDEwIDEuNWgtMS41YS4yNS4yNSAwIDAwLS4yNS4yNXY3LjVjMCAuMTM4LjExMi4yNS4yNS4yNWg3LjVhLjI1LjI1IDAgMDAuMjUtLjI1di0xLjVhLjc1Ljc1IDAgMDExLjUgMHYxLjVBMS43NSAxLjc1IDAgMDE5LjI1IDE2aC03LjVBMS43NSAxLjc1IDAgMDEwIDE0LjI1di03LjV6XCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIxLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNNSAxLjc1QzUgLjc4NCA1Ljc4NCAwIDYuNzUgMGg3LjVDMTUuMjE2IDAgMTYgLjc4NCAxNiAxLjc1djcuNUExLjc1IDEuNzUgMCAwMTE0LjI1IDExaC03LjVBMS43NSAxLjc1IDAgMDE1IDkuMjV2LTcuNXptMS43NS0uMjVhLjI1LjI1IDAgMDAtLjI1LjI1djcuNWMwIC4xMzguMTEyLjI1LjI1LjI1aDcuNWEuMjUuMjUgMCAwMC4yNS0uMjV2LTcuNWEuMjUuMjUgMCAwMC0uMjUtLjI1aC03LjV6XCJcbiAgfSkpO1xufVxudmFyIGNvcHlfZGVmYXVsdCA9IFN2Z0NvcHk7XG5cbi8vIHNyYy90aGlyZC1wYXJ0eS9jb2RlLnRzeFxuaW1wb3J0IFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNsaWtlLm1pbi5qc1wiO1xuaW1wb3J0IFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWphdmFzY3JpcHQubWluLmpzXCI7XG5pbXBvcnQgXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tanMtZXh0cmFzLm1pbi5qc1wiO1xuaW1wb3J0IFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXR5cGVzY3JpcHQubWluLmpzXCI7XG5pbXBvcnQgXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tanN4Lm1pbi5qc1wiO1xuaW1wb3J0IFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXRzeC5taW4uanNcIjtcbmltcG9ydCBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1qc29uLm1pbi5qc1wiO1xuaW1wb3J0IFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNzcy5taW4uanNcIjtcbmltcG9ydCBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jc3MtZXh0cmFzLm1pbi5qc1wiO1xudmFyIENvZGUgPSAoeyBibG9jaywgZGVmYXVsdExhbmd1YWdlID0gXCJ0eXBlc2NyaXB0XCIsIGNsYXNzTmFtZSB9KSA9PiB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICBjb25zdCBbaXNDb3BpZWQsIHNldElzQ29waWVkXSA9IFJlYWN0MjIudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBjb3B5VGltZW91dCA9IFJlYWN0MjIudXNlUmVmKCk7XG4gIGNvbnN0IHsgcmVjb3JkTWFwIH0gPSB1c2VOb3Rpb25Db250ZXh0KCk7XG4gIGNvbnN0IGNvbnRlbnQgPSBnZXRCbG9ja1RpdGxlNChibG9jaywgcmVjb3JkTWFwKTtcbiAgY29uc3QgbGFuZ3VhZ2UgPSAoKChfYyA9IChfYiA9IChfYSA9IGJsb2NrLnByb3BlcnRpZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5sYW5ndWFnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2NbMF0pIHx8IGRlZmF1bHRMYW5ndWFnZSkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgY2FwdGlvbiA9IGJsb2NrLnByb3BlcnRpZXMuY2FwdGlvbjtcbiAgY29uc3QgY29kZVJlZiA9IFJlYWN0MjIudXNlUmVmKCk7XG4gIFJlYWN0MjIudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY29kZVJlZi5jdXJyZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBoaWdobGlnaHRFbGVtZW50KGNvZGVSZWYuY3VycmVudCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwicHJpc21qcyBoaWdobGlnaHQgZXJyb3JcIiwgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtjb2RlUmVmXSk7XG4gIGNvbnN0IG9uQ2xpY2tDb3B5VG9DbGlwYm9hcmQgPSBSZWFjdDIyLnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAoMCwgaW1wb3J0X2NsaXBib2FyZF9jb3B5LmRlZmF1bHQpKGNvbnRlbnQpO1xuICAgIHNldElzQ29waWVkKHRydWUpO1xuICAgIGlmIChjb3B5VGltZW91dC5jdXJyZW50KSB7XG4gICAgICBjbGVhclRpbWVvdXQoY29weVRpbWVvdXQuY3VycmVudCk7XG4gICAgICBjb3B5VGltZW91dC5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgY29weVRpbWVvdXQuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0SXNDb3BpZWQoZmFsc2UpO1xuICAgIH0sIDEyMDApO1xuICB9LCBbY29udGVudCwgY29weVRpbWVvdXRdKTtcbiAgY29uc3QgY29weUJ1dHRvbiA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJub3Rpb24tY29kZS1jb3B5LWJ1dHRvblwiLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2tDb3B5VG9DbGlwYm9hcmRcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MjIuY3JlYXRlRWxlbWVudChjb3B5X2RlZmF1bHQsIG51bGwpKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIyLmNyZWF0ZUVsZW1lbnQoUmVhY3QyMi5GcmFnbWVudCwgbnVsbCwgLyogQF9fUFVSRV9fICovIFJlYWN0MjIuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgY2xhc3NOYW1lOiBjcyhcIm5vdGlvbi1jb2RlXCIsIGNsYXNzTmFtZSlcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MjIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIm5vdGlvbi1jb2RlLWNvcHlcIlxuICB9LCBjb3B5QnV0dG9uLCBpc0NvcGllZCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QyMi5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwibm90aW9uLWNvZGUtY29weS10b29sdGlwXCJcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MjIuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBpc0NvcGllZCA/IFwiQ29waWVkXCIgOiBcIkNvcHlcIikpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MjIuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgIGNsYXNzTmFtZTogYGxhbmd1YWdlLSR7bGFuZ3VhZ2V9YCxcbiAgICByZWY6IGNvZGVSZWZcbiAgfSwgY29udGVudCkpLCBjYXB0aW9uICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIyLmNyZWF0ZUVsZW1lbnQoXCJmaWdjYXB0aW9uXCIsIHtcbiAgICBjbGFzc05hbWU6IFwibm90aW9uLWFzc2V0LWNhcHRpb25cIlxuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QyMi5jcmVhdGVFbGVtZW50KFRleHQsIHtcbiAgICB2YWx1ZTogY2FwdGlvbixcbiAgICBibG9ja1xuICB9KSkpO1xufTtcbmV4cG9ydCB7XG4gIENvZGVcbn07XG4vKiEgY2xpcGJvYXJkLWNvcHkuIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-notion-x/build/third-party/code.js\n");

/***/ })

}]);