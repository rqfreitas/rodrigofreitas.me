{"version":3,"file":"next-api-og-image.module.js","sources":["../src/index.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next'\nimport type { Except, RequireExactlyOne } from 'type-fest'\nimport type { Page, Viewport } from 'puppeteer-core'\nimport type { ReactElement } from 'react'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport deepMerge from 'deepmerge'\nimport twemoji from 'twemoji'\nimport core from 'puppeteer-core'\nimport chrome from 'chrome-aws-lambda'\n\nconst STRATEGY_OPTIONS = ['body', 'query'] as const\ntype StrategyOption = typeof STRATEGY_OPTIONS[number]\n\nconst ENV_MODES = ['development', 'staging', 'production', 'testing'] as const\ntype EnvMode = typeof ENV_MODES[number]\n\ntype ImageType = 'png' | 'jpeg' | 'webp'\n\ntype StrategyAwareParams<\n  T extends StrategyOption = 'query',\n  StrategyDetails extends string | object = string,\n> = T extends 'body'\n  ? StrategyDetails\n  : Record<StrategyDetails extends string ? StrategyDetails : string, NonNullable<string>>\n\nexport type NextApiOgImageConfig<\n  Strategy extends StrategyOption,\n  StrategyDetails extends string | object = string,\n> = {\n  template: RequireExactlyOne<\n    Partial<{\n      html: (params: StrategyAwareParams<Strategy, StrategyDetails>) => string | Promise<string>\n      react: (params: StrategyAwareParams<Strategy, StrategyDetails>) => ReactElement | Promise<ReactElement>\n    }>,\n    'html' | 'react'\n  >\n  strategy?: StrategyOption\n  contentType?: string\n  cacheControl?: string\n  width?: number\n  height?: number\n  type?: ImageType\n  quality?: number\n  dev?: Partial<{\n    inspectHtml: boolean\n    errorsInResponse: boolean\n  }>\n}\n\ntype BrowserEnvironment = {\n  envMode: EnvMode\n  executable: string\n  page: Page\n  createImage: (html: string) => Promise<Buffer> | Promise<string>\n}\n\nexport function withOGImage<\n  Strategy extends StrategyOption = 'query',\n  StrategyDetails extends string | object = string,\n>(options: NextApiOgImageConfig<Strategy, StrategyDetails>) {\n  const defaultOptions: Except<NextApiOgImageConfig<Strategy, StrategyDetails>, 'template'> = {\n    contentType: options.type ? `image/${options.type}` : 'image/png',\n    strategy: 'query',\n    cacheControl: 'max-age 3600, must-revalidate',\n    width: 1200,\n    height: 630,\n    type: 'png',\n    quality: 90,\n    dev: {\n      inspectHtml: true,\n      errorsInResponse: true,\n    },\n  }\n\n  options = deepMerge(defaultOptions, options) as NextApiOgImageConfig<Strategy, StrategyDetails>\n\n  const {\n    template: { html: htmlTemplate, react: reactTemplate },\n    cacheControl,\n    strategy,\n    contentType,\n    width,\n    height,\n    type,\n    quality,\n    dev: { inspectHtml, errorsInResponse },\n  } = options\n\n  if (htmlTemplate && reactTemplate) {\n    throw new Error('Ambigious template provided. You must provide either `html` or `react` template.')\n  }\n\n  if (!htmlTemplate && !reactTemplate) {\n    throw new Error('No template was provided.')\n  }\n\n  const envMode = process.env.NODE_ENV as EnvMode\n\n  const createBrowserEnvironment = pipe(\n    getChromiumExecutable,\n    prepareWebPageFactory({ width, height }),\n    createImageFactory({ inspectHtml, type, quality }),\n  )\n\n  return async function (request: NextApiRequest, response: NextApiResponse) {\n    checkStrategy(strategy, !isProductionLikeMode(envMode) ? errorsInResponse : false, request, response)\n\n    const params = stringifyObjectProps(strategy === 'query' ? request.query : request.body)\n    const browserEnvironment = await createBrowserEnvironment()\n\n    const html =\n      htmlTemplate && !reactTemplate\n        ? await htmlTemplate({ ...params } as StrategyAwareParams<Strategy, StrategyDetails>)\n        : renderToStaticMarkup(\n            await reactTemplate({ ...params } as StrategyAwareParams<Strategy, StrategyDetails>),\n          )\n\n    response.setHeader(\n      'Content-Type',\n      !isProductionLikeMode(envMode) && inspectHtml ? 'text/html' : contentType,\n    )\n    response.setHeader('Cache-Control', cacheControl)\n\n    response.write(await browserEnvironment.createImage(emojify(html)))\n    response.end()\n  }\n}\n\nfunction isProductionLikeMode(envMode: EnvMode) {\n  return envMode === 'production' || envMode === 'staging'\n}\n\nfunction checkStrategy(\n  strategy: StrategyOption,\n  errorsInResponse: boolean,\n  request: NextApiRequest,\n  response: NextApiResponse,\n) {\n  const checks: Record<StrategyOption, () => void> = {\n    body: () => {\n      const {\n        method,\n        headers: { 'content-type': contentType },\n      } = request\n\n      if (method !== 'POST' && contentType !== 'application/json') {\n        const message = `Strategy is set to \\`body\\` so parameters must be passed by POST request and JSON payload. Current method: ${method} and current content type: ${contentType}`\n\n        if (errorsInResponse) {\n          response.json({ message })\n        }\n\n        throw new Error(message)\n      }\n    },\n    query: () => {\n      const { method } = request\n\n      if (method !== 'GET') {\n        const message = `Strategy is set to \\`query\\` so parameters must be passed by GET request and query params. Current method: ${method}`\n\n        if (errorsInResponse) {\n          response.json({ message })\n        }\n\n        throw new Error(message)\n      }\n    },\n  }\n  const currentCheck = checks[strategy]\n\n  if (!currentCheck) {\n    throw new Error(`Unknown strategy provided. Possible values: ${STRATEGY_OPTIONS}`)\n  }\n\n  currentCheck()\n}\n\nfunction stringifyObjectProps(object: object) {\n  return JSON.parse(\n    JSON.stringify(object, (key, value) => (value && typeof value === 'object' ? value : `${value}`)),\n  )\n}\n\nfunction emojify(html: string) {\n  const emojified = twemoji.parse(html, { folder: 'svg', ext: '.svg' })\n\n  const emojiStyle = `\n    .emoji {\n      height: 1em;\n      width: 1em;\n      margin: 0 .05em 0 .1em;\n      vertical-align: -0.1em;\n    }\n  `\n\n  return `<style>${emojiStyle}</style>${emojified}`\n}\n\nfunction pipe(...functions: Array<Function>): () => Promise<BrowserEnvironment> {\n  return async function () {\n    return await functions.reduce(\n      async (acc, fn) => await fn(await acc),\n      Promise.resolve({ envMode: process.env.NODE_ENV as EnvMode } as BrowserEnvironment),\n    )\n  }\n}\n\nfunction getChromiumExecutable(browserEnvironment: BrowserEnvironment) {\n  const executable =\n    process.platform === 'win32'\n      ? 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\n      : process.platform === 'linux'\n      ? '/usr/bin/google-chrome'\n      : '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'\n\n  return { ...browserEnvironment, executable }\n}\n\nfunction prepareWebPageFactory(viewPort: Viewport) {\n  return async function (browserEnvironment: BrowserEnvironment) {\n    const { page, envMode, executable } = browserEnvironment\n\n    if (page) {\n      return { ...browserEnvironment, page }\n    }\n\n    const chromiumOptions = !isProductionLikeMode(envMode)\n      ? { args: [], executablePath: executable, headless: true }\n      : {\n          args: chrome.args,\n          executablePath: await chrome.executablePath,\n          headless: chrome.headless,\n        }\n\n    const browser = await core.launch(chromiumOptions)\n    const newPage = await browser.newPage()\n    await newPage.setViewport(viewPort)\n\n    return { ...browserEnvironment, page: newPage }\n  }\n}\n\nfunction createImageFactory({\n  inspectHtml,\n  type,\n  quality,\n}: {\n  inspectHtml: boolean\n  type: ImageType\n  quality: number\n}) {\n  return function (browserEnvironment: BrowserEnvironment) {\n    const { page, envMode } = browserEnvironment\n\n    return {\n      ...browserEnvironment,\n      createImage: async function (html: string) {\n        await page.setContent(html)\n        const file =\n          !isProductionLikeMode(envMode) && inspectHtml\n            ? await page.content()\n            : await page.screenshot({ type, encoding: 'binary', quality })\n        return file\n      },\n    }\n  }\n}\n"],"names":["STRATEGY_OPTIONS","withOGImage","options","deepMerge","contentType","type","strategy","cacheControl","width","height","quality","dev","inspectHtml","errorsInResponse","template","htmlTemplate","html","reactTemplate","react","Error","viewPort","envMode","process","env","NODE_ENV","createBrowserEnvironment","functions","reduce","acc","fn","Promise","resolve","pipe","getChromiumExecutable","browserEnvironment","core","launch","_isProductionLikeMode2","args","executablePath","headless","chrome","browser","newPage","setViewport","page","executable","isProductionLikeMode","createImage","setContent","content","screenshot","encoding","createImageFactory","request","response","checks","body","method","headers","message","json","query","currentCheck","checkStrategy","params","JSON","parse","stringify","key","value","renderToStaticMarkup","setHeader","write","twemoji","folder","ext","emojify","_write","end","platform"],"mappings":"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"}