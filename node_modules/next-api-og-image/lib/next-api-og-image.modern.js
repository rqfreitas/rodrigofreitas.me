import{renderToStaticMarkup as e}from"react-dom/server";import t from"deepmerge";import r from"twemoji";import n from"puppeteer-core";import o from"chrome-aws-lambda";function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}const s=["body","query"];function i(i){i=t({contentType:i.type?`image/${i.type}`:"image/png",strategy:"query",cacheControl:"max-age 3600, must-revalidate",width:1200,height:630,type:"png",quality:90,dev:{inspectHtml:!0,errorsInResponse:!0}},i);const{template:{html:u,react:m},cacheControl:l,strategy:y,contentType:h,width:d,height:g,type:w,quality:f,dev:{inspectHtml:v,errorsInResponse:b}}=i;if(u&&m)throw new Error("Ambigious template provided. You must provide either `html` or `react` template.");if(!u&&!m)throw new Error("No template was provided.");const q=process.env.NODE_ENV,C=function(...e){return async function(){return await e.reduce(async(e,t)=>await t(await e),Promise.resolve({envMode:process.env.NODE_ENV}))}}(p,(x={width:d,height:g},async function(e){const{page:t,envMode:r,executable:s}=e;if(t)return a({},e,{page:t});const i=c(r)?{args:o.args,executablePath:await o.executablePath,headless:o.headless}:{args:[],executablePath:s,headless:!0},p=await n.launch(i),u=await p.newPage();return await u.setViewport(x),a({},e,{page:u})}),function({inspectHtml:e,type:t,quality:r}){return function(n){const{page:o,envMode:s}=n;return a({},n,{createImage:async function(n){return await o.setContent(n),!c(s)&&e?await o.content():await o.screenshot({type:t,encoding:"binary",quality:r})}})}}({inspectHtml:v,type:w,quality:f}));var x;return async function(t,n){!function(e,t,r,n){const o={body:()=>{const{method:e,headers:{"content-type":o}}=r;if("POST"!==e&&"application/json"!==o){const r=`Strategy is set to \`body\` so parameters must be passed by POST request and JSON payload. Current method: ${e} and current content type: ${o}`;throw t&&n.json({message:r}),new Error(r)}},query:()=>{const{method:e}=r;if("GET"!==e){const r=`Strategy is set to \`query\` so parameters must be passed by GET request and query params. Current method: ${e}`;throw t&&n.json({message:r}),new Error(r)}}},a=o[e];if(!a)throw new Error(`Unknown strategy provided. Possible values: ${s}`);a()}(y,!c(q)&&b,t,n);const o=JSON.parse(JSON.stringify("query"===y?t.query:t.body,(e,t)=>t&&"object"==typeof t?t:`${t}`)),i=await C(),p=u&&!m?await u(a({},o)):e(await m(a({},o)));n.setHeader("Content-Type",!c(q)&&v?"text/html":h),n.setHeader("Cache-Control",l),n.write(await i.createImage(function(e){return`<style>\n    .emoji {\n      height: 1em;\n      width: 1em;\n      margin: 0 .05em 0 .1em;\n      vertical-align: -0.1em;\n    }\n  </style>${r.parse(e,{folder:"svg",ext:".svg"})}`}(p))),n.end()}}function c(e){return"production"===e||"staging"===e}function p(e){return a({},e,{executable:"win32"===process.platform?"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe":"linux"===process.platform?"/usr/bin/google-chrome":"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"})}export{i as withOGImage};
//# sourceMappingURL=next-api-og-image.modern.js.map
